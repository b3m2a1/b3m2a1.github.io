(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    217745,       4305]
NotebookOptionsPosition[    205020,       4017]
NotebookOutlinePosition[    205660,       4041]
CellTagsIndexPosition[    205577,       4036]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"<|", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"\"\<Title\>\"", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"\"\<Date\>\"", "->", 
    TemplateBox[{RowBox[{"\"Mon 24 Jul 2017 22:09:34\"", 
        StyleBox[
         RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
           RowBox[{"-", "4.`"}]}], FontColor -> GrayLevel[0.5]]}],
      RowBox[{"DateObject", "[", 
        RowBox[{
          RowBox[{"{", 
            
            RowBox[{"2017", ",", "7", ",", "24", ",", "22", ",", "9", ",", 
              "34.740282`"}], "}"}], ",", "\"Instant\"", ",", "\"Gregorian\"",
           ",", 
          RowBox[{"-", "4.`"}]}], "]"}]},
     "DateObject",
     Editable->False]}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Modified\>\"", "\[RuleDelayed]", "Now"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"\"\<Tags\>\"", "\[Rule]", 
    RowBox[{"{", "\"\<mathematica\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"\"\<Slug\>\"", "\[Rule]", "Automatic"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"\"\<Authors\>\"", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{
   "\"\<Disqus_ID\>\"", "->", 
    "\"\<b3m2a1-home-ecfbd9f3-deea-4e81-b898-14678638e4d9\>\""}]}], 
  "\[IndentingNewLine]", "|>"}]], "Metadata",
 CellChangeTimes->{
  3.709935482157638*^9, {3.709937377637679*^9, 3.709937419947137*^9}, {
   3.709939982329877*^9, 3.709939982843338*^9}, {3.709940337875165*^9, 
   3.709940339081085*^9}, {3.709947446338729*^9, 3.709947446992528*^9}, {
   3.709948008500279*^9, 
   3.709948031867608*^9}},ExpressionUUID->"0b12ecc2-0b73-4726-9d87-\
4b9e0040b345"],

Cell[CellGroupData[{

Cell[TextData[{
 "This is a an amalgamation of ",
 ButtonBox["three",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/a/147196/38205"], None},
  ButtonNote->"https://mathematica.stackexchange.com/a/147196/38205"],
 " ",
 ButtonBox["Stack Exchange",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/a/147452/38205"], None},
  ButtonNote->"https://mathematica.stackexchange.com/a/147452/38205"],
 " ",
 ButtonBox["answers",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/a/147547/38205"], None},
  ButtonNote->"https://mathematica.stackexchange.com/a/147547/38205"]
}], "Subsubsection",
 CellChangeTimes->{{3.709937326571802*^9, 3.7099373627688637`*^9}, {
   3.7099384357205763`*^9, 3.7099385267316837`*^9}, 3.709938560266589*^9, {
   3.709938595131205*^9, 3.709938595787376*^9}, {3.709939179946041*^9, 
   3.709939281581223*^9}},ExpressionUUID->"bf902f8a-ed08-4f8a-9dfd-\
154c47af8f15"],

Cell[TextData[{
 "Mathematica has a nice system for building API connections. It\
\[CloseCurlyQuote]s clean, object oriented, and built off of the function ",
 ButtonBox["ServiceConnect",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ServiceConnect"],
 ". The basic idea is that one connects to a service, creates an object \
representing that connection and caching its state, and then uses that object \
to send and parse calls."
}], "Text",
 CellChangeTimes->{{3.709935563117778*^9, 3.709935567965702*^9}, 
   3.7099373194433517`*^9, {3.7099373872926064`*^9, 3.7099373934605913`*^9}, {
   3.709938620194459*^9, 3.70993866890588*^9}, {3.709938888287998*^9, 
   3.70993891878724*^9}, {3.709938990948694*^9, 
   3.7099389995564747`*^9}},ExpressionUUID->"6568c468-889d-48df-ba9d-\
1a5ee02898da"],

Cell[TextData[{
 "Then digging in the ",
 ButtonBox["$UserBasePacletsDirectory",
  BaseStyle->"Link",
  ButtonData->"paclet:PacletManager/ref/$UserBasePacletsDirectory"],
 " one day I stumbled upon a bunch of paclets whose names were things like \
ServiceConnection_ServiceName. And that made me think that I could build my \
own (moreover I\[CloseCurlyQuote]d had success doing the same with the \
curated data framework already)."
}], "Text",
 CellChangeTimes->{{3.709939002604507*^9, 3.709939172082302*^9}, 
   3.709939367391958*^9, {3.710032530233779*^9, 
   3.710032535785068*^9}},ExpressionUUID->"4ee4307e-77d8-4943-8124-\
9cd64abceb6a"],

Cell[TextData[{
 "If you just want to start building your own I only ever build them using \
the ",
 Cell[BoxData[
  FormBox["CustomServiceConnection", TraditionalForm]], "InlineInput",
  FormatType->"TraditionalForm",ExpressionUUID->
  "3a4d2fe1-5e8b-4d11-adc3-fce2e1179ca9"],
 " I stuck into my ",
 ButtonBox["primary package.",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolframcloud.com/objects/b3m2a1.paclets/paclets/\
PacletServer/main.html#BTools"], None},
  ButtonNote->
   "http://www.wolframcloud.com/objects/b3m2a1.paclets/paclets/PacletServer/\
main.html#BTools"]
}], "Text",
 CellChangeTimes->{{3.709941916617474*^9, 3.709941973671245*^9}, {
   3.709942020752036*^9, 3.709942022230507*^9}, 
   3.709942097672798*^9},ExpressionUUID->"efe3a3d5-9334-4f2f-94c0-\
efb173da6c80"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Service Connection Paclets", "Section",
 CellChangeTimes->{{3.709940965145328*^9, 
  3.7099409765282097`*^9}},ExpressionUUID->"b02a902b-3126-4d51-8b8a-\
167e109a0b53"],

Cell["\<\
These paclets are pretty bare bones, to take a look at one of them:\
\>", "Text",
 CellChangeTimes->{{3.709939503186689*^9, 
  3.7099395314820423`*^9}},ExpressionUUID->"77a3c49b-399a-4b81-bd9a-\
fd6f0754e6a8"],

Cell[BoxData[
 RowBox[{"PacletOpen", "[", "\"\<ServiceConnection_ChemSpider\>\"", 
  "]"}]], "Code",
 CellChangeTimes->{{3.709939537738398*^9, 3.709939557953767*^9}, {
  3.7099396265329227`*^9, 
  3.70993963819281*^9}},ExpressionUUID->"02a7eb09-d7ea-498e-bbf4-\
4ee16dd1678e"],

Cell[TextData[Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvWd0VduZLeh+3aO7f/V4Y9SPHv1ejTe6XnXVK7fLrtBVZZftCk7XdX19
r30jOSMQCCSQUA4EIYLIGUQUIoNEVgSBCBKSUM4555yzZq+59llH+xztowDi
cq+trTG108p7rW9+30rnz5Y7fbbqP33nO99x+d/Fv8+Wuf/M2XmZ5+f/Wdx8
6eiyZrWj3coPHTfZrbZz/tHy/1k8/K//03e+0y3wv4jrDZ5eeJWYhJamFrS1
tP1xo1WPdol2I7QZo6OtYwJ0auf2qaGzvROdHW+Gro6uWcxiFrOYxR84uju7
0dzUjNLSUrS1taG6qgYdgqNqq2stUVmtQbw3X1u70aGuuk64rUYdUS38VFXJ
e0N3uvtq4aaquhrVwo88G/iZLN4ZQ4016iXqrVFrjIbahjHUWaMRjUT91NBU
34SmhumjuaHZEo2z+HaiRaJJnt93WmYxi1l8U9Ha3CrtzJKSEslDNYKzLXiM
PNnchtqWdtQIeVIr3NY1tUqeHs95GuprxLt6oRfUdaGmtk2e6+rbxLsaK3f1
5usa8a5d+Omq7URbTSu668S5rk0+txWPcdwGnDtdGHJ0g0SDNcZxtYZGxdmG
vN00LY6eCS5uEd+O/S6z+HahVaBD6NxtAjy3NgtObzKG3p/85qZr1qGZTFNb
S+t7L5dZzGIWxiCnkwvH2byC22vE+9rHj9G6YxvaPF3RsjsANS9eoFZwurTX
x9nJNZLDa7Ii0PLcAa1P56H5hRNqcmMFr7fL99Z+asSzduHnYV4kViVvwheJ
K7E22R2P8p/K59UGfr5++7zuvdjnTdPkfkN9gJw+a6N/60Aur65txP2yDtyu
6MXD0g6h39ajU/B6e1MT2hs1dAiQ7/V+O9o7hf9mNIrv39vdK8OS9cFUr5Q7
PpP1TFdf1L1y06jz09TQKNva+y6bWcxiFrZBXrfuY68RnN1w5TIGv/gtMO/3
wMLP5Xlgzu9Qd/cuaoQeYNH3XlUluLwdDa9PYjD6z4C4Pxf4H8DT/46B6L9A
Xdpl+V72v5v8VFVVS84+lnkW/zXhH/CnqT/E/536E/xpyj/hv8X/EBezr8v3
VTo/Rqgx4Px30ec+VXt+Mhvetu0+c/3tjQ2NFv3uDGeW078daGwkZzcjr6Ie
h4oHcapiFMfKRnC2sAtXijotEFzYicSyRsnxDeL7drY04+Thw3idUQwM9eNI
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
ueP43JrL2aZ5KFljxOds70Z8ruQE5azidH1cej7PzsqWaVLpM8JEXD9tFFij
SGKi/oEJ+d8G1xfkFqCnq0eOZwz0CS7q1XT8jPQMKR8Vv6Wnp0ubKO5pnORG
vU6rvin5nGOhSp7xPW2OiUAe0sssPZ8vX7YcoaGhsj9z8aLFOHzosOQR2t6e
Hp5ISUmR3G2/2l5yCG1hXtOup1/F55Qb1PkoA9lemf4LFy7IfCk7mlxImUwd
g3FStio+V7KXfCP7NUrLbMps5pkHw5W/xVddLbmcnE5bmRzw4MGDceWnl90s
S3I3v4+a60Deoe5rzVVKLrHcWE6U9/xO1CUUj5PXmR/qMmwzLBcpS039XOZw
hrT5AozLPB4j8s6+Aj2f86Bu4OHhIecdrlu3TmL16tXSVmUeedCtypOaM8A8
82wtM/XrIRgv6y/nV6o+G/rhmAXtYdZLfkfeh94Kld/+1q1b5ucqboav+pZU
GHqe5lmtXzHHK/RotndbfK6+D+NhfcrMzJR1h1zO78prycsG30nP58yfPl62
eSM+V9f0x3rK+k//1pC2rkgzOYl1TZZBf984Pmc872J9xLTmRJvy+z75XNVJ
ygXWH/Vd+P2eP38+rv5ymLgwJw03bt5GmeCkJ9HhuPMgGsPi+eBAv9QBe3pN
fY3UQXu6xbMmDEibW9Pxe7q7BMew/2oUXZ0daBbfW8qntgbcvvMQLW2dUiYO
DVEP6Nd0g28AX0+Jz1vaDOuWfq0Z+7iV7FT1lmVLDqCNw7at7C++M+rL5Tuu
XbLV30t/DF/ZTuQkpTeod+z3y87MfqP1bm8FC32hUGJq3K9hMq4vKSiRYxqc
A06bj3MNyOccF6dMo/xg/3BRYZG0z4MvBEsepB2r5Cz9EBx35jwDyc992rwG
/lY8wyDPGIE2BbmHdUK1HbZxzk8nn9PGpruLwRexYP4C7N+3X3LwsqXLpBvq
YOxzJ7+TtwICAiz4nPa84nPKfrZdfmfWG/bLqIP2LN/x25MTCDUGQy5Tspd8
I/s1SkrN7dwais8ZB/sPyOvkHIZJWcGyY1o4hVDVZ2sdk3WO/d7mtZIiPl7z
mRrDsNZbqUdRt2V9V+ngNUH3agwgMDBQcj51V+uwBoTckbqD0CMUtzLv5G62
WaVLky8o8/z9/bFp0ybExcVJnWHjxo3YuXOn5DrmU+nGTB/HGpR+Rb2C7lQf
hbSTi019RqZ4Wa+Vrc088GBfD7856wTLkHoZz7RJeWbdYH1SspjfnToe9Ske
1P/27t1r1mMkr4q6rdcl1DoY6z5B67I+deoU8vPzpRxn3WGeqL+R45OSksz6
mpF/5ke/ZkbJPdY/62+ibA7qCqzj/G6M37r+6esd06LXafTppixRdfl9QeVX
5mPQuB29S7Bc2Lb5vdguVVmpb06diHXTehwjJSEOYfeihJ40iNGRYSnvurs6
EBsdhYjwCFEPw9HU1oWG6jLcFfUxSrSzyOgngud7EPc4Cjdu3ERiShbKivIQ
FhqGe6K9PnoSL2RmC8Ju3EB4RBRuC1siITlD0wkM6t83EayzXHPDb2pdt9T6
Yb5jHzffqzag7BmOA7Kdvnz5UpYzy95IZ2V58B3tfKP3SuYxTLYTygraFsrO
Uu/Y78c58kyT0Vpn2rj66xnBG/O+jf4CA3ufnM4xDbYrpduofMt+oG6t71aN
91A+cp0Aubq3p1dyvwL1AeoAdE8+J8dTT6CM4looI/Ad+2lUGPTD8Dk+7rDW
QfI2ZXfIxRAsmDcxn7PfYLv/dqyyWyWfLV2yVPbB82CYbLfkVdrIlPkcg2Ga
mQ/awndu35EcTzeK25lPzu9QslfNhyT3KN3HGmree1RklKx3tKcoi9mnxz5h
fhdln9OttX+mh+livxS5VMYr4uM1dV+VZuuy5/gV80W9yihdao2ItD2kTTHe
Hdumfo2o2rOB5UP3/J48qKMtXLgQ69evl/qBOrZv3y6fLViwQMorqUt1dkk+
in8Zj7Vr18rvRzc8S53QlBf9PFjGy3rNvhHGy3KijpmTnYNLIZfw8sVLqduw
j5T8xfF9li/rivRjqruco8nv4OjoKONbs2aNrDOq/hJsC+bxJ1O8bO+M17qc
9WV9/dp18xoalgd1Hh7Pnj2TY0G2vq9qF4xHHy9lB/nB+vvynjry6aDTMt37
9++X40OMWx8+r9n/QJ2OfM73+nAYL9cYsd6ruvy+oPLL9DB/RvX1XYLlwvLh
t2e9UfVUjjuK737r5i0pl/Rp6xcyraezXXB3JK5dvS7kyT3UNrSiMOM1rt+8
g0bBSdEPbiMyNgGdrS3IFTK8vqZS1JOb8jdCI+7fRVZBBUYGexEq6ml+STX6
ezqR+CpJ2Iu1CL1xC7VNnWiuKxf1+Da6eoTt2/f1lsubguVEec5val23rPlc
yk4hZ8jL5BmeyS/U3cnplJeK05U9okBuIgdRDli/U2ExbOoHbOeU59Zx8Z79
fhPxuRG/f62c/oZ8ruYoUF4oHlc2E+UTx4CDgoJkX3tFZYW0STiezvKkbKFc
0tuA7MdgfxHbC9sFZS5lHeWutW3OZ1evXJV6rZJHPHe2W/L5tevXcO7sOXz1
xVfYvWu3tC0XLlgo573RDly7Zi2WLF4i7UNrPmf/OWUc5Qb5nBxDeU97jnao
OqiHcFyWZ7qRfN7ULDmEfdzj+FyclVywBsuEccZEx8i+WPZ737t7T8bJtHPc
hnmmG7q19s9yoOxVayRVvLKPQDzjO7rR++Ezyh/KJlWW1mBc1GuYJp6N0k6/
SnfQ8zm/I9ssw2BcbCfs82L741pB9nWT38ibtMNpt7LNqLQqPSA5KVnqAeY2
q8s/7WRrPmffiIqX9Yn+wx+G4+GDh1LmRkdFSx3mprB7WLYP7j+QdVvxuYqX
34DxKv1OxUs3zJ81nzPtjNe6nPVlffnSZbP8Z37oh9/0Ucwjyee2vi/LmNxh
xOesf9bfl9dsa6zfcp6QaV2PWn+joMbJqN8wLOoy+nD4nnqIkcx9X3zO9Nhq
R18H+H3Y58N6pg72rch+31GN4/Xu+d05v61PyLvM168QKjg9QejHt2/flfN4
nsU9Q1ZOAUoL8xDxMALxQj7dvBmGquo6PIqKQnW9yG9HE8KE+/auAYzKMSig
vblOyIdIweFD6GptxMO74WjvFHWt9/2Uy3TBOkt5aVS3yC9qbzD2cVO+qL4z
cg2hxmjJ6ey3Y78beZdu9O7IM3RLGaqeKdAd39Me5/gJxzkZD93r3fAZ48lM
z9T2HTOlzwj5Ofnm81vDUFcokJg279vgesptjmnQplZczvzTbmJfNeU0+0DY
T8u+StqVnP9EO5P1nbygyor6AMuS/RyKQ6gnkOPleiYhq6zBd9SllOxl3WAb
53x18jk5mTx7/959OKxxwJnTZ+S3Yn86uZt2ip+vn+zzZXr9t/nDzs5O8sqS
JUvwOum11MPZDqk/ULdgXaEtf/LkSWmLkxeoo0RGREq7j337N67fkGlTOomS
vWp9Q3FRsVnWWoMyYHR4VMpf9i9L+1zwDGUEbcS01DRZfpS3yiaw5l3KONX3
q9+HQa4/N+BrPqN+zHjMay8NwHbHuQHUb4zS39vdq+kO+WPcyryzDJRdyW/O
MqVewP512toODg4SHEPnt2D9ss4fr5kG1gmerfOuX9ei9HrO52e8dEvOIh+f
P38eT588lX0GnOtAPY1cyv4V3suxEJMOYBFv+/h4lZ2s7xtgvNwnWOXXqKzZ
t8i6xPcMT/UrsVzYPhJfJco6YPR9We50y3j08VJuNNY3yvD18fKaYHlSL2Sd
pT5l/XuG1FMpUzmHlfVT9afo42U7kPsmTrLu9l1D5ZfpMWpDXwdUnaKOzDbP
9k/5dvbMWdnfrnhKlT/nvSU+e4y7D6OFjGtHbvprhN19iLzsTNwKpX3egtSk
RBSXVyE2/AFiniagsbYCFy9ekr8hFiH0+eLyBmGf9+Hh7VA8i09BVVkx7t0P
F7ZTBW6H3UNrh9C5mmpxW9j7re3dUm94X+UzHbDO2lrTTX4h+I42sZSdgivI
M4qvCSkXRBnTjjxx4oTkXGt35Bm6y8rMsvCrf09OYBiKy/Xvec8w2X4y0jJk
mlT6bCEvO898fivY1Bumzv+T8T05grY2bWqlvyg9h+OCrNeUnxwvJSdTl+Uc
WiXf2SZUfWf9Zz8lZZ2y48rKyrS5uFfGz8XlM4bHNqTaF89s43KOm709Vq1a
Jcdo2XfCMVrqFpzjwD7N5y+eS11aXgsdmTxNHmefKjlm8eLFSE5MlnKQOsLz
Z8/lnCX2Y6s+duZDgXFTT8/MyJRhkh+ZB7pXsletb6AtqZe1eii5Ts55EvvE
rOcTvH7x/IW04ehG6kNW/pVNoGxFFS+v+UzZFUb+2LfA8qRsot2qB+1Xjt8T
5G2jMJgnxse49GtGWQbKrlT8yDUGtM/JsX5+fvI7cT8+9rnzmeLOcXkTcVs/
J/TrWhgv6zrHOmSfjSgn2qXsL6IeIevT5Suyf4b9Hhyzps7HbyzHQ5WuaVWm
Rulh/vS6BOPlftQqv9bpZDgciyFv6vepUPYxvy3HFljvjL6v1HOFbsF49PFS
ZvA3B4zSqSDLXYRNXeLaVcs1I7xne+Lca6M6wnjZNjkGNNm623cNlV+mx1Y7
+jqgOJ3fg3KQeij1YfYDsSwpN8yyibZGSxPiYmPw8P5DPBD2d3F5NQaFHZma
mCD7jR7FxKK+qQ2NNZWIjowQul2s0OdfoL6hCSnJyaipa9bGJWur8Sg6SvrJ
yC5EZ1sLEuIT0SFs8o7WJrwS1+0d/Gbvp1ymC9Y32mdGa7rZx07wHW1iKTt7
NFuP/KqgOJ18q3hbcbDeDW1PuT+c7rk1lF1qDYbJuGm7p6emyzSp9BkhNyt3
5mCoL+RJTJX7bXO9xvNcq8Z006a2Ljv9eipluyv5pfo9lHxXXMy5ZuRByWsq
jH7THF1d36B5jo5pDp4Kg/44T5J8zrnSas708uXLsXLlSqxYsWLcNc+85zW5
nGO069avk3zOfk+2T8pVNW9PyWl1r8BnapxR3bOeksto07AeqvUNPCt5YASG
Q93g/LnzUieSEPKW4wzkJIapbDprv3zGsmS/FMc6Vby85jMlX6why07oQka2
mx6UUbbSzueMT+p6BZrewrxTL1N2pTmPfVo5snwPHjwodWru36jmYsjwOm2X
kTX061oYL3mHOhfjVbY1dRGWH/tPEuITZL/KhfMXpB7BeZocY2a/J7nfqGyN
ypr5M88fNcVLW9c6vxYQbYXxUleVazFN+irTdeTIEfPcDCP/LGN+A8ajj5d8
Qn2Y33eitKt9sfTtSQ9llxvFyzmRXOen6tT7gsovZQXX1ky1jsw0lP6tdCX1
zaiLUSdV82TU9+C3UX0/fVKWaLpXv0mfk3MfaLOabHu6MbuX/WrdZt2Aa9L6
esV7Ux9AP+d6mdIkr7veT5m8CVgu7M/kN7WuW3o+z0rPkjq74nMjyH2Tbbxj
u2trb0N6WroFR08VDJv6AudpT4XP3z2nvyGfG3C6mc8zc6SerPQjPdSaMlXG
1vfWZc0+Evaf68vZ1n7w+j2/2V5Um2ltbpX97bTP9f24RuAceP29dL/WQdrn
7G9nvyfln/V+2Eb7y1s/U2PMXGsvZX5hoZnPOT6sZIER6F/aQ9wDXnCS/N06
AV6zT1TZaLb8y/7noiLJC6pdKG5X8t4Iqm1N1s9oyz/1Lz2vMs9c68kyUPym
z6M6y/mNgiv0z2zFYZRmgvHo5T3LXPWl6MPlunzGxbyQdylH6IZn3k+UP4u8
iu/H8Kx5lfeMg/LXVj4YB3UnulPfluA906HmjdqKl371vCr5TdxTF9Pn1wiT
7RPP97bqFPsVuOfCN4XPVVuYal15l9C3e5ahmsdg+S3Gy4pxsmQC2WId10Tv
33d5TAessxzzMuJzjpnrkZaSJsdlbc1PnwhyP+qSUtnvyrUJcvx+mmGQv9gH
SxvfOm22QI40OqvrKWOcvpArMVV7fiLOJ8eT05kmjmnYWiMwVdDeZh89y0s/
V346oL+Ozg7Zb84561x7tnrV6mmD+9DMnzcfycnJE65/mAwcY+B4jFynqOM5
zsdgn81kdU+tPdOvAZbrUE1zNW2B/RxyfWSBVbziGduNzTh7x8/5NJojagvM
E8emLOLN1/LLsjCKT3039c3Vsym1T1N62TaN9nfgM3KQ3o9a26jWnqg1qWpN
1lTlAsGx03Hxch5uttZnNVld5Vor67XlMj0TlAHrIsevGIc53oICqa/l5uZK
++Nt2qGt/Mq156Y9PSbbR+NdQ58ONb4303meiTL7JqbrmwZla1P/Vn1d+m9N
3tSDfe5Jr5Lk/iZse9NBakqq5HLKQYbBuUjUT6fqn7KN/qlTMAzrtNlCdka2
GUbPpgRDXWGqvG/QV2Bg65Pnyevse2DZsI1RzkyIHGNQFjEM6j4yHP07ca+H
0TMJEQbLnPuUcP467XS1h/t0wPnxnPfOMWPqKvzmhvFNAFV/1FoLa+jzagsy
/wZlNpEf6g+sb5Tv1nHyGdNEN9PNz2RguTNeo7yyDBgvy8RmPifJly2wDFn/
rPd24D31Thmv6fvZKs/plK+qZ5QnnBNjFC/bB+NVcU3n206WBsaZmZZpGC/b
LL+B7Ad8w/K0BfZRqv7Or3UPjQnm7lAuKrkzi28fVF1nnWXdNapb1lyuuDA1
ORVJCUkWSExIHHdWkPyt42GeU1+nyud6dxOBXM400K9Ki0xXRqZlOq3up8Lz
b8bpWW/O6VZ8nmPuv881ryVg+bCcbSHtdZosUyPQr/le7y5VO0udQd2nave2
MNV+kAn7SETeKTtV3NOFWp+o+Mz6WtqtIp43CXuyeDkOYite1UZmOl7mZaL8
vqt4bckBfbxse+8s3lzjeHlmvJPV1emC7Y3xWuuJvFfP36beWoPhyLm8oq0b
xfu+oPJLnW0m8zuLrw+qbtEmtFW32IaMQH6bqG/aSKYrnUBhOn3mCrbSYwTq
v9b3+mfqfsow1AuyJSa35a369w35fozf1RrBCdfUT1cHz3uzvW5n0gZ4UyiZ
M2GZvGUcs/F+s+Od6TjfZ7zs25nK3hlfO/LeTX5n8fVhou/LvihyvjX4XI8M
i2tj90bX7wLWaZsayPMaps7nmWZOn1r/vDGfs9/UzOc259KPzf2zGI+fYP29
HuyPMVqXr8ZZjMDvL6+nGMdUYA5zmpiOTHqT8N823vcRp4xXle3XHO9M5vmb
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
AjtnnDh2BJ/PW4SyDqApJxb/x3/+P5HRMIChpgpRJg6wW70aD58lobejARvt
lmH1mvVY9NXHcPLYbY66Nuc57Ow3me+3eKxFeEKu+V6Z3vu2egt5pNnnOWlJ
iEt4LX8zxMN+MU7diJPP9WMfqk7wN875u3WBgYHSVld1waK/fY0DnPadwTbB
19vyB7U6wDpROFYn/MVz/zLB54cvmvlc62/3Qo1oC+Wi/cTEPMaCBUsREnIF
JaLtHj16Aq9fpwrb6RZevUqSdjn7d8nZHLcNCNgl0vcKt2/flXxO99QDTp06
iyQhI2b5/N3w+c6de0y1ZFSOa2zevE2Oe5QK+ajau+LzspZaLIjYja3Jl3Ex
Lwbu8Wfg+Pw4tidfwbbkq/B4ekarb6ZVMbLWjfZhxZLFyKu1nLPSVV+AhSvt
5HXJyzvw8N2HQE9HLBL8euLoIcxZshrZxUXyNx943D2xHccuP5XXa+3tITVb
9r2FXYPDyoVY6bwNzVX5sLdzNDX+UjisccHtsEvYf/YCju/yxdXoNPnquL8b
QsOfYZeLHZat88TxIwcwd7kDcosK4OrmaZHO9Mc3hIw7La/X2C9CnZBlpa8e
wnvHGVM7++Plc65dK6+qxbNH97DCzh4+fpvhtXkH0vNKhD5Yguy8AsmbiouL
Bb+Su0sFj9JvXmGJ5NOi4lIT5/J35u/hdMgtZGUkYvfB48gtrpC8y9+GzC0o
1rhY+MkvyEdescl/SekkfF7+TuzzhnF83vLO+Dw6Olrw2yOL+mbE59dKOqWs
3ls8jECB3Sbweg/PJaMIyBF83qnxuQov++U9fPHVQoRHRuDymYOYu9RB6FSl
uB8eiZdPHuKff/JLlNW2CNt2JfIFr+U+uQ7PgGNynHj1wi8R9iQDLTX5+P3n
81BYXgrHtU5yXsqrB5dEWzmJ60F7sMn/uODkdtjN/wyPE7JwaMtGJJW0Izfh
Lpa5+Mi0uDttQEaOaPd2q5CUmo4FX32J4vpWpD+LxIOoOGxZtwBbD13B0/vn
8bv5zqjKf40li9fL+Tg1NdXo7+uV36qvp0t8tyagrxkrFy5FTUMdHB3WoX1k
GDnP7sLF9wDuhhyDvfsudHSINH36IS7dicPFA37YsOUISooLcPTUabT39CP4
kD9+8fNfYv+Zm3L+THVVpbRD27u6kfkqFieDb0ldbpe7AwJPhWKwvxuVtQ0Y
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
Y1Nmv3YWcMkUz9K70dBjmt8+qmzDIRz0ccHn85bB0dEeX8xditLa8VyX/eQW
ltt5GNSO8YJUL1uTIq5hnce+CetXX1MJvvz4A6x32ogVi+fBwWUzuvuN1o+M
4s6tG+gYHB+PSseAkFX8/U+jg3KhLC8FX3z471i6fof2bGRs3rpm+48iIfY+
fvwPf489Qfekm6GeFmxcsQj2a9fj8y++wONkbQ+YQdPv2MXdvoDPPp2LNauX
w8lnF4ZGNXnAMJur8rBg7mdYL9fXLEZJnbZvrNKrTh/YggVLV2LpnK+w/9RN
+WyifnseHJu6evWqea4FD1t8Hl+WBKen3tifcQJ3isNxLjcEdwsf4lDKSWyN
2Y2WrraxsFU/xFA7Vs77GKvWbcSS+V/CzX+/zbToD89Vi3E7Nmt8wod6cOPa
NXn58v4leO4KMsxf1LUTWLzcBa2dg4bvZ4/pHbb4nPu9ej7bji3JgQgreoDg
vKu4UXAbl3NuwCXSB5lVORbuVb92fXEm5n78MdZt3IA5n32MnUcvoa+9AnNX
LJuwz2wim3uwrwO+rmuwZv1GLJr7OVy3HjOctZv67D5OXbZs12d3eeDk5fAJ
42soFPXfyU1L3xT65kwBjF13VmH+glXo0DbV+YOYKT9ufvsU+Fe5yS8qlvdq
LLvI9OyNf6vF1j7u74LP697VejXj8fNGKz7nWPnu3buxdOlSbNu2DTExMTb5
nPu3O2cNwidX27udZ99c7ezNc94Q3LPG9m837yfz/C4+/Hg+uk0i9MSeLQi5
/xLVJbnwdNkIJ2c3pBTWoCw5Evbrtsi4rpw5DId163Dm2kPp59SRffD18sRa
0SZTCrXfW74p3Dg6u2LN0sXYvP+isO/r4O/tjnWOGxH+LBXob8cOrw1wCziI
wrx0rLVz0NrxSB82LvsShy5Ho7utXvjxgMP6DYhOyERNTiL+9q/+HFsOaPtL
69udmpMeffkY/vIvv4tbka/RXFeOze6ucNy4CdEv0+X7G1fO4/ixQ9jkFWjy
adUfPtiJoKAT2B+4AzsPXdbCvHYEC1a5y+tX4cGYs9xJm3/IPuOBdsz/9CM8
z9P6Khd+8VtEJxeZwzuw2QmbTfvpnQpwgdvO0+ZYm8sz8NFHn6KTVNpZio9+
8wkquM+7jTEP6/3hWDdevHgh9wDu7e015POnJYmYG7UJIQV3EVX+HFGlz3Eu
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
kaRdmZOdhatXLqO+tQmqd+TQP7eGia5yXPruFnsv9sg7QbdkaaKBrNoBDFSk
4dINHfZc65H3s4HH9fPJNIF+WJxVv108zznNyXKM8weFGq9CPj/ltiW026Xn
Yxk+VX41pgsnRe914hPa55+Cz6l97unpiZ6eHtH9oHa/JJ/H81aIDb4Htz5O
w12o4+4qLP37eET121eO6rdXpkfhrvqhhnhjVTEaOgYQ4GWHJEGOCzNdA7wr
eQczwmlxiclQlruB0sZhpJI2eEIWl2vLVPce6traYGfN6ag2F6bCySsEz93s
mN9DXs5bBIdGYWJmCkbGOhgi9rmVvj4q2kfZue+Qdz02wBlJBY3ku7MHR1Nd
BIZFw83OCE5+iajPj4dfJM19tA8NXTXQlkdJahj8wzJPfG7fhvtC29SDzc92
vcMleX2RX31NTiKcvTn98cxoP+hac/X4ne8gr34fPZ11uKmgKbziuHXjDrqG
+aiuq+cWHczjyvnLGJvfZv5wW/PDMDa25fj8gLu2wY734S6wzfd31lFeVCI6
Ni2lG+icXGZ57FJTU1BYUgYDYsskFDaw/0vTLRXnc2qbUx134TJZf7sMkjiJ
z8cWpvG7ZEtolQUTHk+DWVU4vsp2hGtjKq7lecCoUGCfHxzlc4d7hsgrIs+p
nh64lv8GdHX0kZn7FobGJkhKTsJdJQVUVpdBS0OH2+nWFNTlVbAgFl7rZGeF
zrE1jDbm4p6ZG1vmZm2Khv7JI/uV4YfBWflcyOnvy3H+UflSj/G5tPznJ/H5
6On123+g/vbTxKtJ+sPR91Hc94lCWn97IuFzVx7gOwSm1e4tVnwGyfIRTr99
cuVQk5C+N3tby9BVuQHd+w8Q5O+NP/zpKzT1jeOJ0z2EZVawbWsqqhL7OhM3
Ll/Bq5ho/P63v0NhwwjiXnriZQI31qYur4ra1lYY6hkyXdXa7GiY2Pujp6EU
dxQ18DLkJfSMLTC/vARV9bvgTfFxT00NTUOLoucs1N0S4cw+3YPS1fPwfREO
PZXruO8ag5rsSDg/jWH/uy53FctkH5mRvgiILkRbdQ7CU3JRmZ+K1Px3yEkI
QzrhxfXFUchduQjXJz5QuXkRviGvRX57VZkxsHf1Y/PrMyMsr7Orty9pq1xD
cFweO28zVXmYPnSDhYE67js/w+72GpSuXYSDpy/L2SivZYH1bc6K2VkYgqaW
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
5bXBX1xn+VgSi7jcI/e0dTEwsYgAwtW6BoZQVVNH68A4kiICkExt+OVBaGjc
Y3XDvJ3wrrEdvp52eEfuYfVbrh2gqHAbz0j7qKU2j8yr4KGtJW7cVsTEzAQM
jfWxTgjTxVwdNxXUoKelhtsqWhieJ9eV1wxlBQU8dHyIr4l92za6hqo3Ybh4
UxcjgwOwsHuAnq5WPHB6jLaGClhaObHr4edoBgVVdajcugqN+05s3N3FygiG
+vpQ09RFB28E1kaaKGnsRZCzBYLico9cYyGnrkx0w9zG5Yh9vjY9CBtLG47P
99dx/74hOsdXWB51lTs3oaWpTp5/fSyu7aMsOxqP/Lh8VTuE12mbw/eRJQoa
B9hxetqbQkWNnO+tW8gpbWXLpMfCiR+bmBaNoK7MH04GScj4XAZpOAufU25u
bm1jXK2rbwANLW0Rd2tq60BRWQU6evpsubml1bGx957eXjS3d4l84+j+2jo7
iV3YRWzjHmIXD5DfXSxPOq1P4807u7vQTbh9iPA0HbunOc67e3pYrBtvoAc2
xlowsHZnvE3zobN4tXHq5061aQaZJhzVh5uYmsQAj4fRiUkM09i20XEskm8k
r78HNXUNmJ6j/uqUgxfQ3NRAjqef+b0L+9p/Gj7n6tWOziKkeQxRbROIbJ1A
VMs4m0a2ctPwlgnEt41hbVPcL/5wOj0xit6+Q5/pdWLvCf3C1tZWRfrlQ4M8
LK9zHegbG+ukzh7juVVSn2KTLNvZ3WPTLcH6S6TNNcGfFW17fnoSU9PzhN92
2DeH2pb0ODbIfmh7i/pUiGN9ZQFj41NkuzvY3uWOhE/u2ebWDpZXlhlHLi+v
YHeH5gw95LSJsVFyvptkP5uiZUPk+Vnd4rYxuyDon97fJfdnWRR/dySOjtj+
a+sbR46HLltfWxfFFtB7tiMYv9jf3kA3eU53BXXpdaDPiDi2NtePaAQM9vVi
ZmEVZ4X4ccr4XAZJyPhcBmk4LZ8LC+VYV3cPaOnowsjYBIb3jKFH7Drav07n
aaHcTsfVqT0v7t9OOZraz/0CHzkal84TxJDTQnOt0phycX24QUF+c6r5Svvu
We7zkWFMTs+iOCcF98ws0dTFw/jEOPs/pyczzniDatJSLmd6r4QjqMbrJJ9q
yMyAPzPNtNxnBdrn1CeMP83pwy2trGJpeYnlnj5ZT+aH53MRqPYq4a33Feye
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
h6/j8LaTiuc5L3nxPOelSKfl+deVI3g+cJR/+xDPcwX6Jf7tsgz9dTzOfu1z
HXW+X3oNxx73xfv97a6D5zkvefE856VI/2l4figfy//8PBfvtby1g77lbfQt
bWN1a+fIYxVpb3dX4fqvLenPfFyus6N8ZY/SQYwsFddL9QHI9h0orlccO0tt
keojOHw9x9XJ7S9+b1e0bV/Kx35PwVMR6eP3D/Xh8zznJS+e57wU6Wt5Ls67
cmT+FZ7nX+33WjK2hueDe4gc2kPW8Dr6lzYxQPg+SMvKNvrJcnxl61DMeNBX
vIP1jQMvlTX6zH1jk8tRIsXAXZn8oAc5R/ak8o9QbW/SY7k+cPm8JHuivKCM
c6QO+tmP6+reF+UlPfQc+uhDpPKrcK+lj11dORiDJr6mrY21U3nIirUmVZd8
nTubB760iq5V2odWsm117VTnF5+L5zkvefE856VIX8Nz8fg4OrZcnIPlZM/X
j2E6z/ND89VeDa3BuXMbvj3beNi5BcfWDTi1rcOJLB+0bcCRFOfWFcytc8xm
pBXBrux1IlTvqEFDSx1OnsGMQYE+dsj5eDAm/bTjtSJDH6Giqf/Qdvmj9lYn
oW9yH8s7QHSgC9Q0dWFsdB8Orv5YWt9ReJ7xoT7mm3+S66Bzx9o6urh9t1fg
72EPNfJZzSzdMLvC3YvMhOdQ09CAhqYWcisbuOuSez4/1N0AtVvKyKts57Zv
rSHQ1Q5qt9VgauuCeVKXOA87VdGbeKip3YG6mi6qG/u4KxG1acYFjTDS18Zd
tbtw8wlmc/8XJwdgaWrIcgrYugVgeYPLkyf96cTXMkJ+y9QjTlo8z3nJi+c5
L0X6pTwX50z9VF+P8vfvUfHhA/OPOQnTqb8Mzc1CS2//wFfzfFC0flT+c8py
ljdVvJ3OXVOY/5zLl/rPxvP4gTWYtm7DoWMbdu3c0qmDW9Li2LkDa8L2SbF/
u4g7410fceavP6CubRhLC9PQu30DWaX1hMducPD0QUR4OHmP4/JofzueBAYg
u/A9e93f3Yas9DRERMSgvaMTCdHhyMgtZ++VFGajd3yOnGgDyTEvEPYyHjOL
NB7dQ1l+FgICgtAqGCWB8SxUte5ijcTydnrU26cBM1OjcDHVgLFTIKuruaYM
gY8DUFbbiv3NNRiqXISOuTvml7dEPvSy92d/a52dIyE1AwV5GfjD7/+E6tYO
FKU+xy1NU6ysrMDdTB3uYa+wONGFa9dUMDw5jbryXDyPTeXqEI+/I2VrZQoP
HK1xh7QDwpO4+el5CUG4ftcUS6QuL1t9OD6KFH1vwNxIO/M+EkzMoKEwERdv
aGCNTrMTzRl/mxSK6Mxitn793PdoHltDTsRDGD0IZtt0VC9J2lK7Mv323Ho1
9WsyMUFMTAzGyO+Viuc5L3nxPOelSF/DczoGjXrHUC/3O+rqzOeV5l87jul0
LvrwxCRmaI5xUmhu8h7x2PYBbk67PM9ZDnRpng8d8JwuqYfMOGE0jdMpzynX
ZXhOygTh9jL5u7i6vs5ypAkJu2msLuY5l/ecy5cqPIbns/8AP5kkwnO7jh24
dXMe7mzZxa1T73bqHfdAgX97ZlQAnIJiJXVvb21ieWUNAR4WuHTHCHHRYbhw
VQMDA/3QuHkdMfEJuKt0GdkVLUh56Ynzt3QQE+qP3/7mj4iLi8XP586jUTAG
N8f7KG3qQuhDSxg7eCLE5wEsHwZjrLcZZha2SIyLxA0VLQjnp6BtoM384VzN
DPCpk+PTlrCPxOpGmBROwtLMDMlJibh29QY6h6bha60Ha48QLK1ts75/ybhz
0XPsveVxnP39v8I/MgMNn0px4cIVtHYL4OduhYwSzo+//3MxzO380FCZj5/O
nofjA3uoa+niY6sA8treXGd9FkXpkQiN5fzbfW3vI+UdV9dQ23vomNqARtP0
/DVFKbBweyQ6egOGGlroHF2Wid9HSNvI3dkWqhoW2CKXPtpWiUuXr8LVxRFX
VDQwsbQlM3+AfddS/u3Uu93e3h62trYYJb9l+jyC/i548RKL5zkvRfolPBf7
wIU8e4bCkhL4BwSw3Oe00G2yHjLSx/VjlHCttCAbTg8c8cDdCyU1jawfvIfE
6nSeOY23aS42AeE5y8k2NMw4TY9nTB8YZBwfGuV85qaF04RLL/CmuJrE2FOE
76OsvmHqK0N5PsZ5wnV3tSAq8iXCnocjMjYBnX3DhLnzrN+desssLq+js7ES
5pZOGJleYDnPZyjPxV5xsxzHF5cWf3W/1+T+FTh17cKTcJt6tdPiTtdFxVOw
Bxfq97rC+b2Kef4q8jFcgxKk6uLq83EzxytR37K1oTFS4uJw6dxFhIaFs77i
mOxypMU+xatyuo8Q6nfusX1jAlxQ9LEBQY9dkFNcBHMDQ4ifMK+TttLkiABP
gwPxJDiA8FyN+bfrG+pxPDc1wMd2zo9le24AdzTuY25pHrHhTxD6NATXf76M
luEV5MeHIOd9w5H3Z0vYD0sLa+7FJmkPWLuzVS9nI2RWcMcN1JNrc/BDXclb
nDlzHQukDfO5OA03NM3I9zDM8tDo6t9HbmmTpN70yCA8iy9k6762hkgtrGfr
w+1V0DW1kuxXXZgMC4/H4k8NI01NtI9y/jViJk9PDCIh5iX0dLTR1D+OkrQX
0Dezx+vXmbinqYHCD60y+0uv0/jc2NiY5ZWtra1lfnHUl5CPz3lJi+c5L0X6
JfPPaVxO851TftP8ajQXOs19Tp9T3iV/3z7U1LB9pGN01gaYnEZORhR+98e/
wDMwlMQwNvjNv/0Br4pq2HPrwcEBNLW1Y4zwdWBoECMkjh8c7EdrRxeJr6dJ
rD5I3ptm8WRnbx/GJqYIN2dhR1gREPWGxN2rJC4fRUdXN6YJc2nMTmP1ucVl
lOQl4PsLl/DkWThsze/jp5+vobq5h7CYxN2kjI9PQNDdjtdZuRifmmOsp/3u
84uL7P8N9StbXJgjbYsx5pG2sPgr+r0OLDOGP+7bhb+o+ImWj+iyfx9endL+
7Rwbhtuq8f2Z82ghTNlYW4a9+T3kvm9GiL8tonM/kP12cF9DB+9ycqCkpIIu
wSAykmJQ3zmAuOf+SMypxe5cN25e02R/P56526KkthFeJC4vqPkEK707yK7q
xGhPAxLTs/DiiRs0zFzR2lCJs5cuYmhiBOraaoznDgZ38a6mA4tzM3C20IaV
bxTa32fih3O30NbeigtnzqCxfxFJwW54lvSOhOM7rB9mY2OdtcnWV5cwOj6J
zdkBGBsaYnlvFztz/bh7Vxfr27vIiw2Asp49y7HnY2sAt2eZmB1qwqUrqlhY
20RLaSquqhpiY3sHwqkJ5vm7SraLx/ynvXiMJ1F5bD07JhC39SywTs4d6Hgf
Tn5R2N5YxtDYJKmzBWd/vIgB4TLa3r/GxRvaWNnZxyD5fdOaYoO9kJJfy+qx
1ldCbE4l/Oz1EZTAtRV8LHXxMCiJ+56k/NvFv4muri68evWKPTcQi+9v5yUv
nue8FOmX8pzmQKf97DdVVFhuFpo7la7fvnuXvSedW43xnOZXmxyC6o0L8It6
jfWtbTYe6HVqHNLfVaHpUyWUbyrhBim65rbom5hBcW46bty4ASWyzcLFG2Oz
iyjLTcPVq5ehpW9A9r2D16Uf4etqg9DkQoz0NkJfVxNq6ndh5eaHQVLHCOP5
CorexsHM1ZuNT6KeoUGESUaOAWj6XAmNOyrQNbZCfkkpnkbEoaI4F04PvbFO
uFhb9gau3iEQdLbCzOg+DAwM4BtMc2+uMw/YX4XnggU87N6Bv2AHfrT07sBX
VOi6f98ePNpWCM/F/u30WI7peemRuKVyGzqkvWVk64m1rV1EP/dDbjUXI7ra
O2B0bhPpUcHQ0NKG/n0TCMaFyEmLQd57Ep+vjMDG1pXtmxoRjE9t3YgirP/Y
Q9prDVUkdleDGvnOM4trMCyoxz0dHdjbWsPQxBJTs1NwdnuAdXIpTz2toKym
SWJWTVg4emBxax9LUyTWNr4PW3t73NE0QNf4GtrKM3HzthEG+/vg4OqGnq5W
uHr5MP92Z7cA7GwswNfbC6v04+2uwd5UE8Hxr0nQvw53GzPcVlODobkjppe4
Zw+JYf5QVVPHbdU7KK/tgLzEY/YLX8cjJZfLObe3tQJvJ0uoqd3GPWNbLKzv
ks9aDBt3rp89LyGc/PbVcId8ng/NfeSAZVgYG2FybQ99rdXQunsb2tqaMLZ0
wPLmHoa763FXXQ26JF7XMbLDyOyqQt84eYljdp7nvOTF85yXInE8F48z/3I/
O/VgzS8sZCyn8biOvj7qm5rQTuIKbT09XL95E5evXUPG69esv5vrd6f958MY
6G7GrZuXUFTfia62eri6ucLDLxCVJNYz1VGGpXsopiaHoXr9ZxIrJUFf7Tp8
wjMwOtiBC2d/JNwvhf5dJXiFJ2NsqAs/ffdXvMgogp+rLcu14etkAk1TZ3R2
NOKn//gLwlMLCB9nMTO/xHhuYPsAU3MLhDPz+FSaDUNjB+S9ScZ1FR0MCxfR
1ViBuzrmGBrug6rSTfRNLyHY3QqhsZnwczKDve9z9HY14OK5M3hT2cKevQpF
udD/LvPVRPu1T8wio3UEbzrGkNU+KioH65mkvOsaxcYWZ4wucXwT+6btbmF5
9fD8KXltbW6c/Icj5Su3Kz0ZjMTN4tfyn3NnZxvbO4dnjm1t78rsv7dL56+d
/FK2tg7m4i0vH3BPfPqNtVVIz7w/CUu5upYPbTuYA7eKg48i9qc72G9h8TB/
FxVsUyR5Hzme57zkxfOclyKdhud0jFpnTw+sbG1ZHE7j8aTUVDaubXxqCgXF
xez5eejz5ywH24HPez96B4YwOtSNa1fOIbOiifC4G7HxcVC5cQUmNh4wJnFb
/odmNu4oKtgDZjY20NXQRl3XMPntbsPH0Qy+T55AU18X71uHQP+GPnxggbDk
PPh7OCIqLRfW5rq4rW0CLxK/WVtZIz23lM1BE4p4bvzAHcsbhCkk8M1LDYee
2UMUkXjfziOEjYnqbv4AbQNLrJAgPtDDAWFRCaROc7QJhmGjqwJzBxcEBT6G
s+tDlNY0Y2NjDbMSni8e4rm4fBN/uP3d48sRM6wVPaM9dr9T+LDL172/r9j/
9NBxIj8ZWd/Yw16uJ9G+1LiAgzqO8pM5YSNhX3FdiupR5N++L7cus02BP82X
xPOcl7x4nvNSpNPmP6+sqmJxufLt27BzdERRaSk8vX3g4++Px0FBCH76FIGE
u8/Cwxn7xXnY6Ny0SeEM/FxMcebqHdS19aC9+RMuXTiL+OxSuFhoQdfKE12d
zbh8/gwiUrJgrKUER/8Iljf9zHd/w9uKWtgZqkPX8iGKC7Pwp9//DrFvy+Fu
b4aI9CIEeVhD19oTg4MCBPk/xvu6NkxNT2J2YRlF2bFQ1jVEc0cPivMycfbM
35CYX4OSN7EwsPYCTT3WSeLz2xr3Mb26h7ZPxfiPP/4eli6B2CV/g10sdPEw
MBoT40N4HvYMbf2jWF1Zlox1Zzw/gulfnY9lHyy+FFN7/4hynH5t39V/lHi/
V17/K4jnOS9FOhHP+7nS29fPnos/CgzElWvXkfvuHRycHuDK9euM7zRep2Pk
Ll6+jBeRkVL97QPcmHUSow8N9uKBrQmu3VTG5atX4ez/DCPTs2iu+wB9EqPf
uKUMWzdvDE0J8bE8HxrqariprALPoOcYF86hvqYCNpYW8PR/hLtqqiw+j38Z
iqSc9yTm74TpfT3c1dCEma0bOvpHMD4+RmL0OXz+WAINDXXcMzSEhpYOIpOz
sLa1jbJ3rxD0IpGtCzrr4ekbhLHZFawsTMHJ2gxvSmoZX/tJO8PWwoQd7+73
BBOztC99gcul+nfmubz29hWXI/eXy4PyS/OCiKUoZj3u3NwxB/lN/l5Ni6Py
sSjaruhYeY/74445LsfLcXlh+HwsvL6FeJ7zUqRDPBexWyHP+zme0/HrQU9C
EJ+YhBs3b7FxVJShdIw7fa5O++Mp+9l8cpn66HP0ITZWvae3Bz3kferpQvel
uc/pPLP+wWFMzMyQYwcwNE493SYwyOagTbE85aF+jjC0ckRKciwunj+HzNJP
hKlzGB4ZYePhhbNCdo1zhJ3UM4bOQx+j9UxNs75xOmZ9gfB1hcTWE1OTbE4a
Hd/O+cjMsflonEfcHPPsXCKv6Vz0xeVVrG+ssXh8a3ubbZ+TGd/+7Xku3m1o
eRMV01uomNrCyNLpcq8d9hc/1eF/Nx2VP+Z0/u2Hc7F9qX6F16Igx+lxdclw
+gvH7ivadoLYnn9+zus48TznpUgn4vkRMfuH6hqUllegvPK9pJSUlaOhqZnN
NaKcltQnxXQas1OvmL7BAUn8Tn3ixL4ytN3A9dPT5+5czlQBY/4oujpb8Oxp
MFzdPfGmoJxxnj6nZz5xzCuO85Rh3jJjYj8Z6vcqXk6weWx0yfzhqPcrWTJ/
uBkhW84IOT8Zuk6X1EOGessI2Rx0bi76/Lz8fLW/A89F/+aNrCJkYB8RQ/uI
7t9Ayfg6Sic2UDa5yUrxxCaqJtexI5dvRXyWrrZGVNd+xrbodXdnM4YnhRJf
diqaO0T8Wswgae926X0FXe2Ynl8RebzvScWqUsdQLu9uor6xAVsEeYtz0+jq
6kR3jwDbewfXJ+47OPGzbXDP32VylYrWd9aXUVlRiZkFbuzf9uYaesg56Ryw
7p5e0sY7molL80IsrRyMGdzbWMIHVpdohv0+9/nE97Tx00e0dQ+J3pJ99i8c
H8T7D9VY3Tz4PuYmR8i2Kiysicfufbm9wY9v53WUeJ7zUqQjed7/BcaT15xn
+phMGSJFIcsV1XuoKPZ9PfB8HWTnFDKWLpKYeoqd62gPd7FHnJjjk6wPYELs
4c78XjnPVzHPWWwunJV4xIn94Wal/F4Zy38Fnovnq6UOrsGqdRMuHZtwaN+C
Zcsme82WpFi2km3Na5gWsYKbr0YP3sYjO1Mo3dGFhYUhLl1TxeTcMnxcjZFe
fuDZcto+4PjIEFS1Dnxxv72VcSipqTD/dg8LTSir68HawhhXr6mgqWdM4TFV
RTlo6BwQff4vXNfmPBKT09nq8lQf7qpeh4W5Ba5dUkLbwAzWhINwsDSHhaUT
VK9dgKkdN9+M+q1Jcqrt7yAnLRL//b/+BglvuXnji5P90FC6DjMzUteNW2jq
HWc3lZvXvws/F3No3zPEXaUbeJ7AzVnf2eZaS5+KUnD1uhJsrK2gelcb85t7
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
4XGUFL5B1+gs1heF8HN3haOrB3pGZ7C5KkSgtzsePQpCbGwSFpbmkZKWzHKG
5mfEMK8CFxcXZOZz17Gzucryq3n5+iP0RRRGZjcw09cEZxc/jJDvNCI6BiND
fYiKS8BATxteRqVgd3sNWZmvsMHQvIukyCeIycxn9RW+SmCx7cuELIlbXvGb
NLxv6MbB3LZ9qfn4B/Pdmmor8KGhW/I9FL9JgZmpCcJjM9jrka46PItJZuvD
7Z9hZ2MJZ3d/cs836cA/PA0KhHB9j9yDeTx97AkLS0tEJ2ex/TdWZhH02AvW
1takjgzmXSTtjadI0mMHeJ7zkhfPc16KdDzP+2XW6RyzboEAZZWVKK2oYEtF
hb5HfeTE3nDS9VCfuK5eAbpJoTlSe49gunyMzsbBsddSedCHhxnbj+X52PE8
n5ThuYL+9m/E88lfwHPxflMLS2ggMWjT0CSaBidERbQ+NIEGsuwcnZKJ9446
zz+LT9y3vo7D9X2NX84xG0593afbX7qNIRbPc17y4nnOS5GO5nn/oUI5+yz8
OZ6EhjL/t+cREQh/+fJQobnWqPdrfFIS84ilc8zp8bQPfnh8kuUynZmdxxT1
jaF194lj+IPziJlOt7N2ASm0D4Aym76mHKfeM5TVQyMHY+IGRf3uI6MHPBcv
x4/h+dQ/Ic+/hfZF88a5wnGCxaeiaxDPN9+T2k92n32ZbbI+b/uSYw5e78jU
IzmWLNlYOKnrENd9UAfnPbcjqm9XstyTLMXXIZZ4vrv4HNLnlnyO48zzpO6T
9H7ydUmfX/qe7svdR+zLfqaDY6U+5xevRlY8z3nJi+c5L0XieH6Y3fKFMrSt
sxMW1taM1UEhIcynXVGhHu6ePj5wdnNjMTTlOS2DI8MsP+oDFxc8IO+FvIhF
9wBh8NAgidf7SNw9zJjcK+I/ZTllOGX7+OQ4woP9kJ5XxjzjaL00F2pjYxO5
NhqTj7CYfXxyGmPjYxgiMTvra6ccF/Wr0zzadM7aiXiuYM7a3DFz1v6ePGec
g8h/RTS3/DR+r7z+5xbPc17y4nnOS5FOw/PWjg64PHyIuMRExCYkHFloXE5j
dC9fX9Y3TlneJRAQZk7ATOMW7uiZ48WLMFy/cgHX7pqge3CMeb60tDSjpq6B
+b4P0D704UFUVVWjvbcfyysLsL1/F8HRmVhZXUFbRyd6u1qhqXwbmYXVjNGT
U5P4XF+Prr5B9gx8cHiI+ccJBD2kLULnJ82ztsBxPJ8WHj0Hfe6Lc9a+7fxz
ae0p6Ic9iaRjQ0kc+5X+7XQ8+GlzsEnH/7/kc5z0XPL1H5z3+HNKx9pH1SWW
bL+EgutQ8DkVbTtK8veW5zkvefE856VIv4TnqRkZSElPP7KkvXrFuH6I59Pj
sNLXQXxWJTa2NzE5KsDFM39FXO57FGbF4rrSLSirKMPBP4ywXAALEwNo6enj
0rWbeN/QDncb6glSjrSIQGgY2iExPgr/47e/Je0DUzS1tcHZ2hA3b6vh6tUb
SMuvQl9XPdTuqMDAxBjXrlyF39NY5utO56/93Xi+8O14Lt6tSbiO1JFtZIxu
o35mjfMu4TqnD4qiXtwvPD9X5Csun5NE1stUcX37sgediPUyfq2nbFuIz7kv
t+3Y6+K2HlHf4fqPfn3Kaz3FVmlJ3x+e57zkxfOclyKdiufthOduD5GSlo7k
1LQjS2p6BmLi4uHl48vGpNNxb2KeW+pp4VncWxI7D7BY2dneEB4h4bhz42c8
DI5GUU4Kfvu7vyLlVQp+96c/En6X4nVmBhraOuHrbAkV1TtQUTdAVUsPhBMD
0LylgsrGfhS9jsRP1+5gbGENbxNCcfWOIVqaa3Hmu7Oo7hhCV10pfrpwBZ97
RjE7M8X63b+a5wsn84j7Wv/2t8NreNy3h7DBPTzp3cJLwRoi+9ZZiSIlom8D
8X0rWNvakRwnPsfGkhBRL0LxOCgEzT3DbFtedjLqugbZuqJ8Jod4JsNeoCA7
A239k4c81A9xfXMR0fGxWN8FWj5VIDo6GvEJiWhs75ecR+qsv2gEm/RRnU01
8PH2QfH7g/nrfW11eOTvi/S3pVyu2SPYXJKfi97Bacnr3sZq+Hl5o+j954Nr
FR1Lc+89Cw7Ay9gM0i6FpA3Dvb+Douw0+Po9Ql1rj6i2PZTmZ8HP/xHef+6Q
3B9F2tjYYH5w0ufkec5LXjzPeSnStCi/GSvyHJfyb6Vj06R5Li6U3TLLtAzF
PO8lPJ/i4vOYjFIsrixhfm4Sd5WvIOBFBK5dvwwjSwe4PXSDncMDEo+34s2r
BGho3MWtuzoo/9yKwIcW+D//r/+Cu6bOmFlcwcRwN7RV1NAomEJShA9MXINZ
jvCh7joo37mH8vIi6BraQLi6i62VaWhraqKgph2L87NsLvrkV3i+zp2C50tf
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
ZKfEwisoFj30XbnCbYwubaPp9QuoahpilsSRiud/xNPcChTlpsIjMBptze9w
5qvvkF/dhg3CnNnZ0/L858fnYtFYe2fr5LK3I7c+qTHjcvqLCz+QihU/dYy1
rMfpp/uj7x9hlsQp/qKS7nP26f7tBzLLUnXKee8t3lZ2+UDeutNdJM9zXrLi
ec5Lnn4Kz6MfPRbznHrI0FJbVw+7uw4sRnd1vwdLaxu2jo4tY2POSRkcGWZj
l3X09aFvaAB7Vy80tnexfueN9W9gZW4MNU1dxKTlYnJ2Fm9fF8GYbKelZ4Rn
L0vZ80BUsA9Z1oejswviM17g3dtyhEUnYp7EibFRkcgursXUaB+CSUw+MD6H
t+V5MDEyhAmJw1+9rsdIfzuiIh9ifG4FPa11eBgTj4XVNTxPeQwHEu+3d7TB
19MFFlbWSCDnsbC8gjnaH+4kj7jFvy7P2ethYfkpuDvCzmPYLS93iPQ2slN5
vucHUuskp/IYLm+9vH3lTeVemxyd1nNOej/p5ePqlHsP5JzDT/n+eJ7zkhXP
c17ydFqep2VkIiIq+gjPaYxO36XT9a3tHWjv7DpSB+X60Og4JskxJ5kf2wz6
B/pZ3/l+EsdPTs+SMoOx8TH2zn1wZAxTM7OsjE9wY9Ympjkft1nyW54Yn2De
NrTvEO0PT7ebmBzHENlvdmEeIyTun5ydI0xdwTL5ezg/P8f8RxYJVycmJtk4
ePp3krJ2ZW2d/N1cJ4xewsbmFgQbG6QI2P+ZIznQT+C5PI+4nx2fy2j/QH45
Tscx96fqVH6sIs+YY3j+i+tYT7yPM1/+fsdvf5Iv3XHPLT9FPM95yYrnOS95
Og3PqVdLfmERicPvwtc/APe9fVjx8vFlLPf08mZj3qgPjLxcLaJ66DgzVrq7
pcan088o82nhvOTpM8BhnhfqJcPVf+hvw/ziyJSOSx8Y5KbU85VOqafMsNAD
doR6zIyPMy8ZOjaOecRNcn5x1FOG8pbmXaOeMlPCKS1zvyHPRVvNCHbQOE/L
NuYE26f6fqX9zU/2Xv21JJm7TVanabcXjfmW3Ff2c6n29hOOKX1+H2tvP/6Y
Unlb5bQn0HM66fLkvdvnec5LVjzPecnTUZ73Cos8rnPs7ejqQltHp0TpYEXk
636qIuUhJ+H5LvZz554PqI+c2PdV6ONOPeKkPV+HPyEny6E3nGROlumP5Fj7
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
p7QEh4XB288Pzq6uQp53k/0H0dZUC0dHJ9S19WJ0pB/urg5IyS3D7PwckmIi
ERyVgFHC2JGxCdY+2kOOS/Os0/HlY1Nz6O9ogImREd539DP2jxJG0/rHCY8p
hweHh5hfHI3FqVfcLImzRXE63WaR8HVmZprF6GOE43Pzi+Tv5Cq7B1y/uBms
rK1hdXVFHKP/ljz/JbQv7Ed2cHDYtnwg4VciYodoOzau+0Daz0y0jWg/rj7h
GHVRP7V9bvs9iXrk1S/5GYTnJLmO1rkvHIu+L3W8A6m6Dq9v7wTvu8P6P+ZT
I+vftr8n7IsnPi/p44v6x+3L3qODw/FwexL70nflonWnfSTgec5LVjzPecmT
FM9PYDpta29pb2e+7LStPSiE8Ds4BKEPwhEWHsG4TktoeDhrh/f194fbvXvi
+LyrlzC4vx0Xf/waCS+rMdrTgP/7//zfoGHtR/5eLUNd4TzuR6VidnoMaWnP
UFD2hsXvHR1teN/wHq8KilH9ugi3b1xHQ88YBns6UF5Zw9hcUvgKOXmFGCLb
9/X1MK/ZytelKCqrYv6wlNPdXW14np2DxtZOxmnK5dameuTlF2FkYppxmPrB
VlWUoqL6HRYJ5+d+Jzyn7e57B9JTkZ+72Nf9P1O4y+tU4nnOS1Y8z3nJ02l4
TnOeu3t4oqikFAVFxceWotJSZOfmwsvHh73zpjynnnJTJDZ2s9KDW0gCinOS
8e1XX+OWphla25px5fIVlL2tg57KVSiqaeLs99/BKyIF9a9f4LPP/g031QyQ
/Twdutq6qG9owM3zZ/Ag+QUeh3ritqYBDHTUYHMvBB9qivHNn/4EQ1NLXLl4
Bk6BsejvasSd24pwdHHB9euKeN3Ug5LniTh/8RrMzYxw7bYq+sam8MDbAQZm
VjA20iHHTsTquoDF6b81zzkd4NAxTn6RK2FMuLe3JxVv/5x249Psv7d/2Caw
9wlx8s+VbP0HEm0Ap9tvX7ifnHMV31P5dR62cxwcWfdRjxw54nnOS1Y8z3nJ
E+P5Ce3ssjynudNevMxD9ovcY8uLvDw8y8jAfW9vMc87u7tYHJz+JAy6Znfh
ctcaAeExMDM2REhoCLSMrJCWGoMz15QxtbKF6oI0nLmqiuyMJNwkvB2eX8dg
Rz1uXz2PL7/6Hh4RSYR76zDRUYSing2KS4pRVdeMmuIsXLyqSLbfRPf7Mly8
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
JbZtiLMFimoa4Ubi++LGDkTes4aBjQeCvBzg6BNOngsCoahphhfpT/D5V18T
no/ilooC47m1xjXYeQQj/lE4vvv2K2S+bkVvzQt888NV5OW9wL/9zz+gkTy3
ZEd5QsP0PhbnpxHxKAajIwOITUjEQHcrHsc9w/byOHS1tLBKr3F9EtcvnUNh
bbM4Pk9/6A+/6Bw2P9JajbM/nsGzzGx42hvA5K7vkfstYmpKpA8Chf7tvQ3l
OHvmDJKfJkHx/A/ILm3CZF8jwsnx9zeWoX71Inyj4uBmrQ9T5xDyDW0hJMAf
ywTrCUFOUNIyx8vc57h24Ue8aR5A2kNvKOpY4sWL57h55RJSXtUIj33Y3i76
TdD8u+Pj41Lr+f5wvGTF85yXPJ2W5yd+/kn5Uz+d570/hefM73Xkb4rnL/vm
4NG0gIC2Jfi1ktKyyKa+omnrMvw/zGBh7ah/+8byNGKjwxEYFIp3LX1sXWP9
G/SNzbD512VlWCfB7uxIN4ICA5DxohC75MA0b0rf6Byws4KScq5/WUdjHSZm
59HUWINR2kd9bwdpCbGIjknAIn13v7+J9MRYJCWnoaK8CmuCVbyurGA509+/
KUZUVBSiHz5CY0c/d7EHeyjNy0JMXCLyi8sws7KN9dlhxMQkYYp8L7Rf5cz0
BPKLSjA5Ooi8/DLs722hpvoNtoW38HVRDl6WvhHfv8GeNrT2joqXe1vfISjA
DzEJqRBsc75zNP+oaGy56D7R54X2/jHxfp2Nb+Hr7Y2Cijq2PD3ShZyCUja/
NjuG8JBAPI5P485jX4DnmRlY2mQLeJmZBF8/f5QJ+9Rjfxs5mU8R4B+AfGF9
HxuzJjkenuc5L1nxPOclT78Iz0+I0X8Lnh/mY/k1eL74V/eTob42Q5MzGJ6a
I2VWWA7nB0mZnFtg75ilJOc48o/9649JP278+S+pnzrW/sh4calzPV2dcs/h
FL6zVDzPecmK5zkvefok//ZjPqdt7/TdNyvCfOidzNv1Y0z/tXj+18qvJsly
Yfmd+reL/NHoO3VJ/3HxOHE63hnc+G8ubpXd5uDIOunPRN5zkFpmY8Ho8r5o
7Poeq1/yPKgOtz/0jd8VjsEW+6BLTEXnIRI9/z2J5QMJT3XRtqJ4/CS8H7uf
jC/74T0V1ilxHZLzdN/D8zwQr9uTfeb6BPE85yUrnue85OmT/F7lfNbZ1cN4
SvOf0Dxm9L31MGEnzZ9Cuc7z/K/Dc25c9oHcwutvUzzPecmK5zkvefpU/3bJ
POh0OkiY+frNG5Yr9b63D7x8fRETF4fa+nrGdtF2P4vn/afh+dBP5jmd/p55
Tlm9trOHte29UydeORD6hkv6jX9K7u2TdBoP9kO/uL0j53Hc9qc5NenzOJDr
kS7Oa3Z8JUf91iXaDY5sLnFPj9yHgwM51ylct3/ytYvOlW9v5/Ux8TznJU+f
mi9VkvnUW4bmUlNWU8OtO3fE5bayMtQ0NRGflIQBwlZ5/du7hOPRJPvKf5zn
Ax/l+TBtIxCy/LQ8p/ye/h3yXLRZzbQA8cO7SBrZxetJAQTbuxDs7GNjlyt0
flsOJ+QdR9bvXLwo1Y5+yJWjbewy9e3vS7V/S+ZTPUmSxzltjhZuHwlf2hP3
/Vi98u7RCdv8Su0gkveU5zkvWfE85yVPlOeHrD2Z4zTmppymuc5v3roFbT09
6BoYwMTcHMZmZmxZS1eXfUb94ShTZb1k6P6Us0OkTEzNkLh6kNTbyzjO8qr2
cOPOKePpOspzju2U49KxOpvS/OikTjpuvZeso8ekedDpOsp4Ec9HhHynY845
nk+K2T5Etp2YnmY8Z23vpPwueC78N2dEAO/ePYQO7MGvZxsBXRsIFJag7g34
k2lY1xpWt3bE+4mOMdnfDhdHe1jZ2uFFCTdOKulJKCqaesXHPE2+EPpZWsJD
1HWMyvRpOxpX7m/Mw8vfh/WfL8tNgZv7PXj7eON5/mvuczl+rlubApYT9vD6
T9bq2qFH7cHuOh6GhaCuZZAti2LytdlBePsFYHThsP+/5HXub68iOjQY79tG
xHW9fpEKM2MTxCQ/F28rYuxIXwvu2ljCxT0Q08L8OKK+8jvrC3gU5gczMwty
nRXceWyvIy46FOYWFkjOLuGu65h7Tn8j09PTUut5nvOSFc9zXvIkyfPuHq7I
66/e2d3N2thfFRayWNzA2BhKKirwDQhAv9ADztbeHuokPtcjjFfT0MDb2lpx
/vPOnm7m9frA1w03FG5BlcT2mvrmKKv5QOLpIRar03znNF6mXjF9g8OEs0OM
6fQdff/AAIvHRxivR0i8PcF85Ojy7Owk3B1tEJNeROanMTY5jQXCxUnCapGf
zCxh8PLyCvlbOUU4TphOjrO8RmLd5RnYW5igprWP+cnRvuTr65xv+2/Nc9F4
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
18AIBvq64OliA8+AMAyPDMDD0Qb6N28j4EkM+odHMTg0iLGJSbyvfk30RksS
rGBl58TmRS2R8rKp5g3iXqRhiHDM280BD0zMEJf8Eoura+horIK9rRUsbRxQ
VtOIxcVFNh/9c+vnvIjFa/J455Xin1dZLpE0bZ1vvlv77dvPT9tJPjyHXS32
Lefu+jb/pUSwJyPITiLwXBBNspXnHRrCpo7e09fPOG5mYYln4RHIys5BXkEh
20d19rjnCYzl5RXcXDXepjsfN9XXe/p62Py37v4B1qdOmT8yNoERNid9FB3U
/tzwMBvnTv22jpB9dB5b7yC1CTPE5qfTeeST03Q+2SQ7j+pzkzOzZHuCzV+b
mZ0n+vgcY+2Q3CcLnbM2Spi+uLyCZVJGropEbFwbtRc3OT3LyszJqRmICE9F
ojVSji6z+OYIj8USCZtTtby8tP2ctc/E808S2u6uZmt8Q8k+HK8H8nbXlLe3
nqN6ncLyDH+t0nOty+3I8buU41BOi+Ykb6jZYFcdD6e+/dcuAs8FUReB54Jo
Eo7nmhiumeuU6b2Ew2/K38HT2wf2jk5wcnElwQWOzi7wDwhEbV09YXm/Gsu5
cXat5HoaF2c/pp1xvb1z02Zcq9x/KndOF+M4vbaT+UjnbMjRMXadSrZmeBtx
dD+1GUfnyfO246hNd2V7cDTw89E5+3CjzD4cZ/t1jNmRocuxMc7n2pTcThyz
BTvB1SH26gN9v3ku2G//ryUCzwVRF4HngmiSvfGcC5S7vL/SyupqZheO9qFT
jjPbLt2c/q1xXF3Hzrbi1e2/Ktty7+pWtfu6afO1T82G+4DC5quKfVdlG+5y
ho9p9Jk6Jbf5Or2NDXcN7e3bzEGnZfGn8FwklWF0RcqCWLo3/1zMNqyanzRe
PmTDlfejtqlnb3/ebtvn92LD/aNEyReb+j012azf4H3IafBRyt6X4tovZy9e
8JcqyG5E4LkgmuRjeE4D5TUNlLO8H3LK4Ja2NjnLt7bXf5jpmnjetSPPaZu+
wg/6bng+vNUny4d5ruyTZfqL8py391o8uoInfTKEDcjwcmiF2YGbWJViUh7G
SZgVSfGx/eDKDFFv69Z0rrqPUm4/l9bd+Gjh6gmqPkwVfl7UfLbyfFZOI8fm
3TzXB4/u8fwvK8r1JIHngqiLwHNBNMnH8lyd61sZvj3Pt+e6nOdqOnqnEtM/
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
YL89I9IP9x2DFXGLRSuYW1iCp9N95NZ04t3LeITEFbNjQS5WeBweC0NDI6yS
+z52MkFSTpX8yiWcP3cBnYTn0cHe8PL2xZUzJ5Bc3EoYmIpHUansrPhQf3h4
+cBITwuOfvHsOSUSCce8tVmc+/kQruobQe/GDRRUNmKktwUO9vbw9fHGyfMX
0T3UB3NTS7BWhvV5mBK9ncoTByOEJBSx9eHWt9DSv83N3SPxdtUWK3g+P9gF
y7u3oHNdF6n5Zdw7JJx87OWE+Jec3Tt/VxMEJeSw9cmOd7igdVvB4/a3GdC9
ZaV4X/o6F1DXx5eZG1gVrWJlaQ7NDbWwuHcTseml7AjfHvIpoq6fP336FH0k
P9NnFNrbBVEXgeeCaBKN89Uo0wk3e/v72HY3KVdo+zsdV95OudvZqeTrrJuN
ae8mS258ew+7vo0wmDKWjmmnjG0lx+iS8revfxCd5PhWGzP7w/OtPlmGVHyy
DA9/Tp7PbcPzT7D32rsI5+51+PSuw7tHbvdVvqTb3n2Aa5tIYb+dn081PdCC
77/5Gkl5Zehqa8bZE0eQ/bYJ3o53kfKmEaXJj3HH0hNrEhmG26vxu1/9Eyy9
w1kcHqZ6cPANQ3tzA8zvXIGOmTdmBurx+9/8AVXv63H25+8Rnd2A9zmx0L3n
ijXRDL7+za9R/K4aFrcuwtgxXPXB1qaYv9QppeH5Yf4WOH3DDO+rivHHb79G
93A/buoaYHKVpF88jQvHTqBtcIrUGVJw8MhJkj/aYWVwgaQrRhFHd3UB7j7g
GLyh5suUtx3/0NkSUWmcr7j3hcn4/tAZNJM8ZnX7KuwexkM0P47i1xVYWxjH
yUPfIvtNNYrIu/nlpA5WpOsoKS7AkmQDMQHOMHcLIf/3DIy0z8HnWSaLUyr7
9NFxfJ4YIHmWMl1ZBJ4Loi4CzwXRJIzndL5421amN7e1KeaY80F53rl64Pfz
17N1tfnorfyc9DZNNuN2P8b9k3i+o34+Ief55K55PqPM8n3meVLXDOyI/u3e
LoIb4bZb6yrjtwtdtpLtdjGcGuYwoWS/nb9HS3Uxbhnow0D/Jvyfcr5XUhKe
obJtAPOjHUQXvKmw337i4DfIqebGjeWnRuGGgQGM7xnBxecRFsQ00jVEhvjB
xMwSNg5OeNs0iOXpfhjo3kRr7ySKMuNgeO8B7B0dkfSyDD2dHVzdjoTB/i4E
BxIWrsjYXHfa5zwz0QMHcxPY2trDw8MPk3OTiAyPxsIaZ0HnmY8TPOT+YpIj
H0Fb+xoc3AOxQtLC95WP9zYjNj6Je261fmxe583LTMLb+h7F/vSYUBKXNmxd
/EBvNdZZDSd3P3aMjnm7deM6bt69j2byTIAELs726J9Zw8r0KOwtTaGnpwd7
rxAsiTf2rb1dk/D/ocBzQdRF4LkgmmRbnu9b2Isd2E/kee92PB/cE8/H98Lz
LTZf94/nCp1teg6lHUN40zWCsq5hvOkcJkv5OgmlZLu6d1TRX8yL5vtovne4
nx10DK1BzbCrc/GjRLyAsOCHCAgKhq+3N9IKK/hE7Tmq/Zzn/cGo/tyG4KA6
d5AXgeeCqIvAc0E0yYfsw/1Zea4+Ju5z83wnH+gfwfPZT+w/3w9h88Vp+7t8
3ji/j59nxe3bQE9XB5ZEEkX6+PP5+eZ8klX3bcbBzZFTOrZNWpSFv5bp60pp
U5zPjm1srm+opkUeyY62aTY0+Gyh8SrSqRTHunz+PRfk917nzlM8q9IzfwkR
eC6Iugg8F0STqPC8bZuwZT5b244c3zxnFzxXYvpH8XwbG+5beT60df75bn2g
q/F85gvyXNmmq2wbW69f0I3nroXnokyJy4LsXQSeC6IuAs8F0SQq7e0fCnJO
U+ZSfZj6amlqadEY2Bg6+dj1D/ls2V2b+z7xfHCXPN9H/fxTx7erygY2LcZp
DhplY0PJ5hqvb261Xb7Vxvumfr5fLF5X0vn37lNl81rlNCvblvvQfdX9zKjH
pXRQo/27rc/w5eonAs8FUReB54Jokl3zXInpYREReBwaiqiYGERGRytCRFQU
omNjERQcjITERMZdVV1e7qNFjecs7t3yXL7eRZnOeN6jZsO9ny13y/OR3fJ8
ajuebzPGfR94zp/WMiNC2rAE6cNiNE/TMW+7ZcnW89ZVmL17Jm3rs1TdPtpH
9Y9rvobf/yF/bkp7Ne5Tx+7u4tIc596u/TQR7LcL8iEReC6IJtktz5mdmd4+
vHz1Cn4PHyIyKhr+DwMQ+OgRAoKCWKDr/gEBiImLg5ePD96+e6fCdMrxLhIH
5TTzwyLneXdPH2M0Y7p8nzLPufUutt3dy80v72JM18BzwnHKam4Oer8Kz+mS
Mn14+D8Jz+W/mYMr8O1ZR0j/OoK61hDXu4r4vlU87xPheb8IsWSZ0r8MkZLN
GMU9ZCJkpiYgIjoOAxPc/StK8tDcM6rx/vx1I/0dyH6ZhZcvs9HcOaA4tqmX
brVzqtL3veUZZairKkdmRgZy8oqwtMb122/2UX9Yx54e6kLYkyeorG9X7BMv
TiMuMgLZhW8U/dtKT6JYq614h8mZTXv106N9eEbqo+U17YrnUlwrWUVafDSS
0nOxrnjOzbgbqsrw9NkztPSMqLyv/RI6plFhS18Y3y7INiLwXBBNsmuet7Sx
+WDpmZmIe/4cevr6OHvuPC5cuqQIFy9fxsnTp2Fqbo7Y+HgUFhczHZqbz9aO
3t4uONrbITW/HMNDg8zPal9vDzwdbZCSU0KO9xBmd6OH8JkxnfCb+XDr5fjd
NziMV8kx8PALxgBhMq0r0DTxY+L6BobR1lgFGwdXtPeNYGx0mDGdcpzq65Td
44TZg4TtI8wu3CgbF0f9sdA55xrHt2vysbZLnn9q//mmfbgV3GlYg3nzGkyb
xLjXKIYxCUbypXGTBIb1qwp7rwob5mvzuH3+BPSMrOHr44I//elb1LYNoCDz
OarJsvRlPCIS8yGTcu3H3Di4DYbCQIe7OHVRF97eXjhy4DuExGQq0rhEnkcm
f4TXL1/gWWyqgsui5SWIladj888qmsbxHw/AysUTpjev4YKOCfip6PPzqqyS
SsRYnRuDq6MjZtakmB1sxM8HfoSXrx+OHzmE1NJGbEgWceanH+Hs4YMbV8/B
NyKZ3Yvar+Hb4CWrs3C3NcL//d//GZmlrSzuqYEWHP35R3j7+eHU4YNIzKuE
wn77hhhmepdgaO4EkzvaMLT1ZbUCmZQbJ/g6MwaHT1zAE1KvOPjzMdT3TYBr
A/h0pvMMr62thQ+pC3d3dyuOLS8vCzwXREUEnguiSbbwXNP4NiWeZ2RlsTb1
23fvQvv6dVzX01ME3Rs3oHX1KiytrVlbfFFJiYLnza0dGBzoxIUzpxGeUoC6
2mo0tXVhYnQQ188dxeP4LJI/J1FTU4Wyt5Xo7RtgOvvA0AAqiX5VXdeIuaVl
xD1yxdUbxphaWEZHWysaSbp6e/uYnt4/NIamqkKcOHMNdW3dqKuvxyh5Pspz
yuT21mbUN7USFs+yesTQyBjh9hTRzUdZ2zzP8k/m+dycSvjU+efRhOf3m6Ww
aZMye+02bVyw5kO7FOZN1N4rb7+dA2p5VhTOXDVSxF2Q+QL5bxuQmhSBkqpq
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
9qVs+ILxfuk0f2wdaCc7hvtxj4+RT7nXVt8Nn5bmndKiyc/i3v05bHxwey/7
9nTfbcK25+/D/7/XOHbrV035GOMutd+mvE+uQ9NjH+U79SN4vsVnal+fRp4r
228f+jPwfHQHntN99H9rIc9SUF6J9Jw8FlKzc9DSO4DGrl7MLy5BRs5hnKZM
oetqPKdt7Jp09E2WSxX5T53hTE+nbekadHT1QIWvG6hzld/Pt0vTJZ8n6TYd
y7N3louxStJG29fXKW+VwrqcwR/i9I76u7y+wAvzqfqpTJdxbSnMvs/G+mZQ
/AMfz3KpvF73MST8YPmwwdUbP4cizfUB7Z6HyvKhNNNjkvWPqxV8Lt5qYtbn
kE+tM+ylfrIbUU7LfsetKd7tmK2J9zv6Vf5QHYT/Lv4TyK54vtf9O7B8ex9r
O/lAV9PHd+T5wC55PqbZX6rchvv24+E2ea7O9L3wnDGdlP1v3tcj9HkiPAMf
wSsoGC4+/ihvbkNdexcbo0ZzpFjeH7y8uqrQ1Xl2L6+sMjYr69+Ur5SDInmf
Nx0nR/8vaudVJFpj54rWuPHwVPh+cHaNfMkHvq+cvtfFpSXFfp7ldG7V8soK
199N9tOxY5SXdNw+HQ9Ix+6ze2jQ1Sn31PfTeDcIy6snVpAysY7MMSl6Zlew
tLqG+ZU1LMiXq+Q5pNswm2cv30e/lfVihU29lteJaCiKZe0ka+z8D+vqVHib
68rt7BvrUpSNi5A6uYHsMQlGFtewIpFhcU2KZRKWxNx/uC2zsVkGKbexUxkk
caWOyZBO3kfdNIlXTP53yTqJf50t13YxH15T2Ub7BgrGxUgnac4bl2BmVcLi
3Aw7+5XbouvJlx1za0gZX0cGSXPb7JoirfxSLNu57Fcpx+XLVZK/6ftNn9pA
CUn7Anm36mnefJ+bcTU1NbF5/Xy8W9/1uso9mS0D8n/V1NSo+AhUPk85DirU
hlNzc7NK+jXdZ7t4dtpWfs/0++LvxY/t2C4OdaHfaEtLi2KbjpGmaVfuG1JO
s3Kc/L34b4FKa2urYi6dehz0XvX1nF0L+t3Q/dRmEv0vND3rdmmmfXgKW1VE
qI7A/0+88Da0NO3bTjTl3YkVMdJIuZNBvouqKe47Vs67IqlqvZrXWfh1WuZt
9z8qr2/3H1N2aPa5qVl2rZ9vF7Y9VzPD/3w8H/4Inu80vl0Ty2c1+mP5EM+p
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
26loefgP//APrJzhecwzubo0C69SojE+OYOagnhU5sSQPDCJ/MwXKM9LYueo
85zfps/293//9+w7pcLNe+N4/ojw2rJdBvNGEQzezeNu9RL0y+dh1bwGC5Jm
qr8TRX6Lfs7Xjahu9/XXXyvKF77vmfY90LKE2fNv52z6b9rzl8GqZQ3Di3Kf
u0qfP18WUF3ub/7mb1BRwdnM4+OlfTNU17cmabZTite2nbsPrSukDsj1c7Uy
hGc6LZu1tLQU+/gyMW94VTXN8ni5+GVwJPWIBdHWNgVlu/Z/+7d/y/Qx5b6H
mVUx7FpELA71NNP2HFonKRldVXnOqKgonDhxgr1f+n9RHoaSb4nmY5o3vby8
EBgYyPLk7du3Gb8ojyg/aL6mPnPoflpfTSZ1YKqLnzp1in1bP//8M0sr1QWV
8x8V+n3SukMs+Wbo/Wh9gaaBlkH6+vpobGxk9SHKlKtXr7Lvj7Yh0LoCrQPT
ti+qd9J6aVZWFvsfaVppemjdgDLk9evXjLO0Dk3jpP/xmTNnWJ2cfr/KbKRl
FX0O9t+LxYr9tI5KOUzrA5TbVNekcVJG0jhovYouh0h5+uOPP7K4L1++zMpG
yi16P5pOyl7KWVpPos9IywPaHkDfM31Wmj56Lc0z9BlonPR90rKFspf+L/Sd
0noOfQe5ubmKMoSmh68v0WtpOvnvj382IyMjlbxJ/4ubN2+qfAvKxx89eoR/
+Zd/Yecpt4e1zYpgRjhu36Gax7h1GfN7SXV4/qsoKyvD3/3d37H/jgp99qNH
j7JnoW0J9N3SZ6Z5gabzyJEj7D3Qd0bzDn1+mjfoktZp6H/Mt5fsiee7YHlz
aytCnjzBY5IfqU3XiOgoRJI6Gg0R5DuhvlqoH3R6jPk036H9fafxcJzOvzPP
u3fg+eC2+vmm/3Oqq29vH25q9/r5rnm+rsLzbpJuUxt7OHv7ws7NE8ZEv3b0
8ELAk6cICn2G7Lx8dj3Pcy9S/6M6tS2p19nY2CIxKYlw9wnjt4+PL9GlbfCI
1P0ekvp6nrzti9pOe0F0iLj456ReGILK6ho2J9+CfB/Upu69e8bsvEuXLrEl
fWf0+6YcpLoH/ebo92NDdAyaB2m9mucvFVrHp2Ui/a6o/kDzJF+28ELLe3od
ryuvyfVqqv/86le/Yt8tLcf5ue+U53Hdi4wzrl0y2LeJceH1zP/f3rn/RnVc
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
aS79iZxb/0NpvXbT+XDQRXLhuT+/Hcqe4x742/fH2mVjNK58dgVJeS6NBvsl
9XH55HyHW7+Waz6ckc0f9vG8oa1bNpy9KVsaujXPuEul6e1mPVd6VttnYiCe
hyksG3iHndF22RTt1rzT+ek+eVPWu1r/Ry4Gtm2h2ej+mLzJxJNX9J3Pdsp7
IZ63aKK8bZEOtx7R8VUg7wzv6W13b5+U1XdIqZdvFs9a5lfXutJ8BU+Bx+ge
NiYJ4f81fOCb+35y+rx9a7M/uY4ua/9MZGwI/5LpSRCYAq5TnhFYaHY7mGbz
KZEb5Gn3Ilvsu5OvP/eUfkTeEN+M8WJwy38W3uw7wDP5wCt+W/Rt/BGme8EP
fNo/f3je+ofNUwdX0WlsnYi9t9WH3Uc9gK9Wl9j3Zm+bvmvPwC/3sTVdDR9F
fVrGGB82BuXHZKS+7Bnmu9KHyduvF+7hGTvnl52Psua3p3cvdiZlI/2tcWB/
o41xrbUrmXkGfngn8uKbgjH2HW1epPEBf1Z3frvjG1s98B5DmYNp5OzkMJ6H
fPCG58Rpx6fO/1L55zm4bumXqnfOnjMn//9SL8Rk1mMz5L19h+X6tVbVi8vl
UEWNs8HPqn52Ru3L48dq5ODnldLU0ioNZ+pkxvSJsumDA4rRF6S56ZwcPFgu
X9SdcvgddWMAMTl1olYqqr/Qc1cc1ts8OcbUL166LFcvX5Jq1Qu+/HeDqxti
keN/rzt+TM5EYpJIpOSLz/bJ6AmT5ZOqE6o/Bbb76VMnJdLYpHZ7l9OjBovf
ngvP++fDXR10fjvYXFt3Qioqq6Sy6ogcrqiUzw9XpI+rnS7j1pffCWLGkNft
9DypILZrMK+OcVAjsKLPawsW89V/BhwO1mf139fryTNbo2bk1oDfvRtg+J3A
vrT15xY3xcfocFv08TprLns6vmyua9je6Ar4UFzqCrbULedTqWTBtee2viXX
/HdkUFNzk/P71NcdkvracpX1MSfnuObGrvPguekIudaf96l+wZo+dJ6E6k1u
qymZ3hLPNozjvt/dZNmAa8yrV/mdSKYCPS4VrBEMtj3B/MICQF4oVi1zCi2v
cOI8c/3zUXjdkk/wnCqQL3VViPLzHKwFSObMN9gSw9fnMczzUGye8DOFjqHB
YqYMt8yhljtYvvQD7HpwBd0j/L3uJc98ZHPT7H+Bg73/vZbzXVChtst82GAd
bu42xrUgrsTQy7qf64NRk9qx/ZjeMHBdeWQgns+dN8/FbgfTLfEvdP6h+odF
i0J4Hg3+l3oh+F/qhx9XytJXX5TJM34uU4uKZPHabVJ/+qhMHD1KZs4qlnFj
RsnLi9+Rf+4pk4ce+rFML35BampPyq+ffVKm6jPjx4+VtX/5mzR+fVymjh+j
Nu2zMnnSeHnptdVqVwXj3WDrjbZ2aW2JybznimXmk8VSNOmnsnVvuZTvLZOJ
44rkpXlzZULRFDnw2VEpWblARox6RNZv/0hqDh1Q23iKvPzKb2Tqz6bJx9X/
kmQi7uz04eB5sF6tSzGne1A8N0wv+J3ds3eCGHFeLLj+deb957LXn2fHcCdl
x3e9nVlD7q8nt7XnhtX+sX/e3w/HgfPjw91P3NdCcVgt7su9xoTz15qF51YX
wvLBYsoMpV/mw/PB0v/p3sm+q1+P/lrnQrgZHnfNd1yoHP+ZsN83vA0/k+84
F2+5eB5KfRR633x5FqoHn8fB7s3HRy6ecx3n4z3fc98Hhb+r7Q+ljo2GWg/h
PBhfeX/nh2lMj+TH8/r7wPP6bDzf/tEhOfxZuVQcrZONa96QSbPmyVd11fLI
qFFSefqcxL46Ko+OHC1HTn4pzz3zuHxSWy/lO0tkXNHjculmSioO7JAJU2dJ
7bEqmTB2rBz9ukVaztYqRk+U8urjsnPHNjeuub+8Uvbv2CDTHn9abnT3SW3V
p7L/02rZtXmNzH5+vuCt2b9tnTz94kJp0Ofn/GqudKuKdnhfmcx5PpgbuXXN
a/L7JevcP0zQM9sGxIf77vA8+FdKf9z2cPomHRcuHEOmcPJiw4XTrXAqHBNu
uOl+YrvmSsMp616xndgyxKK7U0B/GA6m38mRfLy/1/Stl7KuydD81QVlQ4H0
IOb7fef9v0b/Tb1wqHrtg06F2teD8nb4qZgL8h/eLEx6
    "], {{0, 283}, {500, 0}}, {0,
     255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{500, 283},
  PlotRange->{{0, 500}, {0, 283}}]],
 CellChangeTimes->{{3.70993974087497*^9, 
  3.709939747536253*^9}},ExpressionUUID->"bb0eedf4-cdcc-43fb-9f20-\
e54aa8c50a61"]], "Text",
 CellChangeTimes->{{3.709939728514429*^9, 
  3.709939751750073*^9}},ExpressionUUID->"6db229a5-5bea-4dae-b175-\
1ee182e29124"],

Cell["\<\
Some of these things have an extra file, $ServiceName.m, but in general this \
appears to be pretty standard. We\[CloseCurlyQuote]ll dig through this an see \
how it works.\
\>", "Text",
 CellChangeTimes->{{3.709939800143592*^9, 3.709939834733202*^9}, {
  3.709939882511496*^9, 3.709939898852351*^9}, {3.70993994594106*^9, 
  3.709939972598382*^9}, {3.7099402525889797`*^9, 3.709940292105259*^9}, {
  3.709940432112734*^9, 
  3.709940471400207*^9}},ExpressionUUID->"36552f68-89fb-43f5-a928-\
64ed3dcbb2aa"],

Cell[CellGroupData[{

Cell["load.m", "Subsection",
 CellChangeTimes->{{3.709940474560156*^9, 
  3.7099404759052563`*^9}},ExpressionUUID->"26e60c86-c050-4bae-bc15-\
a04ed2a080c7"],

Cell["This file is trivial. For ChemSpider I have:", "Text",
 CellChangeTimes->{{3.709940477855975*^9, 
  3.709940509264866*^9}},ExpressionUUID->"2f634d75-0bf8-4b7c-a028-\
6aa158f15ff7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "PacletManager`Package`getPacletWithProgress", "[", 
   "\"\<ServiceConnection_ChemSpider\>\"", "]"}], "\n"}], "\n", 
 RowBox[{"Get", "[", "\"\<ChemSpiderLoad`\>\"", "]"}]}], "Code",
 CellChangeTimes->{
  3.709940500394808*^9},ExpressionUUID->"f7e07223-b514-440a-a68e-\
a6d1def253f9"],

Cell["\<\
Basically it just configures the loader. Easy. Let\[CloseCurlyQuote]s move on.\
\>", "Text",
 CellChangeTimes->{{3.709940512998951*^9, 3.7099405397526417`*^9}, {
  3.709940614227524*^9, 
  3.709940626067327*^9}},ExpressionUUID->"85f0b6d6-b267-4a92-b844-\
1497cd955c8c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ChemSpiderLoad.m", "Subsection",
 CellChangeTimes->{{3.709940629251482*^9, 3.70994063098036*^9}, {
  3.709941011697506*^9, 
  3.709941012218102*^9}},ExpressionUUID->"fcb9a334-a717-4e45-bc4c-\
9df2f23eaf68"],

Cell["This is also super simple. I have:", "Text",
 CellChangeTimes->{{3.70994065894014*^9, 
  3.70994066649864*^9}},ExpressionUUID->"1ca191a3-2e57-4a4d-b1a5-\
be04c464a124"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Mathematica", " ", "Package"}], " ", "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{"BeginPackage", "[", "\"\<ChemSpiderLoad`\>\"", "]"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Exported", " ", "symbols", " ", "added", " ", "here", " ", "with", " ", 
     RowBox[{"SymbolName", "::", "usage"}]}], " ", "*)"}], "  ", "\n", "\n", 
   RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"Begin", " ", "Private", " ", "Context"}], " ", "*)"}], " ", "\n",
    "\n", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", 
      RowBox[{"ListQ", "[", "System`$Services", "]"}]}], ",", 
     RowBox[{"Get", "[", "\"\<OAuth`\>\"", "]"}]}], "]"}], "\n", "\n", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dir", "=", 
       RowBox[{"DirectoryName", "[", "System`Private`$InputFileName", "]"}]}],
       "}"}], ",", "\n", "\t", 
     RowBox[{"KeyClient`addKeyservice", "[", 
      RowBox[{"\"\<ChemSpider\>\"", ",", "dir"}], "]"}]}], "\n", "]"}], "\n", 
   "\n", "\n", 
   RowBox[{"End", "[", "]"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"End", " ", "Private", " ", "Context"}], " ", "*)"}], "\n", 
   RowBox[{"EndPackage", "[", "]"}]}]}]], "Code",
 CellChangeTimes->{
  3.709940669014027*^9},ExpressionUUID->"36462b16-89cd-46ca-91d3-\
6608c5355637"],

Cell[TextData[{
 "The main thing to note here is that ",
 ButtonBox["KeyClient`addKeyservice",
  BaseStyle->"Link",
  ButtonData->"paclet:KeyClient/ref/addKeyservice"],
 " chilling there. It\[CloseCurlyQuote]s one of three different clients \
whoever wrote the framework has provided, the big one being the ",
 ButtonBox["OAuthClient`",
  BaseStyle->"Link",
  ButtonData->"paclet:OAuthClient/guide/OAuthClient"],
 "."
}], "Text",
 CellChangeTimes->{{3.7099407055338707`*^9, 3.709940833136763*^9}, {
   3.709940878428162*^9, 3.709940878953945*^9}, 3.709947539688085*^9, {
   3.709950439516914*^9, 
   3.709950443617929*^9}},ExpressionUUID->"91324a38-3d90-459f-a49b-\
8c8f68bccf6f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ChemSpider.m", "Subsection",
 CellChangeTimes->{{3.7099410064904337`*^9, 
  3.709941009362466*^9}},ExpressionUUID->"80e682c9-9b99-4a11-adcc-\
207014b2e1f1"],

Cell[TextData[{
 "This is the meat of the paclet. Basically you provide the system with all \
the needed to format an object via ",
 Cell[BoxData[
  FormBox["ServiceConnect", TraditionalForm]], "InlineInput",
  FormatType->"TraditionalForm",ExpressionUUID->
  "e9133160-2113-4bc0-ab15-c3b71863bf50"],
 "."
}], "Text",
 CellChangeTimes->{{3.709941016112618*^9, 
  3.709941071959931*^9}},ExpressionUUID->"123a9cbd-5278-42c2-a472-\
0ff225dd88b6"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s forget our ",
 ButtonBox["do-re-mis",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.youtube.com/watch?v=k33ZQ4I4p24"], None},
  ButtonNote->"https://www.youtube.com/watch?v=k33ZQ4I4p24"],
 " (sorry Julie) and not start at the very beginning. Instead we\
\[CloseCurlyQuote]ll start at the very end where we see this:"
}], "Text",
 CellChangeTimes->{{3.7099411031108627`*^9, 3.709941135087472*^9}, {
  3.709941280773903*^9, 
  3.709941339140469*^9}},ExpressionUUID->"45eec57c-045b-4239-b231-\
a0de05873215"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Return", " ", "three", " ", "functions", " ", "to", " ", "define", " ", 
     "oauthservicedata"}], ",", " ", "oauthcookeddata", ",", " ", 
    "oauthsendmessage"}], "  ", "*)"}], "\n", 
  RowBox[{"{", 
   RowBox[{
   "ChemSpiderAPI`Private`chemspiderdata", ",", 
    "ChemSpiderAPI`Private`chemspidercookeddata", ",", 
    "ChemSpiderAPI`Private`chemspidersendmessage"}], "}"}]}]], "Code",
 CellChangeTimes->{
  3.709941379911129*^9},ExpressionUUID->"9feddd53-5a07-4dea-a6c1-\
aa6668dae678"],

Cell["\<\
This is what\[CloseCurlyQuote]s returned (and all of what\[CloseCurlyQuote]s \
returned) by the package. So these three functions define the entire service. \
Actually, it\[CloseCurlyQuote]s really the first two that define the service, \
that last one generally only ever appears in a line like this:\
\>", "Text",
 CellChangeTimes->{{3.709941404725456*^9, 
  3.7099414789347267`*^9}},ExpressionUUID->"c8eec1d6-8d84-4f44-b3fe-\
dbddf1e736ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"chemspidersendmessage", "[", "___", "]"}], ":=", 
  "$Failed"}]], "Code",
 CellChangeTimes->{
  3.7099414813184*^9},ExpressionUUID->"a57de963-fc5a-43f5-bd35-2467306dad2a"],

Cell["\<\
Except in the Twilio connection where it does something. But it\
\[CloseCurlyQuote]s never been worth it for me to figure it out. So moving on!\
\>", "Text",
 CellChangeTimes->{{3.709941570694265*^9, 
  3.709941597869358*^9}},ExpressionUUID->"364003c2-ed98-452f-9238-\
0c8132cc90cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["chemspiderdata", "Subsection",
 CellChangeTimes->{
  3.709941612194685*^9},ExpressionUUID->"b64546fe-7dad-47e5-9c19-\
ca54485b3208"],

Cell["\<\
This is the core service data function. It defines the all of the service \
parameters and how the connection should be formatted. \
Here\[CloseCurlyQuote]s the primary data definition from the file:\
\>", "Text",
 CellChangeTimes->{{3.7099416292112017`*^9, 3.709941635089965*^9}, {
  3.7099421153089867`*^9, 3.709942120254561*^9}, {3.7099421503200197`*^9, 
  3.709942187205249*^9}, {3.7099422382958317`*^9, 
  3.70994224024551*^9}},ExpressionUUID->"1666f1c5-14ac-4598-9651-\
ce86564d429b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"chemspiderdata", "[", "]"}], "=", 
  RowBox[{"{", "\n", "\t\t", 
   RowBox[{
    RowBox[{"\"\<ServiceName\>\"", " \t\t", "->", " ", "\"\<ChemSpider\>\""}],
     ",", " ", "\n", "\n", "        ", 
    RowBox[{"\"\<URLFetchFun\>\"", "\t\t", ":>", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"params", "=", 
           RowBox[{"Lookup", "[", 
            RowBox[{
             RowBox[{"{", "##2", "}"}], ",", "\"\<Parameters\>\"", ",", 
             RowBox[{"{", "}"}]}], "]"}]}], "}"}], ",", "\n", "        \t", 
         RowBox[{"URLFetch", "[", 
          RowBox[{"#1", ",", "\"\<ContentData\>\"", ",", "\n", "        \t\t", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"{", "##2", "}"}], ",", 
              RowBox[{"Except", "[", 
               RowBox[{"\"\<Parameters\>\"", "|", "\"\<Headers\>\""}], 
               "]"}]}], "]"}]}], ",", " ", "\n", "        \t\t", 
           RowBox[{
            RowBox[{"\"\<Parameters\>\"", " ", "->", " ", "params"}], "/.", 
            RowBox[{"\"\<apikey\>\"", "->", "\"\<token\>\""}]}], ",", "\n", 
           "        \t\t", 
           RowBox[{"\"\<Headers\>\"", " ", "->", " ", 
            RowBox[{"{", "}"}]}]}], "]"}]}], "]"}], "&"}], ")"}]}], ",", "\n",
     "        \t\t", "\n", "        ", 
    RowBox[{"\"\<ClientInfo\>\"", "\t\t", ":>", " ", 
     RowBox[{"OAuthDialogDump`Private`MultipleKeyDialog", "[", 
      RowBox[{"\"\<ChemSpider\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Security Token\>\"", "->", "\"\<token\>\""}], "}"}], ",",
        "\n", "                                        ", 
       "\"\<https://www.chemspider.com/UserProfile.aspx\>\"", ",", 
       "\"\<http://www.rsc.org/help-legal/legal/terms-conditions/\>\""}], 
      "]"}]}], ",", "\n", "\t \t", 
    RowBox[{"\"\<Gets\>\"", "\t\t\t\t", "->", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Search\>\"", ",", "\"\<CompoundInformation\>\"", ",", 
       "\"\<CompoundThumbnail\>\"", ",", "\"\<Databases\>\"", ",", 
       "\"\<ExtendedCompoundInformation\>\"", ",", 
       "\"\<AllSpectraInformation\>\"", ",", 
       "\"\<CompoundSpectraInformation\>\"", ",", 
       "\"\<SpectrumInformation\>\"", ",", "\"\<InChIKeyQ\>\"", ",", 
       "\"\<GetIdentifier\>\""}], 
      RowBox[{"(*", 
       RowBox[{
       ",", "\"\<MOLToInChI\>\"", ",", "\"\<MOLToInChIKey\>\"", ",", 
        "\"\<IDToMOL\>\"", ",", "\"\<RecordToMOL\>\"", ",", 
        "\"\<MOLToID\>\""}], "*)"}], "}"}]}], ",", "\n", "\t \t", 
    RowBox[{"\"\<RawGets\>\"", "\t\t\t", "->", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<RawGetDatabases\>\"", ",", " ", 
       "\"\<RawGetExtendedCompoundInfo\>\"", ",", " ", 
       "\"\<RawGetRecordMOL\>\"", ",", " ", "\"\<RawSearchByFormula2\>\"", 
       ",", "\"\<RawSearchByMass2\>\"", ",", "\n", "\t \t\t", 
       "\"\<RawAsyncSimpleSearch\>\"", ",", 
       "\"\<RawAsyncSimpleSearchOrdered\>\"", ",", 
       "\"\<RawGetAsyncSearchResults\>\"", ",", "\"\<RawGetCompoundInfo\>\"", 
       ",", "\"\<RawGetCompoundThumbnail\>\"", ",", "\"\<RawMol2CSID\>\"", 
       ",", "\"\<RawSimpleSearch\>\"", ",", "\"\<RawGetAllSpectraInfo\>\"", 
       ",", "\n", "\t \t\t", "\"\<RawGetCompoundSpectraInfo\>\"", ",", 
       "\"\<RawGetSpectrumInfo\>\"", ",", "\"\<RawCSIDToMol\>\"", ",", 
       "\"\<RawIsValidInChIKey\>\"", ",", "\"\<RawMolToInChI\>\"", ",", 
       "\"\<RawMolToInChIKey\>\"", ",", "\"\<RawInChIToMol\>\"", ",", 
       "\"\<RawInChIToInChIKey\>\"", ",", "\"\<RawInChIToCSID\>\"", ",", 
       "\"\<RawInChIKeyToMol\>\"", ",", "\"\<RawInChIKeyToInChI\>\"", ",", 
       "\"\<RawInChIKeyToCSID\>\""}], "}"}]}], ",", "\n", "\t \t", 
    RowBox[{"\"\<Posts\>\"", "\t\t\t\t", "->", " ", 
     RowBox[{"{", "}"}]}], ",", "\n", "\t \t", 
    RowBox[{"\"\<RawPosts\>\"", "\t\t\t", "->", " ", 
     RowBox[{"{", "}"}]}], ",", "\n", " \t\t", 
    RowBox[{
    "\"\<Information\>\"", "\t\t", "->", " ", 
     "\"\<Import ChemSpider API data to the Wolfram Language\>\""}]}], "\n", 
   " \t\t", "}"}]}]], "Code",
 CellChangeTimes->{
  3.709942188642322*^9},ExpressionUUID->"7fe2768c-037a-4004-80bd-\
6cbf8103cbc5"],

Cell["There are a few groupings here that should stand out.", "Text",
 CellChangeTimes->{{3.7099422428554277`*^9, 3.7099423070085907`*^9}, {
  3.70994334332102*^9, 
  3.709943344370584*^9}},ExpressionUUID->"e1dacac0-376d-4312-a9c2-\
7aa5de31d8c4"],

Cell[CellGroupData[{

Cell["ServiceName / Information", "Subsubsection",
 CellChangeTimes->{{3.709942286563119*^9, 
  3.709942290612035*^9}},ExpressionUUID->"772dbbed-8a6b-4273-926f-\
63af3e0168b5"],

Cell["\<\
These two are basic AF. They\[CloseCurlyQuote]re plain strings that just give \
the service a name and a one-line description.\
\>", "Text",
 CellChangeTimes->{{3.7099422944071608`*^9, 
  3.7099423456916723`*^9}},ExpressionUUID->"b55ef4a8-b966-4995-869f-\
b069a662938f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gets / RawGets & Posts / RawPosts", "Subsubsection",
 CellChangeTimes->{{3.7099423506261177`*^9, 
  3.709942363043049*^9}},ExpressionUUID->"acbbd9ac-636a-4dab-a29f-\
49bb83639f1b"],

Cell[TextData[{
 "These give the names of the requests that will eventually be passable into ",
 ButtonBox["ServiceExecute",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/ServiceExecute"],
 " as well as the names of the core requests that will be called to provide \
data to those."
}], "Text",
 CellChangeTimes->{{3.709942364249854*^9, 3.70994246601303*^9}, {
  3.709942635419507*^9, 
  3.709942646622407*^9}},ExpressionUUID->"623da3f9-3316-4fce-9214-\
879e40ca3727"],

Cell[TextData[{
 "I\[CloseCurlyQuote]ll detail how these work ",
 ButtonBox["later",
  BaseStyle->"Hyperlink",
  ButtonData->"request-formatting"]
}], "Text",
 CellChangeTimes->{{3.709942648144503*^9, 3.709942656687508*^9}, {
  3.709943154154703*^9, 
  3.709943154158534*^9}},ExpressionUUID->"2b1bba4c-cf58-46ab-8af4-\
c6c3c3be38f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["ClientInfo", "Subsubsection",
 CellChangeTimes->{{3.709943319502899*^9, 3.709943323893731*^9}, {
  3.7099460302365513`*^9, 
  3.709946031071164*^9}},ExpressionUUID->"231f9ea5-71ce-4727-8d57-\
fdde70eb3d60"],

Cell["\<\
This is the data that defines how authentication should be done. Looking at \
the one we have here: \
\>", "Text",
 CellChangeTimes->{{3.7099433303321447`*^9, 3.7099434082068644`*^9}, {
  3.709946052221183*^9, 
  3.709946067758357*^9}},ExpressionUUID->"0c930668-ed20-4d7b-a5d8-\
5cc89c87aa12"],

Cell[BoxData[
 RowBox[{"\"\<ClientInfo\>\"", " ", "\[RuleDelayed]", "\n", "\t", 
  RowBox[{"OAuthDialogDump`Private`MultipleKeyDialog", "[", 
   RowBox[{"\"\<ChemSpider\>\"", ",", "\n", "\t\t", 
    RowBox[{"{", 
     RowBox[{"\"\<Security Token\>\"", "->", "\"\<token\>\""}], "}"}], ",", 
    "\n", "\t", "\t", "\"\<https://www.chemspider.com/UserProfile.aspx\>\"", 
    ",", "\n", "\t", "\t", 
    "\"\<http://www.rsc.org/help-legal/legal/terms-conditions/\>\""}], "\n", 
   "\t", "\t", "]"}]}]], "Code",
 CellChangeTimes->{{3.709943563921286*^9, 3.709943584523809*^9}, {
  3.7099436349565477`*^9, 
  3.709943640114602*^9}},ExpressionUUID->"ee641ba0-2685-4154-9f33-\
9ebcb3a97443"],

Cell["\<\
It\[CloseCurlyQuote]s calling a function that pops open a dialog with a \
button that sends you to the URL in the third argument, asks for the field(s) \
given in the second argument, and is named according to the first.\
\>", "Text",
 CellChangeTimes->{{3.709943587200382*^9, 3.709943595156261*^9}, {
  3.7099436438924026`*^9, 
  3.709943716008651*^9}},ExpressionUUID->"16d09ef0-3c24-4480-94b4-\
07626fca5836"],

Cell[TextData[{
 "As I mentioned before there are two main clients for these connections and, \
as best I can tell, this is the core authorization function of the ",
 ButtonBox["KeyClient` ",
  BaseStyle->"Link",
  ButtonData->"paclet:KeyClient/guide/KeyClient"],
 ". I think it is so called because it uses an API key, rather than the ",
 ButtonBox["OAuth flow",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://stormpath.com/blog/what-the-heck-is-oauth"], None},
  ButtonNote->"https://stormpath.com/blog/what-the-heck-is-oauth"],
 "."
}], "Text",
 CellChangeTimes->{{3.709943730956354*^9, 3.709943843404368*^9}, {
   3.7099439538380947`*^9, 3.709943960318006*^9}, {3.70994673553885*^9, 
   3.709946735544375*^9}, 
   3.709947529080434*^9},ExpressionUUID->"db7d7593-2b2f-47e8-8aae-\
388bf2703b71"],

Cell["\<\
For a standard OAuth implementation we\[CloseCurlyQuote]ll pull from the \
Facebook connection (note that I chopped a lot of unrelated stuff out):\
\>", "Text",
 CellChangeTimes->{{3.7099440017535677`*^9, 3.70994403221292*^9}, {
  3.709944145421485*^9, 3.7099441561568823`*^9}, {3.7099450543755913`*^9, 
  3.709945054972699*^9}},ExpressionUUID->"65310032-30b9-45b9-b33e-\
fce33f33611a"],

Cell[BoxData[
 RowBox[{"{", "\n", "\t", 
  RowBox[{
   RowBox[{
   "\"\<AuthorizeEndpoint\>\"", " ", "->", " ", 
    "\"\<https://graph.facebook.com/oauth/authorize\>\""}], ",", " ", "\n", 
   "\t", 
   RowBox[{
   "\"\<AccessEndpoint\>\"", " ", "->", " ", 
    "\"\<https://graph.facebook.com/oauth/access_token\>\""}], ",", "\n", 
   "\t", 
   RowBox[{
   "\"\<RedirectURI\>\"", "       ", "->", " ", 
    "\"\<https://www.wolfram.com/oauthlanding?service=Facebook\>\""}], ",", 
   "\n", "\t", 
   RowBox[{"\"\<VerifierLabel\>\"", "     ", "->", " ", "\"\<code\>\""}], ",",
    "\n", "\t", 
   RowBox[{"\"\<AuthenticationDialog\>\"", " ", "->", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"OAuthClient`tokenOAuthDialog", "[", 
       RowBox[{"#", ",", " ", "\"\<Facebook\>\"", ",", "fbicon"}], "]"}], 
      "&"}], ")"}]}], ",", "\n", "\t", 
   RowBox[{"\"\<ClientInfo\>\"", "        ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"\"\<Wolfram\>\"", ",", "\"\<Token\>\""}], "}"}]}], ",", "\n", 
   "\t", 
   RowBox[{
   "\"\<AccessTokenExtractor\>\"", "  ", "->", " ", "\"\<JSON/2.0\>\""}]}], 
  "\n", "\t", "}"}]], "Code",
 CellChangeTimes->{{3.709944099246352*^9, 3.709944138899941*^9}, {
  3.709944169420638*^9, 3.709944169877482*^9}, {3.709944619975946*^9, 
  3.709944646790707*^9}},ExpressionUUID->"c78bf844-aa2d-47fb-a76f-\
cf7019349803"],

Cell["\<\
If it\[CloseCurlyQuote]s not clear this is an OAuth 2.0 flow, but most \
services these days use OAuth 2.0 so I have yet to dig and figure out how an \
OAuth 1.0 service would be set up.\
\>", "Text",
 CellChangeTimes->{{3.709945061701378*^9, 
  3.709945139309658*^9}},ExpressionUUID->"8147580c-1ed2-45c5-9631-\
266f99c6a27c"],

Cell[TextData[{
 "Note that we provide an ",
 Cell[BoxData["\"\<AuthorizeEndpoint\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "2cdd6eeb-ad16-40a9-9046-308b734e4ce5"],
 ", ",
 Cell[BoxData["\"\<AccessEndpoint\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "95408f93-eae4-416d-8504-9929a328cdf7"],
 ", ",
 Cell[BoxData["\"\<RedirectURI\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "fb3bbd7e-90e4-4bcb-a1c5-092d536fd1c3"],
 " and ",
 Cell[BoxData["\"\<VerifierLabel\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "d09591a4-69d7-49ed-9be0-5b989107033e"],
 ". For some, like the Google Drive API, there are yet a few parameters to \
add, but they should be straight-forward and guessable."
}], "Text",
 CellChangeTimes->{{3.7099451440320063`*^9, 3.7099452463137093`*^9}, {
  3.709946508809475*^9, 
  3.7099465192791023`*^9}},ExpressionUUID->"d18fc360-1c2a-4941-86a0-\
4ef818f45242"],

Cell[TextData[{
 "The function ",
 ButtonBox["OAuthClient`tokenOAuthDialog",
  BaseStyle->"Link",
  ButtonData->"paclet:OAuthClient/ref/tokenOAuthDialog"],
 " calls the code that actually implements the flow, sending you to authorize \
the site and then passing you off to a redirect URL to copy the token."
}], "Text",
 CellChangeTimes->{{3.7099452473580227`*^9, 3.709945280051413*^9}, {
  3.7099455915228*^9, 3.7099456336833057`*^9}, {3.709945763071453*^9, 
  3.70994576352569*^9}, {3.7099458065648212`*^9, 
  3.709945829995851*^9}},ExpressionUUID->"89165014-b808-415a-ab70-\
e32041352eae"],

Cell[TextData[{
 "Modern paclets use the ",
 ButtonBox["Channel Framework",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/language/guide/Channel-\
BasedCommunication.html.en"], None},
  ButtonNote->
   "http://reference.wolfram.com/language/guide/Channel-BasedCommunication.\
html.en"],
 " to provide a seamless way to get a token, presumably by listening into a \
channel to which is provided as the redirect URI. This is someone one could \
implement oneself easily enough."
}], "Text",
 CellChangeTimes->{{3.709945882308669*^9, 
  3.709946015663669*^9}},ExpressionUUID->"275571e1-5dc6-4130-a77d-\
a3e75af0ff41"]
}, Open  ]],

Cell[CellGroupData[{

Cell["URLFetchFunc", "Subsubsection",
 CellChangeTimes->{
  3.709946036250379*^9},ExpressionUUID->"1bb1ef86-559e-4ac8-8612-\
1e5c811be706"],

Cell[TextData[{
 "This is simply the function that\[CloseCurlyQuote]s used to process calls. \
It defaults to ",
 ButtonBox["URLFetch",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/URLFetch"],
 " but can be an arbitrary function, as is done here, replacing the ",
 Cell[BoxData["\"\<Parameters\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "5279fe67-6e4d-4fcc-9b0f-fcb8bea0e006"],
 " and ",
 Cell[BoxData["\"\<Headers\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "d7994991-9935-4264-9731-d8fe03fe3b1e"],
 " options."
}], "Text",
 CellChangeTimes->{{3.7099460373072767`*^9, 3.7099462081532516`*^9}, {
  3.709946273830591*^9, 3.709946274579941*^9}, {3.709946408580983*^9, 
  3.709946448596449*^9}, {3.7099464859822693`*^9, 3.709946506480155*^9}, {
  3.709946639392911*^9, 
  3.7099466399099417`*^9}},ExpressionUUID->"4d3ef449-e1e1-4504-b90b-\
2a4879fe834d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Request Formatting", "Subsection",
 CellChangeTimes->{{3.7099426622298594`*^9, 3.709942685822789*^9}},
 CellTags->
  "request-formatting",ExpressionUUID->"7b72d2ad-23c3-4b83-a46e-c9489d065d02"],

Cell[TextData[{
 "Continuing on, we move to the requests themselves. There are two types of \
requests. The first are the \
\[OpenCurlyDoubleQuote]raw\[CloseCurlyDoubleQuote] requests which are the raw \
importers from the APIs. These provide info to the ",
 Cell[BoxData["\"\<URLFetchFunc\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "7c6dceb6-a201-4b24-8a00-18966fec0f97"]
}], "Text",
 CellChangeTimes->{{3.709946591926011*^9, 3.709946595407065*^9}, {
  3.7099469056881037`*^9, 3.709946928668583*^9}, {3.709946958771491*^9, 
  3.70994703315598*^9}},ExpressionUUID->"05cd40b3-138f-4e29-9322-\
6dab2072cd27"],

Cell[CellGroupData[{

Cell["Raw Requests", "Subsubsection",
 CellChangeTimes->{{3.7099426872854643`*^9, 
  3.709942707300803*^9}},ExpressionUUID->"dcbcafa2-e817-4180-be0e-\
ed5c04273ec2"],

Cell["We\[CloseCurlyQuote]ll look at a sample raw request spec:", "Text",
 CellChangeTimes->{{3.7099469660709743`*^9, 3.7099469685072613`*^9}, {
  3.7099488709181347`*^9, 
  3.709948878450962*^9}},ExpressionUUID->"3cd943b2-6680-4041-a8c0-\
04d769193a34"],

Cell[BoxData[
 RowBox[{
  RowBox[{"chemspiderdata", "[", "\"\<RawGetRecordMol\>\"", "]"}], " ", ":=", 
  " ", 
  RowBox[{"{", "\n", "\t\t", 
   RowBox[{
    RowBox[{
    "\"\<URL\>\"", "\t\t\t\t", "->", " ", 
     "\"\<http://www.chemspider.com/MassSpecAPI.asmx/GetRecordMol\>\""}], ",",
     "\n", "        ", 
    RowBox[{"\"\<HTTPSMethod\>\"", "\t\t", "->", " ", "\"\<GET\>\""}], ",", 
    "\n", "        ", 
    RowBox[{"\"\<Parameters\>\"", "\t\t", "->", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<csid\>\"", ",", "\"\<calc3d\>\""}], "}"}]}], ",", "\n", 
    "        ", 
    RowBox[{"\"\<RequiredParameters\>\"", "->", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<csid\>\"", ",", "\"\<calc3d\>\""}], "}"}]}], ",", "\n", 
    "        ", 
    RowBox[{
    "\"\<ResultsFunction\>\"", "\t", "->", " ", "chemspiderimport"}]}], "\n", 
   "        ", "}"}]}]], "Code",
 CellChangeTimes->{
  3.709948937971365*^9},ExpressionUUID->"819511b3-55f3-459c-87f4-\
b2a44e961cf8"],

Cell[TextData[{
 "We can see we\[CloseCurlyQuote]re give a URL, HTTP verb, query parameters, \
required parameters, and an import function (defaults to ",
 Cell[BoxData["\"\<URLFetchFunc\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "3cd56762-7070-4e9b-a72d-8699d8cc1c16"],
 ")."
}], "Text",
 CellChangeTimes->{{3.709948962494081*^9, 
  3.709949018895521*^9}},ExpressionUUID->"84f2b459-dd5e-4a68-aa10-\
2c860a73cf76"],

Cell["\<\
These are all pretty straightforward, but it\[CloseCurlyQuote]s worth noting \
that these can look rather different. Here\[CloseCurlyQuote]s another \
example, this time from Facebook:\
\>", "Text",
 CellChangeTimes->{{3.709949037753875*^9, 3.7099490842024097`*^9}, {
  3.7099491818750134`*^9, 
  3.709949190449552*^9}},ExpressionUUID->"e4b18ad0-1338-43ef-beb2-\
d2bdd37761e3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$facebookphotopermissions", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"facebookdata", "[", "\"\<RawUserPhotos\>\"", "]"}], " ", "=", " ", 
  
  RowBox[{"{", "\n", "        ", 
   RowBox[{
    RowBox[{"\"\<URL\>\"", "\t\t\t\t", "->", "  ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"ToString", "@", 
        RowBox[{"StringForm", "[", 
         RowBox[{
         "\"\<https://graph.facebook.com/v2.3/`1`/photos\>\"", ",", " ", 
          RowBox[{"formatuser", "[", "##", "]"}]}], "]"}]}], "&"}], ")"}]}], 
    ",", "\n", "        ", 
    RowBox[{"\"\<PathParameters\>\"", "\t", "->", " ", 
     RowBox[{"{", "\"\<UserID\>\"", "}"}]}], ",", "\n", "        ", 
    RowBox[{"\"\<Parameters\>\"", "\t\t", "->", " ", 
     RowBox[{"{", "\"\<limit\>\"", "}"}]}], ",", "\n", "        ", 
    RowBox[{"\"\<HTTPSMethod\>\"", "\t\t", "->", " ", "\"\<GET\>\""}], ",", 
    "\n", "        ", 
    RowBox[{"\"\<ResultsFunction\>\"", "\t", "->", " ", "facebookimport"}], 
    ",", "\n", "        ", 
    RowBox[{
    "\"\<RequiredPermissions\>\"", ":>", " ", "$facebookphotopermissions"}]}],
    "\n", "    ", "}"}]}]}], "Code",
 CellChangeTimes->{
  3.709949180176167*^9},ExpressionUUID->"66f5b3cd-2f87-4bc0-b2e8-\
d8e78773073c"],

Cell[TextData[{
 "Note that the ",
 Cell[BoxData["\"\<URL\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "d24afdb2-f4a0-4d48-abc2-183371532145"],
 " is now a function. I tend to use ",
 ButtonBox["URLBuild",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/URLBuild"],
 " over the ",
 ButtonBox["StringForm",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/StringForm"],
 " calls one tends to see in the paclets. "
}], "Text",
 CellChangeTimes->{{3.7099491937175207`*^9, 
  3.709949292996464*^9}},ExpressionUUID->"b50dcb10-daab-451f-b3c7-\
ffe404f94cd1"],

Cell[TextData[{
 "Also we now have ",
 Cell[BoxData["\"\<PathParameters\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "dbf20b82-1e4c-4756-8868-6da2ed525bfa"],
 " which get passed to ",
 Cell[BoxData["\"\<URL\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "dd9e7a64-9a47-4c0c-8a79-a73235bcf9d4"],
 " (note that ",
 Cell[BoxData["\"\<PathParameters\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "bdd1b0ff-476e-41d1-814f-6830311aba07"],
 " can be added to the ",
 Cell[BoxData["\"\<RequiredParameters\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "f4f29ad4-e329-4b50-bbb1-9078820170e2"],
 " list)."
}], "Text",
 CellChangeTimes->{{3.709949298023354*^9, 
  3.709949340323402*^9}},ExpressionUUID->"2dee8e76-b978-4195-b26e-\
f396edb099b3"],

Cell[TextData[{
 "And we have ",
 Cell[BoxData["\"\<RequiredPermissions\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "7ce694e1-46c4-4f6c-9dce-e7590a9b5f76"],
 " which is there for requesting permissions incrementally. I\
\[CloseCurlyQuote]ve never used. Not sure how it works."
}], "Text",
 CellChangeTimes->{{3.709949343007387*^9, 
  3.709949380906557*^9}},ExpressionUUID->"717003a4-6dc8-4892-81f4-\
3620ed9248cd"],

Cell[TextData[{
 "Note that the raw request needs to be a) defined in the basic ",
 Cell[BoxData["$servicenamedata"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "ed888ce7-660a-4707-afd6-35b7c1b05826"],
 " function and b) needs to be added to the ",
 Cell[BoxData["\"\<RawGets\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "db899a86-a456-43d2-890e-0b5e75e3c8fd"],
 "/",
 Cell[BoxData["\"\<RawPosts\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "2922ea04-534e-45a5-b43c-d82b6ec910d2"],
 " section of the ",
 Cell[BoxData["\"\<ClientInfo\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "687d9f0b-7738-4316-acf6-d2ecb8ee462d"],
 "."
}], "Text",
 CellChangeTimes->{{3.709949411806953*^9, 
  3.7099494779916277`*^9}},ExpressionUUID->"e68d4611-cfb6-4e6f-b0f6-\
3d0c4a15e4c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exposed Requests", "Subsubsection",
 CellChangeTimes->{{3.709942691029422*^9, 
  3.709942705908984*^9}},ExpressionUUID->"c517c8b5-7c60-4dbe-8cac-\
6e81fd48929a"],

Cell[TextData[{
 "These raw requests aren\[CloseCurlyQuote]t accessible to the user via ",
 Cell[BoxData["ServiceExecute"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "452b98f3-5ef2-4a9c-98f2-1cdc56fe2a50"],
 ", though. Those exposed requests come via the ",
 Cell[BoxData["$servicenamecookeddata"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "849c2757-ddc2-4016-a81f-2a15e71da77f"],
 " function that\[CloseCurlyQuote]s returned as the second argument of the \
service data list."
}], "Text",
 CellChangeTimes->{{3.709949533990491*^9, 
  3.7099495941685047`*^9}},ExpressionUUID->"0a55cd12-aff8-4a0c-b266-\
eadb72946816"],

Cell["Here\[CloseCurlyQuote]s a sample from the Facebook connection:", "Text",
 CellChangeTimes->{{3.709949894401937*^9, 
  3.709949902365988*^9}},ExpressionUUID->"e058c307-6cef-470f-b8a5-\
2b6d55dafe61"],

Cell[BoxData[
 RowBox[{
  RowBox[{"facebookcookeddata", "[", 
   RowBox[{"\"\<PageData\>\"", ",", "id_", ",", "args_"}], "]"}], ":=", 
  RowBox[{"Block", "[", "\n", "\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rawdata", ",", "params", ",", "data"}], "}"}], ",", "\n", "\t", 
    
    RowBox[{
     RowBox[{"params", "=", 
      RowBox[{"filterparameters", "[", 
       RowBox[{"args", ",", 
        RowBox[{"getallparameters", "[", "\"\<RawPageData\>\"", "]"}]}], 
       "]"}]}], ";", "\n", "\t\t", 
     RowBox[{"params", "=", 
      RowBox[{"params", "/.", 
       RowBox[{
        RowBox[{"HoldPattern", "[", 
         RowBox[{"Rule", "[", 
          RowBox[{"a_", ",", "b_Integer"}], "]"}], "]"}], ":>", 
        RowBox[{"Rule", "[", 
         RowBox[{"a", ",", 
          RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}]}], ";", "\n", "\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{"params", ",", "\"\<PageID\>\""}], "]"}], ",", 
       RowBox[{
        RowBox[{"Message", "[", 
         RowBox[{
          RowBox[{"ServiceExecute", "::", "nparam"}], ",", "\"\<PageID\>\""}],
          "]"}], ";", 
        RowBox[{"Throw", "[", "$Failed", "]"}]}]}], "]"}], ";", "\n", "\t", 
     RowBox[{"rawdata", "=", 
      RowBox[{"OAuthClient`rawoauthdata", "[", 
       RowBox[{"id", ",", "\"\<RawPageData\>\"", ",", 
        RowBox[{"Join", "[", 
         RowBox[{"params", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<fields\>\"", "->", 
            RowBox[{"StringJoin", "[", 
             RowBox[{"Riffle", "[", 
              RowBox[{"facebookpagefields", ",", "\"\<,\>\""}], "]"}], 
             "]"}]}], "}"}]}], "]"}]}], "]"}]}], ";", "      ", "\n", "\t", 
     RowBox[{"data", "=", 
      RowBox[{"facebookimport", "[", "rawdata", "]"}]}], ";", "\n", "\t", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "data", "]"}], ",", 
         RowBox[{
          RowBox[{"HoldPattern", "[", 
           RowBox[{"Rule", "[", 
            RowBox[{"a_String", ",", " ", "b_"}], "]"}], "]"}], " ", ":>", 
          " ", 
          RowBox[{"Rule", "[", 
           RowBox[{"a", ",", 
            RowBox[{"pagedataparse", "[", 
             RowBox[{"b", ",", "a"}], "]"}]}], "]"}]}], ",", "Infinity"}], 
        "]"}], "/.", 
       RowBox[{"Thread", "[", 
        RowBox[{"facebookpagefields", "->", "facebookpageNames"}], "]"}]}], 
      "]"}]}]}], "   ", "\n", "]"}]}]], "Code",
 CellChangeTimes->{
  3.709949903719612*^9},ExpressionUUID->"b8e52edd-dd92-4c39-8ae2-\
a8435f3443bb"],

Cell["\<\
Note that this is a real function, not just a list of parameters. And in fact \
these requests can be arbitrary functions that never go to the web. In all of \
my connections I add extra meta requests that tell me about the object \
itself, such as what parameters its requests can take.\
\>", "Text",
 CellChangeTimes->{{3.7099499055391827`*^9, 3.709949937525083*^9}, {
  3.709949994645419*^9, 
  3.709950090384511*^9}},ExpressionUUID->"c0617bc7-75cc-4597-9871-\
0f2ea542ce71"],

Cell["But the basic format looks like this:", "Text",
 CellChangeTimes->{{3.709950094250505*^9, 
  3.7099501072718163`*^9}},ExpressionUUID->"68773f9f-88d8-42f8-9ce5-\
e2650c69181c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$servicenamecookeddata", "[", 
   RowBox[{"\"\<Request\>\"", ",", "id_", ",", "args_"}], "]"}], ":=", "\n", 
  "\t", 
  RowBox[{"Block", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rawdata", ",", "params"}], "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"params", "=", 
      RowBox[{"preProcessArguments", "[", "args", "]"}]}], ";", "\n", "\t\t", 
     
     RowBox[{"rawdata", "=", 
      RowBox[{"OAuthClient`rawoauthdata", "[", 
       RowBox[{"id", ",", "\"\<RawRequest\>\"", ",", "params"}], "]"}]}], ";",
      "    ", "\n", "\t\t", 
     RowBox[{"postProcessData", "[", "rawdata", "]"}]}]}], "\n", "\t", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.7099501088676147`*^9, 
  3.709950248989895*^9}},ExpressionUUID->"3f9b96c2-555f-4e2b-ab16-\
7f7e7bc2f29d"],

Cell[TextData[{
 "Where that ",
 ButtonBox["OAuthClient`rawoauthdata",
  BaseStyle->"Link",
  ButtonData->"paclet:OAuthClient/ref/rawoauthdata"],
 " will be ",
 ButtonBox["KeyClient`rawkeydata",
  BaseStyle->"Link",
  ButtonData->"paclet:KeyClient/ref/rawkeydata"],
 " for services that use API keys."
}], "Text",
 CellChangeTimes->{{3.709950231883473*^9, 
  3.7099503235724382`*^9}},ExpressionUUID->"de5f4fee-2f5d-4d1a-82b2-\
57bf7d22f356"],

Cell[TextData[{
 "And analogously to the raw request, this request a) needs to defined in ",
 Cell[BoxData["$servicenamecookeddata"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "d8fefdbc-2e73-4c3d-abbe-6723a903c501"],
 " and b) needs to be added to the ",
 Cell[BoxData["\"\<Gets\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "dc39d5cf-f11f-47d9-8782-54d8593e4f31"],
 "/",
 Cell[BoxData["\"\<Posts\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "c163025e-6a31-4648-b31a-bbcfb180c1e5"],
 " section of the ",
 Cell[BoxData["\"\<ClientInfo\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "63feea69-5072-4654-8535-6ddae456bc2f"],
 "."
}], "Text",
 CellChangeTimes->{{3.709950339984627*^9, 
  3.7099503927197*^9}},ExpressionUUID->"853fc23e-24f2-416c-86c5-738a6b93ca83"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Custom Service Connection", "Section",
 CellChangeTimes->{{3.709942470387292*^9, 
  3.7099424744366207`*^9}},ExpressionUUID->"cb6282cd-dea3-4f7d-bddd-\
685170d240bc"],

Cell["\<\
All of this is nice to know for making them by hand, but generally it\
\[CloseCurlyQuote]s not worth it to fill all that out just to get an API \
connection. That\[CloseCurlyQuote]s why I built a function that can fill all \
of that out from a template. The basic idea is that there are template files \
that will programmatically configure a service connection if given the \
appropriate parameters and so the function simply needs to format the \
parameters appropriately.\
\>", "Text",
 CellChangeTimes->{{3.7099505439370327`*^9, 3.7099506018551807`*^9}, {
  3.709987589007615*^9, 3.70998760739746*^9}, {3.709987804647435*^9, 
  3.709987846719027*^9}},ExpressionUUID->"2600a8ab-0e2d-4deb-b704-\
6c08fd723217"],

Cell[CellGroupData[{

Cell["Template Files", "Subsection",
 CellChangeTimes->{{3.709942721577573*^9, 
  3.7099427333968554`*^9}},ExpressionUUID->"fb0bb5af-2584-4332-a1b4-\
780e30cf46f8"],

Cell["We\[CloseCurlyQuote]ll ignore load.m because it\[CloseCurlyQuote]s so \
basic.", "Text",
 CellChangeTimes->{{3.7099879166916*^9, 
  3.709987952447517*^9}},ExpressionUUID->"9b79f944-adf9-48a6-81ef-\
85b6a1df0ca7"],

Cell[CellGroupData[{

Cell["$ServiceConnectionLoad.m", "Subsubsection",
 CellChangeTimes->{{3.709987908435919*^9, 
  3.709987914162507*^9}},ExpressionUUID->"112894f7-18a3-41ff-8448-\
0f2881c5a947"],

Cell["The main thing we change here is to add the block:", "Text",
 CellChangeTimes->{{3.709987973496007*^9, 
  3.709987979511079*^9}},ExpressionUUID->"d7ac4aa6-2e0d-45a6-bb0c-\
2e5a3705aa10"],

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"dir", "=", 
     RowBox[{"DirectoryName", "[", "System`Private`$InputFileName", "]"}]}], 
    "}"}], ",", "\n", "\t", 
   RowBox[{
    RowBox[{"Switch", "[", 
     RowBox[{"$ServiceConnectionClientName", ",", "\n", "\t\t", 
      RowBox[{
      "\"\<OAuthClient\>\"", "|", "\"\<oauthclient\>\"", "|", 
       "\"\<OauthClient\>\""}], ",", "\n", "\t\t\t", 
      "OAuthClient`addOAuthservice", ",", "\n", "\t\t", 
      RowBox[{"\"\<KeyClient\>\"", "|", "\"\<keyclient\>\""}], ",", "\n", 
      "\t\t\t", "KeyClient`addKeyservice", ",", "\n", "\t\t", 
      RowBox[{"\"\<OtherClient\>\"", "|", "\"\<otherclient\>\""}], ",", "\n", 
      "\t\t\t", "OtherClient`addOtherservice"}], "\n", "\t\t", "]"}], "[", 
    RowBox[{"\"\<$ServiceConnection\>\"", ",", "dir"}], "]"}]}], "\n", "\t", 
  "]"}]], "Code",
 CellChangeTimes->{{3.7099879815228033`*^9, 
  3.709987982994463*^9}},ExpressionUUID->"c1ec9d24-bf16-4521-ae5d-\
a5447b2d46d4"],

Cell["\<\
Where the client name will be provided by the user and formatted by the \
function.\
\>", "Text",
 CellChangeTimes->{{3.709987989962871*^9, 
  3.7099880117589703`*^9}},ExpressionUUID->"1cb32501-10d8-4c19-a765-\
718048be9670"]
}, Open  ]],

Cell[CellGroupData[{

Cell["$ServiceConnectionFunctions.m", "Subsubsection",
 CellChangeTimes->{{3.709988015974334*^9, 
  3.709988022502141*^9}},ExpressionUUID->"85079809-0455-4aca-ab5d-\
7f830522ea4e"],

Cell["\<\
This is a standard file that is in many service connections (although not \
either of the two we looked at). Looking at some of what we have in the \
template:\
\>", "Text",
 CellChangeTimes->{{3.709988024157977*^9, 3.709988057757572*^9}, {
  3.70998836386373*^9, 
  3.709988364751864*^9}},ExpressionUUID->"480bc294-ea90-4eee-b2a4-\
8994d0b1d111"],

Cell[BoxData[{
 RowBox[{"$ServiceConnectionHelperNames", "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"OAuth", " ", "loopback"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$serviceconnectionprivateoauthpagelink", "::", "usage"}], "=", 
   "\n", "\t", 
   "\"\<A local redirect URI that tells the user what the access code to copy \
is\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$serviceconnectionprivateoauthcloudlink", "::", "usage"}], "=", 
   "\n", "\t", 
   "\"\<A cloud exported redirect URI that tells the user what the access \
code to copy is\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$serviceconnectionprivateoauthtokenfile", "::", "usage"}], "=", 
   "\n", "\t", 
   "\"\<A fake OAuth token for when a real OAuth token isn't needed by the \
OAuth client is desired\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"$$serviceconnectionaccesscodecloudlink", "::", "usage"}], "=", 
  "\n", "\t", 
  "\"\<A static cloud object URL for getting code copied\>\""}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$$serviceconnectionaccesstokencloudlink", "::", "usage"}], "=", 
   "\n", "\t", 
   "\"\<A static cloud object URL for getting an access_token copied\>\""}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{"Request", " ", "Formatting"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$serviceconnectionreformatbodydata", "::", "usage"}], "=", "\n", 
   "\t", "\"\<Reformats the BodyData parameter of a request. Used by default \
for KeyClient\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$serviceconnectionreformatmultipartbodydata", "::", "usage"}], 
   "=", "\n", "\t", 
   "\"\<Reformats BodyData into a MultipartData made of metadata and content \
fragment\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$serviceconnectionpatchedurlfetchblock", "::", "usage"}], "=", 
   "\n", "\t", 
   "\"\<A block that patches $$serviceconnectionurlfetchpatch into URLFetch\>\
\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$serviceconnectionpatchmultipartparams", "::", "usage"}], "=", 
   "\n", "\t", "\"\<A block that sets the patching for multipart data\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"$$serviceconnectionlastrequest", "::", "usage"}], "=", "\n", 
   "\t", "\"\<A symbol that temporariliy gets the request association when \
using URLFetch override\>\""}], ";"}]}], "Code",
 CellChangeTimes->{{3.709988078321732*^9, 3.709988103565688*^9}, 
   3.709988371680545*^9},ExpressionUUID->"57f76ac0-a17f-42a0-8a95-\
b48cc427dd6a"],

Cell[TextData[{
 "We see there\[CloseCurlyQuote]s a block for custom functions: ",
 Cell[BoxData["$ServiceConnectionHelperNames"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "02d72baf-4091-4707-a3c4-8fa81700f918"],
 " but also a bunch of stuff that will be common to all these connections \
(although renamed to avoid shadowing)."
}], "Text",
 CellChangeTimes->{{3.709988251581462*^9, 3.709988271947966*^9}, {
  3.709988311744018*^9, 
  3.709988347304029*^9}},ExpressionUUID->"88e7cae2-c92c-4c16-b9af-\
005cabaa255e"],

Cell[TextData[{
 "There\[CloseCurlyQuote]s stuff for forcing parameters into a ",
 Cell[BoxData["URLFetch"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "b64a031c-7051-4a7d-9b64-f78ae737d372"],
 " which can be important for things like multi-part requests, and some \
functions for configuring call-back URLs plus two such URLs for code and \
access_token copying. In the future stuff could be added for using the \
channel framework to automatically pull in auth tokens, etc."
}], "Text",
 CellChangeTimes->{{3.7099883786728354`*^9, 3.7099884194111643`*^9}, {
  3.709988501236472*^9, 
  3.709988615612336*^9}},ExpressionUUID->"386bb991-7f79-4e54-9f94-\
5ca2a2667725"],

Cell["This file is where most of the customization happens.", "Text",
 CellChangeTimes->{{3.709988672107663*^9, 
  3.709988684331406*^9}},ExpressionUUID->"513689c6-2951-403a-a378-\
826276a8ec5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["$ServiceConnection.m", "Subsubsection",
 CellChangeTimes->{{3.709988693924232*^9, 
  3.7099886989312143`*^9}},ExpressionUUID->"4f9c407c-76b2-4ed5-a664-\
25f0da7e7b5b"],

Cell[TextData[{
 "This file provides a programmatic template for formatting these \
connections. The basic premise is that requests will be formatted as lists of \
rules, and the package will loop over these lists, filling out and \
customizing the ",
 Cell[BoxData["$servicenamedata"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "09737e1a-6d0b-4de8-8e03-c513841246c2"],
 " and ",
 Cell[BoxData["$servicenamecookeddata"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "50e92c1d-ca89-4c16-98a5-6bef0675d383"],
 " functions."
}], "Text",
 CellChangeTimes->{{3.709988700397629*^9, 
  3.709988799561522*^9}},ExpressionUUID->"2798089b-8024-4c64-b46f-\
58b7ad9758b3"],

Cell["\<\
In the cooked data functions it determines whether a request has a raw \
request underpinning it and, if so, uses a version of:\
\>", "Text",
 CellChangeTimes->{{3.709988837867283*^9, 
  3.709988891069908*^9}},ExpressionUUID->"d0dafa97-8471-4b5f-a94b-\
cb49e897214c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$servicenamecookeddata", "[", 
   RowBox[{"\"\<Request\>\"", ",", "id_", ",", "args_"}], "]"}], ":=", "\n", 
  "\t", 
  RowBox[{"Block", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rawdata", ",", "params"}], "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"params", "=", 
      RowBox[{"preProcessArguments", "[", "args", "]"}]}], ";", "\n", "\t\t", 
     
     RowBox[{"rawdata", "=", 
      RowBox[{"OAuthClient`rawoauthdata", "[", 
       RowBox[{"id", ",", "\"\<RawRequest\>\"", ",", "params"}], "]"}]}], ";",
      "    ", "\n", "\t\t", 
     RowBox[{"postProcessData", "[", "rawdata", "]"}]}]}], "\n", "\t", 
   "]"}]}]], "Code",
 CellChangeTimes->{
  3.709988893136775*^9},ExpressionUUID->"fc61fe14-e1dd-40a6-a853-\
4379c6bb2735"],

Cell["with pre and post provided", "Text",
 CellChangeTimes->{{3.709988893826659*^9, 
  3.709988900533744*^9}},ExpressionUUID->"5baee1e0-a449-4faf-8c7e-\
b0e5be1fc15e"],

Cell[TextData[{
 "If there\[CloseCurlyQuote]s no raw request, it provides some basic ",
 Cell[BoxData["\"\<RequiredParameters\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "e8807837-e930-4533-827f-4650a4597317"],
 " checking and some other useful stuff, but basically just calls the \
function on the object and request parameters."
}], "Text",
 CellChangeTimes->{{3.709988904080937*^9, 3.709988968160673*^9}, {
  3.709989081976674*^9, 
  3.7099890937993393`*^9}},ExpressionUUID->"d46bbc78-75a0-4c02-9866-\
0a7234541135"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Paclet Creation", "Subsubsection",
 CellChangeTimes->{{3.70998910852674*^9, 
  3.7099891119825706`*^9}},ExpressionUUID->"a2e31e34-db2e-44d3-8f5a-\
6ffc2b5ffd43"],

Cell["\<\
Then the function just packs up the paclet with the appropriate PacletInfo.m \
so it can be installed.\
\>", "Text",
 CellChangeTimes->{{3.70998911486812*^9, 
  3.709989147504281*^9}},ExpressionUUID->"ccd7a5cd-132a-46aa-a4c9-\
a79904ccafe9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Template Notebook", "Subsection",
 CellChangeTimes->{{3.709942744332169*^9, 
  3.7099427471016893`*^9}},ExpressionUUID->"dae7034d-c5d1-4815-b80e-\
2dc41e986cee"],

Cell[TextData[{
 "Given that there\[CloseCurlyQuote]re lots of parameters to track and fill \
out it makes sense to run this as a ",
 ButtonBox["template notebook",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://raw.githubusercontent.com/b3m2a1/mathematica-BTools/master/\
Templates/ServiceConnectionTemplate.nb?_download=True"], None},
  ButtonNote->
   "https://raw.githubusercontent.com/b3m2a1/mathematica-BTools/master/\
Templates/ServiceConnectionTemplate.nb?_download=True"],
 "."
}], "Text",
 CellChangeTimes->{{3.7099891574151583`*^9, 3.709989219406178*^9}, {
  3.709996473298435*^9, 3.709996473303402*^9}, {3.7099965141215878`*^9, 
  3.7099965190716543`*^9}, {3.709996556570821*^9, 3.709996592787632*^9}, {
  3.709997133419839*^9, 
  3.709997133858646*^9}},ExpressionUUID->"90f9734c-ff66-4e8f-9e2a-\
6ed83e386260"],

Cell["\<\
The template is divided into sections roughly corresponding to the sections \
of the $ServiceConnection.m file, they are:\
\>", "Text",
 CellChangeTimes->{{3.709997238395275*^9, 3.709997250285572*^9}, {
  3.709997316015312*^9, 3.7099973595308933`*^9}, {3.709997464048902*^9, 
  3.70999753432001*^9}, {3.70999766558457*^9, 
  3.709997665837473*^9}},ExpressionUUID->"7e48fc77-970d-4a8e-becb-\
37e2dfec2b3a"],

Cell[CellGroupData[{

Cell["\<\
Basics - the name of the service, the prefix to stick onto function names, \
and the basic description\
\>", "Item",
 CellChangeTimes->{{3.7099976786132307`*^9, 3.709997720878661*^9}, {
  3.709997789874679*^9, 
  3.709997790258284*^9}},ExpressionUUID->"c3b95423-6bb6-43cf-b687-\
104e900e01fd"],

Cell[TextData[{
 "Connection Info - the ",
 Cell[BoxData["\"\<ClientInfo\>\""], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "c7ea459c-3053-42ba-9862-ab2240bbbf19"],
 " setup, 4 different templates are provided for this"
}], "Item",
 CellChangeTimes->{{3.7099976786132307`*^9, 
  3.709997788514996*^9}},ExpressionUUID->"733818d8-5c14-48ad-9887-\
b329f9730497"],

Cell["\<\
Helper Functions - functions to be inserted into the \
$ServiceConnectionFunctions.m file for access throughout the connection. A \
few common functions are provided.\
\>", "Item",
 CellChangeTimes->{{3.709997796656823*^9, 
  3.709997840065961*^9}},ExpressionUUID->"6439a2d0-1439-4fa7-9bed-\
e6dec6f05b2d"],

Cell["\<\
Raw Import Functions - the setup for the RawRequests each is formatted like:\
\>", "Item",
 CellChangeTimes->{{3.709997796656823*^9, 
  3.709997893281766*^9}},ExpressionUUID->"0fc63208-549b-4bef-9aa6-\
459978a648a1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$importFuncs", "[", 
    RowBox[{
     RowBox[{"\"\<Raw\>\"", "<>"}], "<", "name", ">"}], "]"}], "=", 
   "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"base", "=", "$serviceBase"}], ",", "\[IndentingNewLine]", 
       RowBox[{"stdParams", "=", "$serviceBaseParameters"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<URL\>\"", "\[Rule]"}], 
       RowBox[{"(*", 
        RowBox[{"<", "URL", ">", " ", 
         RowBox[{"or", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"URLBuild", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"<", " ", "Params", " ", ">"}], ",", 
               RowBox[{"<", "Slots", ">"}], ",", " ", 
               RowBox[{
                RowBox[{"<", "Params", ">"}], " ", "..."}]}], "}"}], "]"}], 
            "&"}], ")"}], " ", "for", " ", "processes", " ", "one", " ", 
          "can", " ", "use", " ", "`key`", " ", "to", " ", "insert", " ", "a",
           " ", "keyword", " ", "parameter"}]}], "*)"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Method\>\"", "\[Rule]"}], 
       RowBox[{"(*", " ", 
        RowBox[{
        "\"\<Get\>\"", ",", " ", "\"\<Post\>\"", ",", " ", "\"\<Delete\>\"", 
         ",", " ", 
         RowBox[{
          RowBox[{"etc", ".", " ", "Defaults"}], " ", "to", " ", 
          "\"\<Get\>\""}]}], "*)"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Path\>\"", "\[Rule]"}], 
       RowBox[{"(*", " ", 
        RowBox[{
        "Parameters", " ", "that", " ", "will", " ", "be", " ", "inserted", 
         " ", "in", " ", "the", " ", "URL", " ", 
         RowBox[{"(", 
          RowBox[{"in", " ", "sequential", " ", "order"}], ")"}]}], " ", 
        "*)"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Parameters\>\"", "->"}], 
       RowBox[{"(*", " ", 
        RowBox[{
        "Parameters", " ", "that", " ", "will", " ", "be", " ", "passed", " ",
          "as", " ", "Parameters", " ", "to", " ", "the", " ", "URLFetch", 
         " ", "function"}], " ", "*)"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Required\>\"", "\[Rule]"}], " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "the", " ", "arguments", " ", "that", " ", "will", " ", "be", " ", 
         "required"}], " ", "*)"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Headers\>\"", "\[Rule]"}], " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Headers", " ", "that", " ", "will", " ", "be", " ", "passed", " ", 
         "by", " ", "default"}], " ", "*)"}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Function\>\"", "\[Rule]"}]}], 
      RowBox[{"(*", " ", 
       RowBox[{
       "The", " ", "function", " ", "used", " ", "to", " ", "import", " ", 
        "the", " ", "results"}], " ", "*)"}], "\[IndentingNewLine]", "}"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.7099978850112553`*^9, 
  3.709997885461843*^9}},ExpressionUUID->"6ddabd03-5d63-4521-b497-\
8ef330d93145"],

Cell["\<\
Cooked Functions - the functions that implement the actual requests. These \
look like:\
\>", "Item",
 CellChangeTimes->{{3.709997909001004*^9, 
  3.709997935025605*^9}},ExpressionUUID->"9f0093eb-1839-4e42-9d98-\
61f8344eaa51"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"$cookedFuncs", "[", 
    RowBox[{"<", "Name", ">"}], "]"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Call\>\"", "\[Rule]", 
      RowBox[{"Raw", "<", "Name", ">"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Pre\>\"", "\[Rule]", 
      RowBox[{"<", 
       RowBox[{"Preprocess", " ", "Parameters", " ", "Function"}], ">"}]}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Import\>\"", "->", 
      RowBox[{"<", 
       RowBox[{"Import", " ", "Function"}], ">"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Post\>\"", "\[Rule]", 
      RowBox[{"<", 
       RowBox[{"Post", " ", "Process", " ", "Dataset"}], ">"}]}]}], 
    "\[IndentingNewLine]", "}"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.709997936403098*^9, 
  3.7099979389509287`*^9}},ExpressionUUID->"e6580423-6e3f-4f57-92b1-\
e91626684318"],

Cell[TextData[{
 "Paclet Creation - the setup for the paclet (with a section for adding a \
service connection icon). This section finally calls ",
 Cell[BoxData["CustomServiceConnection"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "ec4a8267-8e5f-491d-b7f7-68b03de82214"],
 " to build the paclet."
}], "Item",
 CellChangeTimes->{{3.709997955640561*^9, 
  3.7099980072227793`*^9}},ExpressionUUID->"8dfffc00-f684-43f1-a3d5-\
754dc8972982"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", "Subsection",
 CellChangeTimes->{{3.709998087195045*^9, 
  3.709998088667411*^9}},ExpressionUUID->"2368e8f6-dc78-432b-ac4d-\
640df685f6cb"],

Cell["\<\
The template notebook also provides a testing section so you can check that \
your connection is working as it should. The core of this is a function that \
will reload your paclet data:\
\>", "Text",
 CellChangeTimes->{{3.709998075311005*^9, 3.709998117971023*^9}, {
  3.709998532033441*^9, 
  3.709998564414339*^9}},ExpressionUUID->"7d321eed-ebec-4280-be7a-\
7724ff89c20a"],

Cell[BoxData[
 RowBox[{"ServiceConnections`Private`findandloadServicePaclet", "[", 
  "$serviceName", "]"}]], "Code",
 CellChangeTimes->{3.709998566145011*^9, 
  3.709998600589053*^9},ExpressionUUID->"12bf8fb6-5964-49e5-a493-\
79cfeb34864b"],

Cell[TextData[{
 "But if you need to change your client info (say you added a request) this \
actually won\[CloseCurlyQuote]t suffice as the system calls ",
 ButtonBox["Once",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Once"],
 ". For that, instead, you\[CloseCurlyQuote]ll need to actually clear the \
stored data:"
}], "Text",
 CellChangeTimes->{{3.709998569857574*^9, 
  3.709998658388504*^9}},ExpressionUUID->"a347039f-01ab-4ebb-bb5e-\
8e2b4c34eb15"],

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"func", "=", 
     RowBox[{"$client", "<>", "\"\<Client`Private`\>\"", "<>", 
      RowBox[{"ToLowerCase", "[", "$client", "]"}], "<>", 
      "\"\<$servicedata\>\""}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Quiet", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Once", "[", 
       RowBox[{"func", "[", "$serviceName", "]"}], "]"}], "=."}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"$so", "//", "ServiceDisconnect"}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]", "]"}]], "Code",
 CellChangeTimes->{{3.7099986601994*^9, 
  3.7099986634202547`*^9}},ExpressionUUID->"fa97b891-1b19-4884-8943-\
966da089dc29"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Paclet Distribution", "Subsection",
 CellChangeTimes->{{3.7099427609973583`*^9, 3.709942773180663*^9}, {
  3.709942817394085*^9, 
  3.709942820590866*^9}},ExpressionUUID->"6aa3c103-f97f-414a-a6ea-\
d87432c8744d"],

Cell[TextData[{
 "Once you\[CloseCurlyQuote]ve stress tested your connection, you can move on \
to distributing it to others. This uses ",
 Cell[BoxData["PacletUpload"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "4b983a37-0535-4373-9096-c7c4fffb0718"],
 " to place the paclet in the cloud where others can access it:"
}], "Text",
 CellChangeTimes->{{3.709998669556978*^9, 3.709998720240046*^9}, {
  3.7099989648659973`*^9, 
  3.709998984864881*^9}},ExpressionUUID->"66fd965c-3dc8-453b-8751-\
182558234b32"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"PacletUpload", "[", 
     RowBox[{"\"\<ServiceConnection_\>\"", "<>", "$serviceName"}], "]"}], "//", 
    RowBox[{"Key", "[", "\"\<PacletFiles\>\"", "]"}]}], "//", "First"}], "//",
   "First"}]], "Code",
 CellChangeTimes->{
  3.709998990371505*^9},ExpressionUUID->"a486d557-6fa9-4149-95c2-\
d86f009c2de7"],

Cell[TextData[{
 "Then all others need to do is call ",
 ButtonBox["PacletInstall",
  BaseStyle->"Link",
  ButtonData->"paclet:PacletManager/ref/PacletInstall"],
 " on that link and they\[CloseCurlyQuote]ll be able to use your connection \
with ",
 Cell[BoxData["ServiceConnect"], "InlineInput",
  FormatType->"StandardForm",ExpressionUUID->
  "ebc65eff-4555-42c7-a60a-b71c94adff25"],
 "."
}], "Text",
 CellChangeTimes->{{3.70999899588829*^9, 
  3.709999035154626*^9}},ExpressionUUID->"37fb1cdf-e608-4dc4-a317-\
799acc6c9fcf"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 755},
WindowMargins->{{253, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, \
2017)",
StyleDefinitions->FrontEnd`FileName[{"BTools"}, "PelicanMarkdown.nb", 
  CharacterEncoding -> "UTF-8"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "request-formatting"->{
  Cell[169461, 3056, 199, 3, 
  44, "Subsection", "ExpressionUUID" -> "7b72d2ad-23c3-4b83-a46e-c9489d065d02",
   CellTags->"request-formatting"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"request-formatting", 205407, 4029}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1649, 38, 228, "Metadata", "ExpressionUUID" -> \
"0b12ecc2-0b73-4726-9d87-4b9e0040b345"],
Cell[CellGroupData[{
Cell[2232, 62, 1008, 24, 35, "Subsubsection", "ExpressionUUID" -> \
"bf902f8a-ed08-4f8a-9dfd-154c47af8f15"],
Cell[3243, 88, 795, 15, 70, "Text", "ExpressionUUID" -> \
"6568c468-889d-48df-ba9d-1a5ee02898da"],
Cell[4041, 105, 643, 13, 70, "Text", "ExpressionUUID" -> \
"4ee4307e-77d8-4943-8124-9cd64abceb6a"],
Cell[4687, 120, 805, 20, 49, "Text", "ExpressionUUID" -> \
"efe3a3d5-9334-4f2f-94c0-efb173da6c80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5529, 145, 173, 3, 64, "Section", "ExpressionUUID" -> \
"b02a902b-3126-4d51-8b8a-167e109a0b53"],
Cell[5705, 150, 219, 5, 30, "Text", "ExpressionUUID" -> \
"77a3c49b-399a-4b81-bd9a-fd6f0754e6a8"],
Cell[5927, 157, 276, 6, 52, "Code", "ExpressionUUID" -> \
"02a7eb09-d7ea-498e-bbf4-4ee16dd1678e"],
Cell[6206, 165, 141872, 2332, 297, "Text", "ExpressionUUID" -> \
"6db229a5-5bea-4dae-b175-1ee182e29124"],
Cell[148081, 2499, 516, 10, 49, "Text", "ExpressionUUID" -> \
"36552f68-89fb-43f5-a928-64ed3dcbb2aa"],
Cell[CellGroupData[{
Cell[148622, 2513, 156, 3, 44, "Subsection", "ExpressionUUID" -> \
"26e60c86-c050-4bae-bc15-a04ed2a080c7"],
Cell[148781, 2518, 186, 3, 30, "Text", "ExpressionUUID" -> \
"2f634d75-0bf8-4b7c-a028-6aa158f15ff7"],
Cell[148970, 2523, 322, 8, 91, "Code", "ExpressionUUID" -> \
"f7e07223-b514-440a-a68e-a6d1def253f9"],
Cell[149295, 2533, 279, 6, 30, "Text", "ExpressionUUID" -> \
"85f0b6d6-b267-4a92-b844-1497cd955c8c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149611, 2544, 212, 4, 44, "Subsection", "ExpressionUUID" -> \
"fcb9a334-a717-4e45-bc4c-9df2f23eaf68"],
Cell[149826, 2550, 174, 3, 30, "Text", "ExpressionUUID" -> \
"1ca191a3-2e57-4a4d-b1a5-be04c464a124"],
Cell[150003, 2555, 1374, 34, 338, "Code", "ExpressionUUID" -> \
"36462b16-89cd-46ca-91d3-6608c5355637"],
Cell[151380, 2591, 680, 16, 53, "Text", "ExpressionUUID" -> \
"91324a38-3d90-459f-a49b-8c8f68bccf6f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152097, 2612, 162, 3, 44, "Subsection", "ExpressionUUID" -> \
"80e682c9-9b99-4a11-adcc-207014b2e1f1"],
Cell[152262, 2617, 443, 11, 49, "Text", "ExpressionUUID" -> \
"123a9cbd-5278-42c2-a472-0ff225dd88b6"],
Cell[152708, 2630, 563, 13, 49, "Text", "ExpressionUUID" -> \
"45eec57c-045b-4239-b231-a0de05873215"],
Cell[153274, 2645, 568, 15, 72, "Code", "ExpressionUUID" -> \
"9feddd53-5a07-4dea-a6c1-aa6668dae678"],
Cell[153845, 2662, 453, 8, 68, "Text", "ExpressionUUID" -> \
"c8eec1d6-8d84-4f44-b3fe-dbddf1e736ee"],
Cell[154301, 2672, 206, 5, 52, "Code", "ExpressionUUID" -> \
"a57de963-fc5a-43f5-bd35-2467306dad2a"],
Cell[154510, 2679, 293, 6, 49, "Text", "ExpressionUUID" -> \
"364003c2-ed98-452f-9238-0c8132cc90cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154840, 2690, 138, 3, 44, "Subsection", "ExpressionUUID" -> \
"b64546fe-7dad-47e5-9c19-ca54485b3208"],
Cell[154981, 2695, 500, 9, 49, "Text", "ExpressionUUID" -> \
"1666f1c5-14ac-4598-9651-ce86564d429b"],
Cell[155484, 2706, 4284, 87, 396, "Code", "ExpressionUUID" -> \
"7fe2768c-037a-4004-80bd-6cbf8103cbc5"],
Cell[159771, 2795, 247, 4, 30, "Text", "ExpressionUUID" -> \
"e1dacac0-376d-4312-a9c2-7aa5de31d8c4"],
Cell[CellGroupData[{
Cell[160043, 2803, 176, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"772dbbed-8a6b-4273-926f-63af3e0168b5"],
Cell[160222, 2808, 280, 6, 30, "Text", "ExpressionUUID" -> \
"b55ef4a8-b966-4995-869f-b069a662938f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[160539, 2819, 186, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"acbbd9ac-636a-4dab-a29f-49bb83639f1b"],
Cell[160728, 2824, 469, 11, 51, "Text", "ExpressionUUID" -> \
"623da3f9-3316-4fce-9214-879e40ca3727"],
Cell[161200, 2837, 333, 9, 30, "Text", "ExpressionUUID" -> \
"2b1bba4c-cf58-46ab-8af4-c6c3c3be38f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161570, 2851, 212, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"231f9ea5-71ce-4727-8d57-fdde70eb3d60"],
Cell[161785, 2857, 303, 7, 30, "Text", "ExpressionUUID" -> \
"0c930668-ed20-4d7b-a5d8-5cc89c87aa12"],
Cell[162091, 2866, 683, 13, 148, "Code", "ExpressionUUID" -> \
"ee641ba0-2685-4154-9f33-9ebcb3a97443"],
Cell[162777, 2881, 421, 8, 49, "Text", "ExpressionUUID" -> \
"16d09ef0-3c24-4480-94b4-07626fca5836"],
Cell[163201, 2891, 809, 18, 70, "Text", "ExpressionUUID" -> \
"db7d7593-2b2f-47e8-8aae-388bf2703b71"],
Cell[164013, 2911, 396, 7, 49, "Text", "ExpressionUUID" -> \
"65310032-30b9-45b9-b33e-fce33f33611a"],
Cell[164412, 2920, 1353, 33, 205, "Code", "ExpressionUUID" -> \
"c78bf844-aa2d-47fb-a76f-cf7019349803"],
Cell[165768, 2955, 336, 7, 49, "Text", "ExpressionUUID" -> \
"8147580c-1ed2-45c5-9631-266f99c6a27c"],
Cell[166107, 2964, 974, 23, 70, "Text", "ExpressionUUID" -> \
"d18fc360-1c2a-4941-86a0-4ef818f45242"],
Cell[167084, 2989, 592, 12, 51, "Text", "ExpressionUUID" -> \
"89165014-b808-415a-ab70-e32041352eae"],
Cell[167679, 3003, 648, 16, 68, "Text", "ExpressionUUID" -> \
"275571e1-5dc6-4130-a77d-a3e75af0ff41"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168364, 3024, 139, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"1bb1ef86-559e-4ac8-8612-1e5c811be706"],
Cell[168506, 3029, 906, 21, 52, "Text", "ExpressionUUID" -> \
"4d3ef449-e1e1-4504-b90b-2a4879fe834d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[169461, 3056, 199, 3, 44, "Subsection", "ExpressionUUID" -> \
"7b72d2ad-23c3-4b83-a46e-c9489d065d02",
 CellTags->"request-formatting"],
Cell[169663, 3061, 633, 12, 50, "Text", "ExpressionUUID" -> \
"05cd40b3-138f-4e29-9322-6dab2072cd27"],
Cell[CellGroupData[{
Cell[170321, 3077, 165, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"dcbcafa2-e817-4180-be0e-ed5c04273ec2"],
Cell[170489, 3082, 254, 4, 30, "Text", "ExpressionUUID" -> \
"3cd943b2-6680-4041-a8c0-04d769193a34"],
Cell[170746, 3088, 970, 25, 167, "Code", "ExpressionUUID" -> \
"819511b3-55f3-459c-87f4-b2a44e961cf8"],
Cell[171719, 3115, 441, 10, 50, "Text", "ExpressionUUID" -> \
"84f2b459-dd5e-4a68-aa10-2c860a73cf76"],
Cell[172163, 3127, 387, 8, 49, "Text", "ExpressionUUID" -> \
"e4b18ad0-1338-43ef-beb2-d2bdd37761e3"],
Cell[172553, 3137, 1282, 31, 205, "Code", "ExpressionUUID" -> \
"66f5b3cd-2f87-4bc0-b2e8-d8e78773073c"],
Cell[173838, 3170, 574, 17, 51, "Text", "ExpressionUUID" -> \
"b50dcb10-daab-451f-b3c7-ffe404f94cd1"],
Cell[174415, 3189, 828, 21, 51, "Text", "ExpressionUUID" -> \
"2dee8e76-b978-4195-b26e-f396edb099b3"],
Cell[175246, 3212, 440, 10, 50, "Text", "ExpressionUUID" -> \
"717003a4-6dc8-4892-81f4-3620ed9248cd"],
Cell[175689, 3224, 858, 21, 51, "Text", "ExpressionUUID" -> \
"e68d4611-cfb6-4e6f-b0f6-3d0c4a15e4c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[176584, 3250, 167, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"c517c8b5-7c60-4dbe-8cac-6e81fd48929a"],
Cell[176754, 3255, 660, 14, 70, "Text", "ExpressionUUID" -> \
"0a55cd12-aff8-4a0c-b266-eadb72946816"],
Cell[177417, 3271, 204, 3, 30, "Text", "ExpressionUUID" -> \
"e058c307-6cef-470f-b8a5-2b6d55dafe61"],
Cell[177624, 3276, 2619, 67, 205, "Code", "ExpressionUUID" -> \
"b8e52edd-dd92-4c39-8ae2-a8435f3443bb"],
Cell[180246, 3345, 488, 9, 68, "Text", "ExpressionUUID" -> \
"c0617bc7-75cc-4597-9871-0f2ea542ce71"],
Cell[180737, 3356, 181, 3, 30, "Text", "ExpressionUUID" -> \
"68773f9f-88d8-42f8-9ce5-e2650c69181c"],
Cell[180921, 3361, 823, 21, 167, "Code", "ExpressionUUID" -> \
"3f9b96c2-555f-4e2b-ab16-7f7e7bc2f29d"],
Cell[181747, 3384, 441, 13, 32, "Text", "ExpressionUUID" -> \
"de5f4fee-2f5d-4d1a-82b2-57bf7d22f356"],
Cell[182191, 3399, 853, 20, 51, "Text", "ExpressionUUID" -> \
"853fc23e-24f2-416c-86c5-738a6b93ca83"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[183105, 3426, 172, 3, 64, "Section", "ExpressionUUID" -> \
"cb6282cd-dea3-4f7d-bddd-685170d240bc"],
Cell[183280, 3431, 722, 12, 87, "Text", "ExpressionUUID" -> \
"2600a8ab-0e2d-4deb-b704-6c08fd723217"],
Cell[CellGroupData[{
Cell[184027, 3447, 164, 3, 44, "Subsection", "ExpressionUUID" -> \
"fb0bb5af-2584-4332-a1b4-780e30cf46f8"],
Cell[184194, 3452, 218, 4, 30, "Text", "ExpressionUUID" -> \
"9b79f944-adf9-48a6-81ef-85b6a1df0ca7"],
Cell[CellGroupData[{
Cell[184437, 3460, 175, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"112894f7-18a3-41ff-8448-0f2881c5a947"],
Cell[184615, 3465, 192, 3, 30, "Text", "ExpressionUUID" -> \
"d7ac4aa6-2e0d-45a6-bb0c-2e5a3705aa10"],
Cell[184810, 3470, 1008, 22, 227, "Code", "ExpressionUUID" -> \
"c1ec9d24-bf16-4521-ae5d-a5447b2d46d4"],
Cell[185821, 3494, 235, 6, 30, "Text", "ExpressionUUID" -> \
"1cb32501-10d8-4c19-a765-718048be9670"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186093, 3505, 180, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"85079809-0455-4aca-ab5d-7f830522ea4e"],
Cell[186276, 3510, 357, 8, 49, "Text", "ExpressionUUID" -> \
"480bc294-ea90-4eee-b2a4-8994d0b1d111"],
Cell[186636, 3520, 2506, 63, 471, "Code", "ExpressionUUID" -> \
"57f76ac0-a17f-42a0-8a95-b48cc427dd6a"],
Cell[189145, 3585, 537, 11, 50, "Text", "ExpressionUUID" -> \
"88e7cae2-c92c-4c16-b9af-005cabaa255e"],
Cell[189685, 3598, 687, 13, 69, "Text", "ExpressionUUID" -> \
"386bb991-7f79-4e54-9f94-5ca2a2667725"],
Cell[190375, 3613, 195, 3, 30, "Text", "ExpressionUUID" -> \
"513689c6-2951-403a-a378-826276a8ec5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190607, 3621, 173, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"4f9c407c-76b2-4ed5-a664-25f0da7e7b5b"],
Cell[190783, 3626, 698, 16, 69, "Text", "ExpressionUUID" -> \
"2798089b-8024-4c64-b46f-58b7ad9758b3"],
Cell[191484, 3644, 277, 6, 49, "Text", "ExpressionUUID" -> \
"d0dafa97-8471-4b5f-a94b-cb49e897214c"],
Cell[191764, 3652, 797, 21, 167, "Code", "ExpressionUUID" -> \
"fc61fe14-e1dd-40a6-a853-4379c6bb2735"],
Cell[192564, 3675, 168, 3, 30, "Text", "ExpressionUUID" -> \
"5baee1e0-a449-4faf-8c7e-b0e5be1fc15e"],
Cell[192735, 3680, 545, 11, 50, "Text", "ExpressionUUID" -> \
"d46bbc78-75a0-4c02-9866-0a7234541135"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193317, 3696, 167, 3, 35, "Subsubsection", "ExpressionUUID" -> \
"a2e31e34-db2e-44d3-8f5a-6ffc2b5ffd43"],
Cell[193487, 3701, 251, 6, 30, "Text", "ExpressionUUID" -> \
"ccd7a5cd-132a-46aa-a4c9-a79904ccafe9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[193787, 3713, 167, 3, 44, "Subsection", "ExpressionUUID" -> \
"dae7034d-c5d1-4815-b80e-2dc41e986cee"],
Cell[193957, 3718, 835, 18, 30, "Text", "ExpressionUUID" -> \
"90f9734c-ff66-4e8f-9e2a-6ed83e386260"],
Cell[194795, 3738, 415, 8, 49, "Text", "ExpressionUUID" -> \
"7e48fc77-970d-4a8e-becb-37e2dfec2b3a"],
Cell[CellGroupData[{
Cell[195235, 3750, 303, 7, 30, "Item", "ExpressionUUID" -> \
"c3b95423-6bb6-43cf-b687-104e900e01fd"],
Cell[195541, 3759, 378, 9, 30, "Item", "ExpressionUUID" -> \
"733818d8-5c14-48ad-9887-b329f9730497"],
Cell[195922, 3770, 316, 7, 45, "Item", "ExpressionUUID" -> \
"6439a2d0-1439-4fa7-9bed-e6dec6f05b2d"],
Cell[196241, 3779, 226, 5, 30, "Item", "ExpressionUUID" -> \
"0fc63208-549b-4bef-9aa6-459978a648a1"]
}, Open  ]],
Cell[196482, 3787, 3190, 73, 319, "Code", "ExpressionUUID" -> \
"6ddabd03-5d63-4521-b497-8ef330d93145"],
Cell[199675, 3862, 237, 6, 30, "Item", "ExpressionUUID" -> \
"9f0093eb-1839-4e42-9d98-61f8344eaa51"],
Cell[199915, 3870, 905, 23, 148, "Code", "ExpressionUUID" -> \
"e6580423-6e3f-4f57-92b1-e91626684318"],
Cell[200823, 3895, 458, 10, 46, "Item", "ExpressionUUID" -> \
"8dfffc00-f684-43f1-a3d5-754dc8972982"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201318, 3910, 155, 3, 44, "Subsection", "ExpressionUUID" -> \
"2368e8f6-dc78-432b-ac4d-640df685f6cb"],
Cell[201476, 3915, 385, 8, 49, "Text", "ExpressionUUID" -> \
"7d321eed-ebec-4280-be7a-7724ff89c20a"],
Cell[201864, 3925, 241, 5, 52, "Code", "ExpressionUUID" -> \
"12bf8fb6-5964-49e5-a493-79cfeb34864b"],
Cell[202108, 3932, 458, 11, 51, "Text", "ExpressionUUID" -> \
"a347039f-01ab-4ebb-bb5e-8e2b4c34eb15"],
Cell[202569, 3945, 741, 18, 148, "Code", "ExpressionUUID" -> \
"fa97b891-1b19-4884-8943-966da089dc29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203347, 3968, 218, 4, 44, "Subsection", "ExpressionUUID" -> \
"6aa3c103-f97f-414a-a6ea-d87432c8744d"],
Cell[203568, 3974, 527, 11, 50, "Text", "ExpressionUUID" -> \
"66fd965c-3dc8-453b-8751-182558234b32"],
Cell[204098, 3987, 365, 10, 52, "Code", "ExpressionUUID" -> \
"a486d557-6fa9-4149-95c2-d86f009c2de7"],
Cell[204466, 3999, 526, 14, 52, "Text", "ExpressionUUID" -> \
"37fb1cdf-e608-4dc4-a317-799acc6c9fcf"]
}, Open  ]]
}, Open  ]]
}
]
*)

