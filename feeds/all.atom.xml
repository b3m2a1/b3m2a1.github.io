<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>b3m2a1</title><link href="https://b3m2a1.github.io/" rel="alternate"></link><link href="https://b3m2a1.github.io/feeds/all.atom.xml" rel="self"></link><id>https://b3m2a1.github.io/</id><updated>2019-04-09T18:03:21-05:00</updated><entry><title>Making Docs with EasyIDE</title><link href="https://b3m2a1.github.io/making-docs-with-easyide.html" rel="alternate"></link><published>2019-04-09T13:26:36-05:00</published><updated>2019-04-09T18:03:21-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2019-04-09:/making-docs-with-easyide.html</id><summary type="html">&lt;p&gt;Now that the  &lt;a href="https://b3m2a1.github.io/easyide-an-ide-for-mathematica.html"&gt;IDE stuff I've been working on&lt;/a&gt; has largely settled, I think it's time to show off what it can do. There will be a few of these posts, hopefully, but for today we'll focus on how the IDE can be used to make documentation.&lt;/p&gt;
&lt;p&gt;&lt;a id="gettingsetup" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Getting Set Up …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Now that the  &lt;a href="https://b3m2a1.github.io/easyide-an-ide-for-mathematica.html"&gt;IDE stuff I've been working on&lt;/a&gt; has largely settled, I think it's time to show off what it can do. There will be a few of these posts, hopefully, but for today we'll focus on how the IDE can be used to make documentation.&lt;/p&gt;
&lt;p&gt;&lt;a id="gettingsetup" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Getting Set Up&lt;/h2&gt;
&lt;p&gt;To start, let's open up a new IDE window pointing to the root directory of the package we want to document. For starters, I chose to use my EasyIDE package:&lt;/p&gt;
&lt;pre &gt;
&lt;code&gt;
&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post28-2443230973652949301.png'
     alt='post28-2443230973652949301' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Next we'll go to  &lt;code&gt;Plugins ▸ Docs ▸ Initialize&lt;/code&gt; which will create the docs structure that will be used for creating the docs pages. Here's a video of that:&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/rVXt-56sUhU?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;From here we can do a number of things, such as customize where the documentation should built to (by default the  &lt;code&gt;"Documentation"&lt;/code&gt; directory) and customizations for when the pages are exported to Markdown (if that is of interest).&lt;/p&gt;
&lt;p&gt;&lt;a id="makingatutorial" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Making a Tutorial&lt;/h2&gt;
&lt;p&gt;&lt;a id="makinganew" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Making a New Notebook&lt;/h3&gt;
&lt;p&gt;To start off with, let's just make a tutorial. For this we go to  &lt;code&gt;Plugins ▸ Docs ▸ New Tutorial&lt;/code&gt; , give it a file name, and a new tutorial notebook will pop up in the window. Here's a video:&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/VjUs0t-CpBs?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a id="metadata" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Metadata&lt;/h3&gt;
&lt;p&gt;The next big thing to do is set the Metadata. The easiest way to do this is to go to the toolbar, hit  &lt;code&gt;"Edit Metadata"&lt;/code&gt; and just edit it in the window that appears. Most of the metadata actually doesn't need to be set--the only really important bits are the  &lt;code&gt;"Context"&lt;/code&gt; (for symbols), the  &lt;code&gt;"Type"&lt;/code&gt; (Symbol/Guide/Tutorial), the  &lt;code&gt;"Label"&lt;/code&gt; , and the  &lt;code&gt;"URI"&lt;/code&gt; . To make it a little bit cleaner to work with there is a  &lt;code&gt;Clear&lt;/code&gt; button that will reset all the values back to  &lt;code&gt;Automatic&lt;/code&gt; and a  &lt;code&gt;Populate&lt;/code&gt; button that will fill things in based on what has been set already. This'll be in a video a bit lower down, which should make it easier to see what I mean.&lt;/p&gt;
&lt;p&gt;&lt;a id="content" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Content&lt;/h3&gt;
&lt;p&gt;Whatever you want to put in this notebook can be added. The notebook as it looks (without the Metadata block at the top and with a few stylistic tweaks) will be saved directly to the docs folder. On the other hand, it generally makes the most sense to stick to the standard cell types, images, and pretty simple formatting. The reasoning for this is two-fold. First off, it's easier to make changes and to understand what's going on if things are kept simple, secondly, these standard styles can easily be exported to Markdown, which means they can easily be deployed to the web.&lt;/p&gt;
&lt;p&gt;&lt;a id="savingtodocumentation" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Saving to Documentation&lt;/h3&gt;
&lt;p&gt;After we've added all our metadata and content we're ready to save our notebook to the documentation. All this requires is heading to the  &lt;code&gt;Menu&lt;/code&gt; in the toolbar and selecting  &lt;code&gt;"Save to Documentation"&lt;/code&gt; . It'll save to the directory specified in  &lt;code&gt;"config.wl"&lt;/code&gt; (which is the standard place by default) and that is that.&lt;/p&gt;
&lt;p&gt;Here's a video demoing all these parts:&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/8_ClqisEsCk?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;You might notice the little message popup saying it can't find a stylesheet. This is just an artifact of how  &lt;code&gt;Export&lt;/code&gt; works and won't be an issue in practice.&lt;/p&gt;
&lt;p&gt;&lt;a id="makingbatchdocs" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Making Batch Docs&lt;/h2&gt;
&lt;p&gt;The best part of having such a simple docs format is how easy it is to automate the documentation generation process. To show this off I've included some facilities to make template documentation automatically inside the IDE. First off, we open the  &lt;code&gt;"config.wl"&lt;/code&gt; file. Here we'll add another key for  &lt;code&gt;"BatchDocsSettings"&lt;/code&gt; . In that we'll specify a) the  &lt;code&gt;"Contexts"&lt;/code&gt; we want to document; this defaults to those specified in the  &lt;code&gt;"Contexts"&lt;/code&gt; entry in  &lt;code&gt;PacletInfo.m&lt;/code&gt; b) the types of things we want to autogenerate; this defaults to just template notebooks c) a set of  &lt;code&gt;"RelatedCells"&lt;/code&gt; to paste at the bottom of every generated page to save us a bunch of copy-paste hassle.&lt;/p&gt;
&lt;p&gt;Here's an example of what mine looks like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;quot;BatchDocsSettings&amp;quot; -&amp;gt; {
  &amp;quot;Contexts&amp;quot; -&amp;gt; {&amp;quot;EasyIDE`Notebooks`Utilities`&amp;quot;},
  &amp;quot;RelatedCells&amp;quot; -&amp;gt; Get[FileNameJoin@{DirectoryName[$InputFileName], &amp;quot;relatedCells.nb&amp;quot;}][[1]]
  }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You can see I'm only trying to generate templates for the  &lt;code&gt;"Utilities"&lt;/code&gt; functions and I'm taking my cells from a notebook saved in the same directory as  &lt;code&gt;"config.wl"&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a id="makingthetemplates" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Making the Templates&lt;/h3&gt;
&lt;p&gt;With that done all you need to do is open up that tutorial we were working on before, open the toolbar, and press  &lt;code&gt;Create Batch Docs&lt;/code&gt; . Here's what I mean:&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/iKNvjAcnqE0?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a id="makingmarkdown" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Making Markdown&lt;/h2&gt;
&lt;p&gt;I'll go into this more later, especially how this documentation can be exported directly to a customizable website, but for those interested these notebooks can also be exported directly to Markdown using the  &lt;code&gt;Save to Markdown&lt;/code&gt; command under  &lt;code&gt;Menu&lt;/code&gt; in the toolbar.&lt;/p&gt;</content></entry><entry><title>EasyIDE: An IDE for Mathematica</title><link href="https://b3m2a1.github.io/easyide-an-ide-for-mathematica.html" rel="alternate"></link><published>2019-04-08T14:18:12-05:00</published><updated>2019-04-09T03:36:52-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2019-04-08:/easyide-an-ide-for-mathematica.html</id><summary type="html">&lt;p&gt;Contrary to what would probably be best practice, I do all of my Mathematica development inside Mathematica itself. To support this I built out a suite of  &lt;a href="https://paclets.github.io/PacletServer/btools.html"&gt;application development tools&lt;/a&gt; , a  &lt;a href="https://paclets.github.io/PacletServer/ems.html"&gt;web site builder&lt;/a&gt; , a  &lt;a href="https://github.com/b3m2a1/BugTracker"&gt;bug tracker&lt;/a&gt; , and a  &lt;a href="https://paclets.github.io/PacletServer/simpledocs.html"&gt;documentation writing system&lt;/a&gt; . Each of these worked nicely for me separately …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Contrary to what would probably be best practice, I do all of my Mathematica development inside Mathematica itself. To support this I built out a suite of  &lt;a href="https://paclets.github.io/PacletServer/btools.html"&gt;application development tools&lt;/a&gt; , a  &lt;a href="https://paclets.github.io/PacletServer/ems.html"&gt;web site builder&lt;/a&gt; , a  &lt;a href="https://github.com/b3m2a1/BugTracker"&gt;bug tracker&lt;/a&gt; , and a  &lt;a href="https://paclets.github.io/PacletServer/simpledocs.html"&gt;documentation writing system&lt;/a&gt; . Each of these worked nicely for me separately, but each of these required a palette and each one ran on notebooks, which meant that my screen filled with too many notebooks to keep track of. And then for each of these palettes and systems I had to write new resource finding code based off the palette or some arbitrarily imposed root directory or else provide some other way to specify where things would be found.&lt;/p&gt;
&lt;p&gt;In short, it got messy.&lt;/p&gt;
&lt;p&gt;Then, in a very relaxing hiatus from Mathematica I did some python development, writing a package for linking  &lt;a href="https://paclets.github.io/PacletServer/pjlink.html"&gt;Mathematica to python&lt;/a&gt; as well as some stuff for coordinate transforms and finite differencing and other little utilities. In doing this I noticed that everything was just...better. Partly this is because python is much nicer to write significant amounts of code in, being a language that actually supports developers and with actual object orientation and modularity. But another significant part of it was in the tools available to me. In particular I had the python plugin to  &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; , which is also repackaged as  &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; . The fact that I had tabbing, plugins (e.g. for  &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; ), a file browser inside my dev environment, etc. was at once so entirely normal (I used to be a python programmer before switching over to mostly using Mathematica) and at the same time so nice. I then tried to use the  &lt;em&gt;very nice and well constructed&lt;/em&gt;  &lt;a href="https://wlplugin.halirutan.de/"&gt;IntelliJ plugin for Mathematica&lt;/a&gt; but it was just too much of a hurdle to lose everything I was used to and liked about writing my code directly in Mathematica.&lt;/p&gt;
&lt;p&gt;And that long, unnecessary background is why today we're gonna look at a Mathematica IDE written and operating entirely within Mathematica.&lt;/p&gt;
&lt;p&gt;&lt;a id="easyide" class="Section" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;EasyIDE&lt;/h1&gt;
&lt;p&gt;Mostly for the rhyme, I called this thing  &lt;a href="https://paclets.github.io/PacletServer/easyide.html"&gt;EasyIDE&lt;/a&gt; but it is pretty easy to use, too.&lt;/p&gt;
&lt;p&gt;&lt;a id="basics" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;&lt;a id="installation" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Installation&lt;/h3&gt;
&lt;p&gt;Install it off the  &lt;a href="https://paclets.github.io/PacletServer/"&gt;Paclet Server&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt; https://paclets.github.io/PacletServer/Install.wl
PublicPacletInstall[&amp;quot;EasyIDE&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;pre &gt;
&lt;code&gt;
(*Out:*)

&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post27-5677831900721146064.png'
     alt='post27-5677831900721146064' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a id="makinganew" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Making a New IDE Notebook&lt;/h3&gt;
&lt;p&gt;This IDE system is also basically just a package and a stylesheet, so it's pretty easy to get started. Simply go to  &lt;code&gt;Format ▸ Stylesheet ▸ EasyIDE ▸ LightMode&lt;/code&gt; . It'll prompt you for a directory to use as the root directory. Here's a video as an example:&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/TMHiN9Ov2fQ?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;You can play around with the file browser now or the plugin menus in the top right&lt;/p&gt;
&lt;p&gt;&lt;a id="notebookspackagesand" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Notebooks, Packages, and Text Files&lt;/h3&gt;
&lt;p&gt;As things currently stand, the IDE recognizes three types of files to handle in different ways. The first, of course, are plain notebooks. These can be manipulated like normal. Here's an example of making and editing a notebook file in the IDE:&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/I1MnB7duneA?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;Text and package files can be made in the same way--just assign the appropriate file extension.&lt;/p&gt;
&lt;p&gt;Each of these files will work basically as a regular file would, except their contents will be saved to their original file on the disk rather than the current  &lt;code&gt;NotebookFileName[]&lt;/code&gt; . &lt;/p&gt;
&lt;p&gt;&lt;a id="thefilebrowser" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The File Browser&lt;/h3&gt;
&lt;p&gt;One of the most useful and intuitive features of this IDE is the file browser it has built in. This allows you to quickly find files inside the active directory. Here's a screen shot of what that can look like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post27-1442079965320612466" src="https://b3m2a1.github.io/img/post27-1442079965320612466.png" /&gt;&lt;/p&gt;
&lt;p&gt;Each entry in this has a  &lt;code&gt;ContextMenu&lt;/code&gt; that allows for some file- or directory-specific actions.&lt;/p&gt;
&lt;p&gt;&lt;a id="stylesheetextension" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Stylesheet / Extension Based Behavior&lt;/h3&gt;
&lt;p&gt;EasyIDE is built to be extensible. It provides a way to get different behavior depending on what would be useful for the specific type of notebook or file is being fed in. These are controlled in the EasyIDE settings, in particular at  &lt;code&gt;EasyIDE ▸ Resources ▸ Settings ▸ Mappings&lt;/code&gt; where there are many files that control how these should map. This directory may also be created in  &lt;code&gt;$UserBaseDirectory/ApplicationData&lt;/code&gt; and the settings there will take precedence over those in the paclet folder itself.&lt;/p&gt;
&lt;p&gt;These customizations include stylesheets, toolbars, and what to do when the file browser is active.&lt;/p&gt;
&lt;p&gt;&lt;a id="pluginsandtoolbars" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Plugins and Toolbars&lt;/h3&gt;
&lt;p&gt;Probably the best feature of having something like EasyIDE is the ability to hook external code into the IDE and have it give new, more powerful capabilities. To make this easy to work with I added both a plugin system and a toolbar system (although the latter is really just a special case of the first). Plugins appear as either menus--such as the  &lt;code&gt;File&lt;/code&gt; and  &lt;code&gt;Project&lt;/code&gt; menus which are themselves just plugins--or as commands under the plugins menu. Currently I already have a decent number of these:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post27-6483075564890356321" src="https://b3m2a1.github.io/img/post27-6483075564890356321.png" /&gt;&lt;/p&gt;
&lt;p&gt;All of these add new functionality to the IDE based on code I'd written before. In that screenshot you can also see a toolbar, which exists right below the tabs. This can be stylesheet specific and thus adds an even more targeted way to add functionality to the system. Here's an example of the four different toolbars I've implemented as well as the different stylesheets they go with:&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/fFiDiO-oM7w?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;In that you can also see the major downside of putting everything into an IDE: when the files get big (as is the one I'm using to write this post) things can get slower. On the other hand as long as one is only writing code, this is never an issue. And even with a ~12MB file like this things are still more than fast enough to not be frustrating to work with.&lt;/p&gt;
&lt;p&gt;&lt;a id="extensions" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Extensions&lt;/h2&gt;
&lt;p&gt;&lt;a id="styles" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Styles&lt;/h3&gt;
&lt;p&gt;EasyIDE was built to be customizable. This holds first and foremost for the stylesheets it works with. Even though currently there is only a set of LightMode styles, as DarkMode style set could be constructed without too much more difficulty. To do this, one would merely have to take the existing LightMode stylesheet, copy it, and make the necessary cosmetic changes. These changes should then propagate reasonably naturally to the extension styles if the inheritance is changed. This is on the TODO list, but if there is a quality existing DarkMode stylesheet to work off that would also make life much easier.&lt;/p&gt;
&lt;p&gt;&lt;a id="pluginsandtoolbars" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Plugins and Toolbars&lt;/h3&gt;
&lt;p&gt;These may be hooked in by adding things to  &lt;code&gt;EasyIDE ▸ Resources ▸ Settings ▸ Plugins&lt;/code&gt; and  &lt;code&gt;EasyIDE ▸ Resources ▸ Settings ▸ Toolbars&lt;/code&gt; . There are a number of good examples there already.&lt;/p&gt;
&lt;p&gt;&lt;a id="miscellaneousextensions" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Miscellaneous Extensions&lt;/h3&gt;
&lt;p&gt;I had already implemented stuff for creating nice docs, Markdown notebooks, websites, bug tracking, paclet creation, etc. and some of this has made it in as plugins already. More is forthcoming, but for now one can always play with what's in the Plugins menu. In particular the Git plugin is useful for me as I write and develop.&lt;/p&gt;
&lt;p&gt;&lt;a id="theeasyideapi" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The EasyIDE API&lt;/h3&gt;
&lt;p&gt;EasyIDE is just a collection of functions wrapped into a single unit. These were designed to (hopefully) be modular and clean to work with. Eventually all core functionality will also make its way to being attached to a single object, the  &lt;code&gt;IDENotebookObject&lt;/code&gt; . The API for this is based off of my  &lt;a href="https://paclets.github.io/PacletServer/interfaceobjects.html"&gt;InterfaceObjects&lt;/a&gt; package and is object-oriented. This will be documented in due time, but as a taste here's what it can look like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ide = IDENotebookObject[]&lt;/code&gt;&lt;/pre&gt;


&lt;pre &gt;
&lt;code&gt;
(*Out:*)

&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post27-2774621243698091573.png'
     alt='post27-2774621243698091573' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre class="prettyprint"&gt;&lt;code&gt;ide@&amp;quot;Methods&amp;quot;

(*Out:*)

{&amp;quot;Open&amp;quot;,&amp;quot;Save&amp;quot;,&amp;quot;Close&amp;quot;,&amp;quot;SwitchTab&amp;quot;,&amp;quot;Path&amp;quot;,&amp;quot;Data&amp;quot;,&amp;quot;SetData&amp;quot;,&amp;quot;ToggleFileViewer&amp;quot;,&amp;quot;AddToolbar&amp;quot;,&amp;quot;RemoveToolbar&amp;quot;,&amp;quot;AddStyles&amp;quot;,&amp;quot;RemoveStyles&amp;quot;,&amp;quot;GetStylesheet&amp;quot;,&amp;quot;SetStylesheet&amp;quot;,&amp;quot;SetProjectDirectory&amp;quot;,&amp;quot;CreateMessage&amp;quot;,&amp;quot;CreateDialog&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;These  &lt;code&gt;"Methods"&lt;/code&gt; are all operations that the IDE notebook referenced to by  &lt;code&gt;EvaluationNotebook[]&lt;/code&gt; can perform. Here's an example of creating a message:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ide@&amp;quot;CreateMessage&amp;quot;[&amp;quot;Hello!&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;pre &gt;
&lt;code&gt;
(*Out:*)

&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post27-6469651990570110283.png'
     alt='post27-6469651990570110283' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img alt="post27-316085028871083490" src="https://b3m2a1.github.io/img/post27-316085028871083490.png" /&gt;&lt;/p&gt;
&lt;p&gt;As the IDE grows in sophistication so will the methods the API supports. For now, though, these provide the most direct control that is possible to get with the IDE.&lt;/p&gt;</content></entry><entry><title>Getting Started with SimpleDocs: The Simpler Docs Palette</title><link href="https://b3m2a1.github.io/getting-started-with-simpledocs-the-simpler-docs-palette.html" rel="alternate"></link><published>2019-02-20T15:59:20-06:00</published><updated>2019-02-20T18:19:15-06:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2019-02-20:/getting-started-with-simpledocs-the-simpler-docs-palette.html</id><summary type="html">&lt;p&gt;&lt;a id="installingsimpledocs" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installing SimpleDocs&lt;/h2&gt;
&lt;p&gt;The easiest way to get SimpleDocs is off the  &lt;a href="https://paclets.github.io/PacletServer/simpledocs.html"&gt;paclet server&lt;/a&gt; . Copy the installation code there and you'll have a fresh new copy of SimpleDocs. For convenience I've duplicated that here:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt; https://paclets.github.io/PacletServer/Install.wl
PublicPacletInstall[&amp;quot;SimpleDocs&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;pre &gt;
&lt;code&gt;
(*Out:*)

&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post26-6661166580179857863.png'
     alt='post26-6661166580179857863' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a id="usingthepalette" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Using the Palette&lt;/h2&gt;
&lt;p&gt;Rather than describing all …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a id="installingsimpledocs" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installing SimpleDocs&lt;/h2&gt;
&lt;p&gt;The easiest way to get SimpleDocs is off the  &lt;a href="https://paclets.github.io/PacletServer/simpledocs.html"&gt;paclet server&lt;/a&gt; . Copy the installation code there and you'll have a fresh new copy of SimpleDocs. For convenience I've duplicated that here:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt; https://paclets.github.io/PacletServer/Install.wl
PublicPacletInstall[&amp;quot;SimpleDocs&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;pre &gt;
&lt;code&gt;
(*Out:*)

&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post26-6661166580179857863.png'
     alt='post26-6661166580179857863' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a id="usingthepalette" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Using the Palette&lt;/h2&gt;
&lt;p&gt;Rather than describing all the functions of the palette in text, I decided just to make a video. It allows me to give a better, briefer explanation.&lt;/p&gt;
&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/7PRiVUlLKDU?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a id="openingawebsite" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Opening a Website&lt;/h2&gt;
&lt;p&gt;There's currently no button in the palette to open the local site that's built out, but we can do that using the package itself, like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt; SimpleDocs`
SimpleDocs@&amp;quot;ViewLocalSite&amp;quot;[&amp;quot;Tutorials&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This will open the website we've built out on the local host. You can then take this website and deploy it using  &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; pretty easily by feeding it into a repo.  &lt;a href="https://github.com/b3m2a1/Ems/wiki"&gt;Ems&lt;/a&gt; is used to actually build the websites, so you can customize your website with the  &lt;code&gt;SiteConfig.wl&lt;/code&gt; file that Ems uses.&lt;/p&gt;</content></entry><entry><title>Making a Paclet with BTools</title><link href="https://b3m2a1.github.io/making-a-paclet-with-btools.html" rel="alternate"></link><published>2019-02-16T13:53:56-06:00</published><updated>2019-02-16T15:01:15-06:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2019-02-16:/making-a-paclet-with-btools.html</id><summary type="html">&lt;p&gt;Today we're gonna look at something I've been meaning to document for a long time now. Over the past two or so years I've developed a framework to simplify the development process. In the post, I'm gonna show you how to actually use it.&lt;/p&gt;
&lt;p&gt;To make it easier to use …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today we're gonna look at something I've been meaning to document for a long time now. Over the past two or so years I've developed a framework to simplify the development process. In the post, I'm gonna show you how to actually use it.&lt;/p&gt;
&lt;p&gt;To make it easier to use all this I have a video showing how I do things:&lt;/p&gt;
&lt;iframe width="560" height="315" 
 src="https://www.youtube.com/embed/EN0VUogBqk0" frameborder="0" allow="accelerometer; 
 autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;a id="installingbtools" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installing BTools&lt;/h2&gt;
&lt;p&gt;The easiest way to install BTools is to load it off the  &lt;a href="https://paclets.github.io/PacletServer/"&gt;paclet server&lt;/a&gt; . Head over to its paclet page and copy the installation instructions there:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt; https://paclets.github.io/PacletServer/Install.wl
PublicPacletInstall[&amp;quot;BTools&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="makinganew" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Making a New Package&lt;/h2&gt;
&lt;p&gt;With BTools installed you'll then go up to the palettes menu and open up the App Manager palette that it provides. (see the video for more details)&lt;/p&gt;
&lt;p&gt;From the palette you'll click the New App button on the bottom. It'll have a bunch of other buttons in it. Ignore those. They haven't really done anything since 2017. This'll open up a little window. Put your app name in there and click the "New App" button.&lt;/p&gt;
&lt;p&gt;The package will appear in the drop-down menu provided. You can open it up by clicking on its name (the left side of the drop down is a button).&lt;/p&gt;
&lt;p&gt;&lt;a id="addingcontent" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Adding Content&lt;/h3&gt;
&lt;p&gt;This part is pretty much just manual. Add the .m files or .wl files you want in the appropriate directories. One quirk of the BTools package loader is that it controls the context naming structure so make sure to only declare symbols before the  &lt;code&gt;Begin["`Private`"]&lt;/code&gt; and not try to give them a specific context.&lt;/p&gt;
&lt;p&gt;The nice thing about this is that you don't have to worry about how to load any of your subpackages. BTools will figure that out and set up auto-completions for you. I'll go into this further later, but as an example take a look at how things are defined in my  &lt;a href="https://github.com/b3m2a1/mathematica-ChemTools/tree/master/Packages"&gt;ChemTools&lt;/a&gt; package or in the  &lt;a href="https://github.com/b3m2a1/mathematica-PublicPacletServer/tree/master/Packages"&gt;PublicPacletServer&lt;/a&gt; interface package.&lt;/p&gt;
&lt;p&gt;&lt;a id="buildingthepaclet" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Building the Paclet&lt;/h2&gt;
&lt;p&gt;Go to the Dist tab on the App Manager palette and press "Bundle Paclet". This will create a paclet and open it up for you. At that point you can do with it as you will.&lt;/p&gt;
&lt;p&gt;If you've set up a paclet server the PacletServerBuilder stuff in BTools (or the Paclet Server Manager palette) you can push to that, too, with Publish. Same for pushing to GitHub if you set up a GitHub repo for the package. You can even push a new GitHub release with the Publish Release button.&lt;/p&gt;</content></entry><entry><title>Request: Development Input</title><link href="https://b3m2a1.github.io/request-development-input.html" rel="alternate"></link><published>2019-02-07T11:34:01-06:00</published><updated>2019-02-07T14:41:55-06:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2019-02-07:/request-development-input.html</id><summary type="html">&lt;p&gt;&lt;a id="whatdopeople" class="Section" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;What Do People Want To Build?&lt;/h1&gt;
&lt;p&gt;Over the past year and a bit I've developed quite a bit of infrastructure from  &lt;a href="https://b3m2a1.github.io/simplifying-mathematica-documentation.html"&gt;a documentation platform&lt;/a&gt; to a  &lt;a href="tps:/b3m2a1.github.io/making-a-blog-in-30-minutes.html"&gt;website builder &lt;/a&gt; and  &lt;a href="https://paclets.github.io/PacletServer/"&gt;package repository&lt;/a&gt; all extending and using  &lt;a href="https://github.com/b3m2a1/mathematica-BTools"&gt;my existing toolkit&lt;/a&gt; . Recently, though I've wondered what I can do to make this  &lt;em&gt;useful …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a id="whatdopeople" class="Section" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;What Do People Want To Build?&lt;/h1&gt;
&lt;p&gt;Over the past year and a bit I've developed quite a bit of infrastructure from  &lt;a href="https://b3m2a1.github.io/simplifying-mathematica-documentation.html"&gt;a documentation platform&lt;/a&gt; to a  &lt;a href="tps:/b3m2a1.github.io/making-a-blog-in-30-minutes.html"&gt;website builder &lt;/a&gt; and  &lt;a href="https://paclets.github.io/PacletServer/"&gt;package repository&lt;/a&gt; all extending and using  &lt;a href="https://github.com/b3m2a1/mathematica-BTools"&gt;my existing toolkit&lt;/a&gt; . Recently, though I've wondered what I can do to make this  &lt;em&gt;useful&lt;/em&gt; .&lt;/p&gt;
&lt;p&gt;Obviously, there are little bugs to quash, little things to extend and build, but I think for many things the infrastructure I have can be useful and make the development process a lot quicker and cleaner. So I'm putting out a request.&lt;/p&gt;
&lt;p&gt;What do you want to build and what tools would make that easier? What kind of blockages have you run into when trying to get stuff developed? Leave me notes in the comments and I'll try to figure out what kinds of things I can/should document to make this better for everyone.&lt;/p&gt;</content></entry><entry><title>Simplifying Mathematica Documentation</title><link href="https://b3m2a1.github.io/simplifying-mathematica-documentation.html" rel="alternate"></link><published>2019-01-21T18:46:45-06:00</published><updated>2019-01-21T18:46:45-06:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2019-01-21:/simplifying-mathematica-documentation.html</id><summary type="html">&lt;p&gt;&lt;a id="simplifyingmathematicadocumentation" class="Section" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Simplifying Mathematica Documentation&lt;/h1&gt;
&lt;p&gt;Mathematica's  &lt;a href="https://reference.wolfram.com/language/"&gt;Documentation Center&lt;/a&gt; is a big selling point of the software. For many of the core system functions there's a rich documentation page with the basic call signatures, details on how the function works, and many useful examples.&lt;/p&gt;
&lt;p&gt;This is a powerful resource for people, especially those …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a id="simplifyingmathematicadocumentation" class="Section" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Simplifying Mathematica Documentation&lt;/h1&gt;
&lt;p&gt;Mathematica's  &lt;a href="https://reference.wolfram.com/language/"&gt;Documentation Center&lt;/a&gt; is a big selling point of the software. For many of the core system functions there's a rich documentation page with the basic call signatures, details on how the function works, and many useful examples.&lt;/p&gt;
&lt;p&gt;This is a powerful resource for people, especially those just getting used to how Mathematica works. On the other hand I don't think many would accuse it of being "simple". That applies in a few dimensions. For one, it's often difficult to find  &lt;em&gt;exactly&lt;/em&gt; the function you wanted. Some of that comes with the territory—it's a complicated system and language after all—but it certainly could be easier to look through a là the  &lt;a href="https://docs.python.org/3/"&gt;python docs&lt;/a&gt; , even if they don't have the same breadth of coverage. Another place where this applies is in building out documentation. The pages are all built with a system called  &lt;code&gt;DocuTools&lt;/code&gt; which can be seen on the  &lt;a href="https://www.twitch.tv/stephen_wolfram/videos"&gt;Twitch streams&lt;/a&gt; . This is basically a huge palette and a standardized template notebook format. It supports all sorts of rich custom things. It makes standard looking doc pages. And it's (juding from the streams) buggy, got a steep learning curve, and is basically too much for the average user to want. Oh, it also doesn't build version independent pages.&lt;/p&gt;
&lt;p&gt;&lt;a id="simpledocs" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;SimpleDocs&lt;/h2&gt;
&lt;p&gt;To get around this I wrote a system I'm calling  &lt;a href="https://paclets.github.io/PacletServer/simpledocs.html#main-content"&gt;SimpleDocs&lt;/a&gt; . You can easily install it off the  &lt;a href="https://paclets.github.io/PacletServer/"&gt;Mathematica Paclet Server&lt;/a&gt; . If you want to contribute that's always appreciated and the code is  &lt;a href="https://github.com/b3m2a1/SimpleDocs"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt; https://paclets.github.io/PacletServer/Install.wl
PublicPacletInstall[&amp;quot;SimpleDocs&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;pre &gt;
&lt;code&gt;
(*Out:*)

&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post23-4857058963627178082.png'
     alt='post23-4857058963627178082' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The idea here is to do as little as possible but still get fully valid documentation pages that integrate into the documentation center. On top of that it should be possible to take this simple written documentation and make a web host for it. Think  &lt;a href="http://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; or just the standard  &lt;a href="https://docs.python.org/3/"&gt;python docs&lt;/a&gt; . &lt;/p&gt;
&lt;p&gt;&lt;a id="gettingstarted" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SimpleDocs&lt;/code&gt; has documentation built in (built with  &lt;code&gt;SimpleDocs&lt;/code&gt; ). You can always just search for  &lt;code&gt;"SimpleDocs"&lt;/code&gt; after installing. But the heart of it all is a stylesheet. Here's all you have to do:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_F0IpRIAnhs" 
 frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; 
 picture-in-picture" allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;Now you're ready to start making some documentation.&lt;/p&gt;
&lt;p&gt;&lt;a id="addingmetadata" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Adding Metadata&lt;/h3&gt;
&lt;p&gt;The only thing we  &lt;em&gt;really&lt;/em&gt; need to do to get this to integrate into the documentation center is to add metadata. The only metadata you  &lt;em&gt;really&lt;/em&gt; need to add is a  &lt;code&gt;"Context"&lt;/code&gt; where your package lives, a  &lt;code&gt;"Type"&lt;/code&gt; of object, and a  &lt;code&gt;"Label"&lt;/code&gt; for your page.  &lt;code&gt;SimpleDocs&lt;/code&gt; will do the rest. Here's that in action:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/aYKEQADtmvE" 
 frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; 
 picture-in-picture" allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;At this point you could do nothing else, save this to a Documentation directory, and this page would be possible to find via the Documentation Center. But we'll go a bit further.&lt;/p&gt;
&lt;p&gt;&lt;a id="creatingasymbol" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Creating a Symbol Page&lt;/h3&gt;
&lt;p&gt;Since this is the most common thing people will want to do I figured I'd make a Symbol page here. What it'll be the page for I don't know but we'll figure that out.&lt;/p&gt;
&lt;p&gt;First, we'll take our fresh new notebook and go to the the little  &lt;img alt="post23-4952604743900088888" src="https://b3m2a1.github.io/img/post23-4952604743900088888.png" /&gt; tab and select Symbol from the drop down:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post23-8903972134367965682" src="https://b3m2a1.github.io/img/post23-8903972134367965682.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now we just edit this like a normal notebook. Don't want to do examples since they take too long? Delete them. Don't need 'em. Basically at this point you can do whatever you want and it'll get cooked into the final result. One big warning, though,  &lt;strong&gt;&lt;em&gt;if you want this to go to the web only use standard styles and never use 2D input&lt;/em&gt;&lt;/strong&gt; . What I mean by that is that for export to the web you don't want to do too much crazy stuff that will look unnatural online.&lt;/p&gt;
&lt;p&gt;&lt;a id="savingandprojects" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Saving and Projects&lt;/h3&gt;
&lt;p&gt;We can save this any number of ways or places. I'd reccommend going to the little  &lt;pre &gt;
&lt;code&gt;
&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post23-5393039955319644436.png'
     alt='post23-5393039955319644436' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt; menu in the top right though and selecting Save to Project. That'll open a window like this:&lt;/p&gt;
&lt;pre &gt;
&lt;code&gt;
&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post23-8926075815412593421.png'
     alt='post23-8926075815412593421' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;You can put whatever you want for the name, but if you want things to be as easy as possible, put the name of a paclet that can be found via  &lt;code&gt;PacletFind&lt;/code&gt; . The notebook will be saved in a standard location in that paclet:&lt;/p&gt;
&lt;pre &gt;
&lt;code&gt;
&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post23-6849661569137699137.png'
     alt='post23-6849661569137699137' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The project structure is very flexible though. You can supply a directory to save in and a config file to work off of. I'll detail the config structure later if I have time, but for now look  &lt;a href="https://github.com/b3m2a1/SimpleDocs/blob/b2e8882a5b7ae5bb97c07eebbdb8bd8e6368e5f3/Packages/Package/SimpleDocs.m#L99"&gt;here&lt;/a&gt; and in the surrounding package to get a sense for what I've done and am aiming to do.&lt;/p&gt;
&lt;p&gt;Finally, the name supplied can be supplied for any future notebooks you save so you only have to type the directory name or config file path once.&lt;/p&gt;
&lt;p&gt;&lt;a id="savingtodocumentation" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Saving to Documentation&lt;/h3&gt;
&lt;p&gt;Saving the file to the project won't get it into the Documentation Center, though. For that we'll want to use the Save to Documentation button. After the documentation indices are rebuilt we can just search for SimpleDocsBlogPost and the page will open. When we see it we'll see a page like:&lt;/p&gt;
&lt;pre &gt;
&lt;code&gt;
&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post23-2891292522721469736.png'
     alt='post23-2891292522721469736' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The mismatch of the color bar on the top and the symbol page comes from how this is labeled in its Metadata. If we changed that to Symbol and hit Populate again it'd be blue.&lt;/p&gt;
&lt;p&gt;&lt;a id="savingmarkdown" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Saving Markdown&lt;/h3&gt;
&lt;p&gt;We can also use SimpleDocs to build Markdown for a page. This is super useful if we want to build a webpage from this afterwards. The basic structure SimpleDocs uses is appropriate for use with  &lt;a href="https://paclets.github.io/PacletServer/ems.html#main-content"&gt;Ems&lt;/a&gt; or, consequently,  &lt;a href="http://docs.getpelican.com/en/stable/"&gt;pelican&lt;/a&gt; . To save our notebook to a .md file we just select Save to Markdown from the menu. After we've written all of our documentation we can go to the Build Site menu item and it'll build out a website for us. Here's a video of how that works:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/XcLf6q20Ihw" 
 frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; 
 picture-in-picture" allowfullscreen&gt;
&lt;/iframe&gt;

&lt;p&gt;&lt;a id="advancedusage" class="Subsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Advanced Usage&lt;/h2&gt;
&lt;p&gt;We don't need to run the code through the main interface. We can also do it via the package. As an example, we'll use it to build out documentation for a package programmatically in a separate folder and then deploy these docs both as a website and a paclet that someone could install.&lt;/p&gt;
&lt;p&gt;&lt;a id="buildingdocumentationpages" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Building Documentation Pages&lt;/h3&gt;
&lt;p&gt;First, though, we load the package:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt;SimpleDocs`Package`&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we'll initialize our project. I'm choosing to use the directory $UserDocumentsDirectory/Wolfram Mathematica/Documentation but you can use whatever you like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;root = FileNameJoin@{$UserDocumentsDirectory, &amp;quot;Wolfram Mathematica&amp;quot;, 
    &amp;quot;Documentation&amp;quot;};
projDir = CreateDocumentationPaclet[root, {&amp;quot;SimpleDocs`&amp;quot;}];
InitializeDocsProject[root, &amp;quot;Documentation_SimpleDocs&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Viewing what was just made:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SystemOpen[projDir]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post23-4001383001989219446" src="https://b3m2a1.github.io/img/post23-4001383001989219446.png" /&gt;&lt;/p&gt;
&lt;p&gt;We see we've gotten a basic structure to fill out. Next we'll find the functions we need to document:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;fns=
  Block[{$ContextPath={&amp;quot;System`&amp;quot;}},
    Apply[
      Join,
      Names[#&amp;lt;&amp;gt;&amp;quot;*&amp;quot;]&amp;amp;/@
      Select[Contexts[&amp;quot;SimpleDocs`Package`*&amp;quot;], StringCount[#, &amp;quot;`&amp;quot;]==2&amp;amp;]
      ]
    ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then we'll find the functions that are still to be documented (this will only really make sense on subsequent rebuilds):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;toDoc=
  Pick[
    fns,
    Not@*FileExistsQ@
      FileNameJoin@{projDir, &amp;quot;project&amp;quot;, &amp;quot;docs&amp;quot;, &amp;quot;content&amp;quot;, &amp;quot;ref&amp;quot;, #&amp;lt;&amp;gt;&amp;quot;.md&amp;quot;}&amp;amp;/@
    StringSplit[fns, &amp;quot;`&amp;quot;][[All, -1]]
    ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we can create a template notebook for the first of these to see what's happening:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;CreateTemplateNotebook[&amp;quot;Symbol&amp;quot;, ToExpression@fns[[1]]]&lt;/code&gt;&lt;/pre&gt;


&lt;pre &gt;
&lt;code&gt;
(*Out:*)

&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post23-436223515119209383.png'
     alt='post23-436223515119209383' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;pre &gt;
&lt;code&gt;
&lt;span&gt;
 &lt;img src='https://b3m2a1.github.io/img/post23-5272715017485183436.png'
     alt='post23-5272715017485183436' /&gt;
&lt;/span&gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;We can see we're mostly there, but it'd be preferable to have the little bar at the top say just SIMPLEDOCS SYMBOL. So we'll write a function to make that happen&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;correctTitleBar[nb_]:=
  With[{c=Cells[nb, CellStyle-&amp;gt;&amp;quot;TitleBar&amp;quot;][[1]]},
    NotebookWrite[c, Cell[&amp;quot;SimpleDocs Symbol&amp;quot;, &amp;quot;TitleBar&amp;quot;]];
    ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It's also not possible to see in the image, but the links at the bottom don't actually point anywhere useful. To get that working nicely we'll make a secondary notebook which we'll use as a template to fill in parameters:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post23-5314652595476232472" src="https://b3m2a1.github.io/img/post23-5314652595476232472.png" /&gt;&lt;/p&gt;
&lt;p&gt;We'll save that as relatedStuff.nb in the  &lt;code&gt;projectDir&lt;/code&gt; folder. Then we'll write a function to insert it into a notebook:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$relatedCells = First@Get@FileNameJoin@{projDir, &amp;quot;relatedStuff.nb&amp;quot;};
correctRelatedStuff[nb_] :=
    Module[{cells, firstCell},
       firstCell = Cells[nb, CellStyle -&amp;gt; &amp;quot;SeeAlso&amp;quot;];
       cells = Cells[nb];
       firstCell = Cells[nb, CellStyle -&amp;gt; &amp;quot;Related&amp;quot;][[1]];
       cells = Join @@ SplitBy[cells, # =!= firstCell &amp;amp;][[-2 ;;]];
       SelectionMove[cells[[-1]], After, Cell];
       NotebookDelete@cells;
       NotebookWrite[nb, $relatedCells];
       ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Finally, so that we can save it cleanly, we'll set the project name for the notebook and various metadata components. For good measure we'll also set the directory, but if we don't need to reload the notebook at a later time we don't actually need to do this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;setProjectMetadata[nb_]:=
  (
    CurrentValue[nb, {TaggingRules, &amp;quot;Metadata&amp;quot;, &amp;quot;context&amp;quot;}]=
      &amp;quot;SimpleDocs`&amp;quot;;
    CurrentValue[nb, {TaggingRules, &amp;quot;Metadata&amp;quot;, &amp;quot;uri&amp;quot;}]=
      StringReplace[
        CurrentValue[nb, {TaggingRules, &amp;quot;Metadata&amp;quot;, &amp;quot;uri&amp;quot;}],
        &amp;quot;SimpleDocsPackage&amp;quot;-&amp;gt;&amp;quot;SimpleDocs&amp;quot;
        ];
    CurrentValue[nb, {TaggingRules, &amp;quot;SimpleDocs&amp;quot;, &amp;quot;Project&amp;quot;, &amp;quot;Name&amp;quot;}]=
      &amp;quot;Documentation_SimpleDocs&amp;quot;;
    CurrentValue[nb, {TaggingRules, &amp;quot;SimpleDocs&amp;quot;, &amp;quot;Project&amp;quot;, &amp;quot;Directory&amp;quot;}]=
      projDir;
    )&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we can package that all up into one function:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;documentFunction[fn_]:=
  Module[{nb, file, docs, md, expr},
    nb=CreateTemplateNotebook[&amp;quot;Symbol&amp;quot;, fn, Visible-&amp;gt;False];
    setProjectMetadata[nb];
    SaveNotebookToProject[nb];
    file = NotebookFileName@nb;
    correctTitleBar[nb];
    correctRelatedStuff[nb];
    NotebookSave@nb;
    docs = SaveNotebookToDocumentation[nb];
    md = SaveNotebookMarkdown[nb];
    expr = NotebookGet[nb];
    NotebookClose[nb];
    Export[
      file,
      Append[expr, Visible-&amp;gt;True]
      ];
    &amp;lt;|
      &amp;quot;Notebook&amp;quot;-&amp;gt;file,
      &amp;quot;Documentation&amp;quot;-&amp;gt;docs,
      &amp;quot;Markdown&amp;quot;-&amp;gt;md
      |&amp;gt;
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And finally apply that to our functions. Before we do that, we'll select only the proper functions, as the things with  &lt;code&gt;OwnValues&lt;/code&gt; will cause us grief at the moment:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;trueFunctions=
  ToExpression[
    toDoc,
    StandardForm,
    Function[
      Null,
      If[Length@OwnValues[#]==0,#,Nothing],
      HoldAllComplete
      ]
    ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we can build out our pages:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;documentFunction/@trueFunctions;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;After we do that we can see our docs pages exist now and are in the right place:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post23-1178117399304372157" src="https://b3m2a1.github.io/img/post23-1178117399304372157.png" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we can create a table of contents for our package (and save it in the same way):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;allFns =
    ToExpression[
       fns,
       StandardForm,
       Function[
          Null,
          If[Length@OwnValues[#] == 0, #, Nothing],
          HoldAllComplete
          ]
       ];
Module[{nb, file, docs, md, expr},
    nb = 
       CreateTemplateNotebook[&amp;quot;TableOfContents&amp;quot;, 
    &amp;quot;SimpleDocs Functions&amp;quot; -&amp;gt; allFns,
          Visible -&amp;gt; False
          ];
    setProjectMetadata[nb];
    SaveNotebookToProject[nb];
    file = NotebookFileName@nb;
    setProjectMetadata[nb];
    correctRelatedStuff[nb];
    NotebookSave@nb;
    docs = SaveNotebookToDocumentation[nb];
    md = SaveNotebookMarkdown[nb];
    expr = NotebookGet[nb];
    NotebookClose[nb];
    Export[
       file,
       Append[expr, Visible -&amp;gt; True]
       ];
    &amp;lt;|
       &amp;quot;Notebook&amp;quot; -&amp;gt; file,
       &amp;quot;Documentation&amp;quot; -&amp;gt; docs,
       &amp;quot;Markdown&amp;quot; -&amp;gt; md
       |&amp;gt;
    ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Lastly, we update the paclet info file for the project we're building:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SetPacletInfo[&amp;quot;Documentation_SimpleDocs&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="distributingthedocumentation" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Distributing the Documentation&lt;/h3&gt;
&lt;p&gt;Once have have this nice documentation, the question remains as to how we get this to others. The simplest way to do this to my mind is to distribute it as a  &lt;a href="https://mathematica.stackexchange.com/q/131101/38205"&gt;paclet&lt;/a&gt; . The acutal distribution of this file could be done any number of ways, but to make life easier I've included a small helper function to pack your paclets:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;pac = BundlePaclet[&amp;quot;Documentation_SimpleDocs&amp;quot;]

(*Out:*)

&amp;quot;/private/var/folders/9t/tqc70b7d61v753jkdbjkvd640000gp/T/_paclets/Documentation_SimpleDocs-0.0.0.paclet&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You can then send this to people to  &lt;code&gt;PacletInstall&lt;/code&gt; or put it  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/DocumentationServer"&gt;on a web server&lt;/a&gt; . It's up to you what you want to do with it.&lt;/p&gt;
&lt;p&gt;&lt;a id="creatingadocumentation" class="Subsubsection" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Creating a Documentation Website&lt;/h3&gt;
&lt;p&gt;Remember that we also have Markdown for our documentation notebooks. That means we can generate a website for it. Again, you can do this however you like, say using pelican, but to simplify this process I included another helper:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;docs = BuildDocsSite[&amp;quot;Documentation_SimpleDocs&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Once we've built it out we can view what we've got with a dependency function:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OpenLocalDocsSite[&amp;quot;Documentation_SimpleDocs&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post23-7611197386543475112" src="https://b3m2a1.github.io/img/post23-7611197386543475112.png" /&gt;&lt;/p&gt;
&lt;p&gt;You can customize this page all sorts of ways, but we won't get into that today. For now I'll just make a few changes to the site config to supply an explicit deployment URL and site name:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OpenDocsSiteConfig[&amp;quot;Documentation_SimpleDocs&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post23-4996619281108217509" src="https://b3m2a1.github.io/img/post23-4996619281108217509.png" /&gt;&lt;/p&gt;
&lt;p&gt;After I make my changes I'll rebuild and deploy in one step:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;BuildDocsSite[&amp;quot;Documentation_SimpleDocs&amp;quot;, &amp;quot;LastBuild&amp;quot;-&amp;gt;None, &amp;quot;AutoDeploy&amp;quot;-&amp;gt;True];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And I now have a site where people can see the (currently very sparse and not at all helpful) docs I've built out:  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/SimpleDocs/"&gt;wolframcloud.com/objects/b3m2a1.docs/SimpleDocs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post23-608569771431589319" src="https://b3m2a1.github.io/img/post23-608569771431589319.png" /&gt;&lt;/p&gt;</content><category term="documentation"></category></entry><entry><title>Playing with YouTube from Mathematica</title><link href="https://b3m2a1.github.io/playing-with-youtube-from-mathematica.html" rel="alternate"></link><published>2018-09-28T19:45:03-05:00</published><updated>2018-09-28T21:21:44-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-09-28:/playing-with-youtube-from-mathematica.html</id><summary type="html">&lt;p&gt;Today I'm gonna quickly show off something I made for a friend (and about which I'd been thinking for some time). We're gonna use the YouTube API in Mathematica to do a have some fun (but not too much fun, mind you!).&lt;/p&gt;
&lt;h3&gt;Installing the YouTube Connection&lt;/h3&gt;
&lt;p&gt;My connection to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I'm gonna quickly show off something I made for a friend (and about which I'd been thinking for some time). We're gonna use the YouTube API in Mathematica to do a have some fun (but not too much fun, mind you!).&lt;/p&gt;
&lt;h3&gt;Installing the YouTube Connection&lt;/h3&gt;
&lt;p&gt;My connection to the YouTube API is built on Mathematica's  &lt;a href="https://reference.wolfram.com/language/ref/ServiceConnect.html"&gt;&lt;code&gt;ServiceConnect&lt;/code&gt;&lt;/a&gt; framework. I've  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/serviceconnections---mathematica-on-the-web.html"&gt;talked&lt;/a&gt;  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/questions-on-the-mathematica-stack-exchange.html#main-content"&gt;about&lt;/a&gt;  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/questions-on-the-mathematica-stack-exchange-part-2.html#main-content"&gt;these&lt;/a&gt;  &lt;a href="https://mathematica.stackexchange.com/questions/163638/how-can-i-access-nasa-images-and-apis"&gt;before&lt;/a&gt; in  &lt;a href="http://community.wolfram.com/groups/-/m/t/1261562"&gt;many&lt;/a&gt;  &lt;a href="https://mathematica.stackexchange.com/a/167702/38205"&gt;different&lt;/a&gt;  &lt;a href="https://mathematica.stackexchange.com/questions/163780/sophisticated-api-integrations-making-a-card-game-in-mathematica"&gt;contexts&lt;/a&gt; but today we'll just use it. To install we pull the  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer/serviceconnectionyoutube.html#main-content"&gt;paclet off my server&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[&amp;quot;ServiceConnection_YouTube&amp;quot;,
  &amp;quot;Site&amp;quot;-&amp;gt;
    &amp;quot;http://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer/&amp;quot;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-8529256040837869960" src="https://b3m2a1.github.io/img/post22-8529256040837869960.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Authenticating with YouTube&lt;/h3&gt;
&lt;p&gt;One installed, we connect to the service as usual:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so = ServiceConnect[&amp;quot;YouTube&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This will open a dialog:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post22-2534758878895670558" src="https://b3m2a1.github.io/img/post22-2534758878895670558.png" /&gt;&lt;/p&gt;
&lt;p&gt;We'll click the sign in button, pick and account (I'll use my  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/making-a-blog-in-30-minutes.html#main-content"&gt;new personal account steve.wolfraum@gmail.com&lt;/a&gt; ):&lt;/p&gt;
&lt;p&gt;&lt;img alt="post22-6891487155877384696" src="https://b3m2a1.github.io/img/post22-6891487155877384696.png" /&gt;&lt;/p&gt;
&lt;p&gt;When we click "Allow" either we'll be taken to a nicely formatted local page with an access code running via  &lt;code&gt;HTTPHandling`StartWebServer&lt;/code&gt; or if that's being glitchy as it was right now, we'll copy the part of the URL starting with  &lt;code&gt;"code=4/..."&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="post22-5755985516881850876" src="https://b3m2a1.github.io/img/post22-5755985516881850876.png" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, we're connected:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-6049558537553480280" src="https://b3m2a1.github.io/img/post22-6049558537553480280.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Getting Data&lt;/h3&gt;
&lt;p&gt;The majority of the currently supported methods have to do with getting data about YouTube:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;Requests&amp;quot;]

(*Out:*)

{&amp;quot;Authentication&amp;quot;,&amp;quot;DeleteVideo&amp;quot;,&amp;quot;ID&amp;quot;,&amp;quot;Information&amp;quot;,&amp;quot;LastRequest&amp;quot;,&amp;quot;ListCaptions&amp;quot;,&amp;quot;ListChannelActivity&amp;quot;,&amp;quot;ListChannels&amp;quot;,&amp;quot;ListChannelSections&amp;quot;,&amp;quot;ListComments&amp;quot;,&amp;quot;ListCommentThreads&amp;quot;,&amp;quot;ListPlaylistItems&amp;quot;,&amp;quot;ListPlaylists&amp;quot;,&amp;quot;ListSubscriptions&amp;quot;,&amp;quot;ListVideos&amp;quot;,&amp;quot;Name&amp;quot;,&amp;quot;RawRequests&amp;quot;,&amp;quot;RequestData&amp;quot;,&amp;quot;RequestParameters&amp;quot;,&amp;quot;Search&amp;quot;,&amp;quot;UpdateVideo&amp;quot;,&amp;quot;UploadVideo&amp;quot;,&amp;quot;VideoURL&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We'll start with a search, maybe. First let's see what parameters we have to work with:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;RequestParameters&amp;quot;, &amp;quot;Request&amp;quot;-&amp;gt;&amp;quot;Search&amp;quot;]

(*Out:*)

&amp;lt;|&amp;quot;Parameters&amp;quot;-&amp;gt;{&amp;quot;q&amp;quot;,&amp;quot;part&amp;quot;,&amp;quot;forContentOwner&amp;quot;,&amp;quot;forDeveloper&amp;quot;,&amp;quot;forMine&amp;quot;,&amp;quot;relatedToVideoId&amp;quot;,&amp;quot;channelId&amp;quot;,&amp;quot;channelType&amp;quot;,&amp;quot;eventType&amp;quot;,&amp;quot;location&amp;quot;,&amp;quot;locationRadius&amp;quot;,&amp;quot;maxResults&amp;quot;,&amp;quot;onBehalfOfContentOwner&amp;quot;,&amp;quot;order&amp;quot;,&amp;quot;pageToken&amp;quot;,&amp;quot;publishedAfter&amp;quot;,&amp;quot;publishedBefore&amp;quot;,&amp;quot;q&amp;quot;,&amp;quot;regionCode&amp;quot;,&amp;quot;relevanceLanguage&amp;quot;,&amp;quot;safeSearch&amp;quot;,&amp;quot;topicId&amp;quot;,&amp;quot;type&amp;quot;,&amp;quot;videoCaption&amp;quot;,&amp;quot;videoCategoryId&amp;quot;,&amp;quot;videoDefinition&amp;quot;,&amp;quot;videoDimension&amp;quot;,&amp;quot;videoDuration&amp;quot;,&amp;quot;videoEmbeddable&amp;quot;,&amp;quot;videoLicense&amp;quot;,&amp;quot;videoSyndicated&amp;quot;,&amp;quot;videoType&amp;quot;},&amp;quot;Required&amp;quot;-&amp;gt;{&amp;quot;part&amp;quot;}|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we'll search for something bland, like "Steve Wolfraum". The YouTube API requires this  &lt;code&gt;"part"&lt;/code&gt; parameter to know what to return to use. I like to get the  &lt;code&gt;"id"&lt;/code&gt; and  &lt;code&gt;"snippet"&lt;/code&gt; parts, but you can  &lt;a href="https://developers.google.com/youtube/v3/getting-started#part"&gt;pick for yourself&lt;/a&gt; which parts you want. Just comma-separate your values and you can get multiple different ones:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;mySearch = $so[&amp;quot;Search&amp;quot;, &amp;quot;q&amp;quot;-&amp;gt;&amp;quot;Steve Wolfraum&amp;quot;, &amp;quot;part&amp;quot;-&amp;gt;&amp;quot;id,snippet&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-4316213154658629458" src="https://b3m2a1.github.io/img/post22-4316213154658629458.png" /&gt;&lt;/p&gt;
&lt;p&gt;We see there are  &lt;em&gt;tons&lt;/em&gt; of results for "my" name but we only get them five at a time. We can use the  &lt;code&gt;"nextPageToken"&lt;/code&gt; to get the next page of results, though. We can bump up the number we get with the  &lt;code&gt;"maxResults"&lt;/code&gt; parameter, but I see no need for that right now. Let's look at the first result here. I'll drill straight into that snippet parameter, as that's the most interesting part:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;mySearch[&amp;quot;items&amp;quot;, 1, &amp;quot;snippet&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-498969337448306280" src="https://b3m2a1.github.io/img/post22-498969337448306280.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we see, sadly, that instead of getting results for my name, Steve Wolfraum, we get them for some random dude name Stephen Wolfram. Not to be deterred, let's at least get something out of this and see a thumbnail for all our results. Tragically, we can't download videos with the YouTube API, but at least we get thumbnails...hooray? To make things more fun, we'll also add a filter to all these results, as the raw thumbnails really aren't all that interesting.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ImageAdjust@LaplacianGaussianFilter[Import[#], 3]&amp;amp;/@
  Normal@mySearch[&amp;quot;items&amp;quot;, All, &amp;quot;snippet&amp;quot;, &amp;quot;thumbnails&amp;quot;, &amp;quot;high&amp;quot;, &amp;quot;url&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-8416895123856568403" src="https://b3m2a1.github.io/img/post22-8416895123856568403.png" /&gt;&lt;/p&gt;
&lt;p&gt;Cool. There's some data. We can also pull out statistics and things, say for different videos broadcast on the Wolfram Research channel. First we'll get their channel ID:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;wriChannel=
  $so[&amp;quot;Search&amp;quot;, &amp;quot;q&amp;quot;-&amp;gt;&amp;quot;Wolfram Research&amp;quot;, &amp;quot;type&amp;quot;-&amp;gt;&amp;quot;channel&amp;quot;,
    &amp;quot;part&amp;quot;-&amp;gt;&amp;quot;id&amp;quot;, &amp;quot;maxResults&amp;quot;-&amp;gt;&amp;quot;1&amp;quot;][&amp;quot;items&amp;quot;, 1, &amp;quot;id&amp;quot;, &amp;quot;channelId&amp;quot;]

(*Out:*)

&amp;quot;UCJekgf6k62CQHdENWf2NgAQ&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we'll use this to extract the 50 most popular videos:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;wriVids=$so[&amp;quot;Search&amp;quot;, &amp;quot;channelId&amp;quot;-&amp;gt;wriChannel, &amp;quot;type&amp;quot;-&amp;gt;&amp;quot;video&amp;quot;, 
  &amp;quot;order&amp;quot;-&amp;gt;&amp;quot;viewCount&amp;quot;, &amp;quot;part&amp;quot;-&amp;gt;&amp;quot;id,snippet&amp;quot;, &amp;quot;maxResults&amp;quot;-&amp;gt;&amp;quot;50&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-5403531027782801587" src="https://b3m2a1.github.io/img/post22-5403531027782801587.png" /&gt;&lt;/p&gt;
&lt;p&gt;And now we'll get view counts:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;wriStats=$so[&amp;quot;ListVideos&amp;quot;, 
  &amp;quot;id&amp;quot;-&amp;gt;StringRiffle[Normal@wriVids[&amp;quot;items&amp;quot;, All, &amp;quot;id&amp;quot;, &amp;quot;videoId&amp;quot;], &amp;quot;,&amp;quot;], 
  &amp;quot;part&amp;quot;-&amp;gt;&amp;quot;statistics&amp;quot;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-4181911101890639189" src="https://b3m2a1.github.io/img/post22-4181911101890639189.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then we'll make a  &lt;a href="https://reference.wolfram.com/language/ref/WordCloud.html"&gt;&lt;code&gt;WordCloud&lt;/code&gt;&lt;/a&gt; of titles vs viewcounts:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;WordCloud@
  AssociationThread[
    Normal@wriVids[&amp;quot;items&amp;quot;, All, &amp;quot;snippet&amp;quot;, &amp;quot;title&amp;quot;],
    ToExpression@Normal@wriStats[&amp;quot;items&amp;quot;, All, &amp;quot;statistics&amp;quot;, &amp;quot;viewCount&amp;quot;]
    ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-948349109694102953" src="https://b3m2a1.github.io/img/post22-948349109694102953.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we see as far as YouTube cares, there's really only one video WRI has made. But dropping that one we might see some more interesting structure:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;WordCloud@
  AssociationThread[
    Rest@Normal@wriVids[&amp;quot;items&amp;quot;, All, &amp;quot;snippet&amp;quot;, &amp;quot;title&amp;quot;],
    Rest@ToExpression@Normal@wriStats[&amp;quot;items&amp;quot;, All, &amp;quot;statistics&amp;quot;, &amp;quot;viewCount&amp;quot;]
    ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-978266547142309807" src="https://b3m2a1.github.io/img/post22-978266547142309807.png" /&gt;&lt;/p&gt;
&lt;p&gt;And it seems that people really like the basics and...really like seismic waves?&lt;/p&gt;
&lt;p&gt;I'll embed the first of those so we can see how good the really are:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;EmbedIFrame&amp;quot;, &amp;quot;id&amp;quot;-&amp;gt;wriVids[&amp;quot;items&amp;quot;, 3, &amp;quot;id&amp;quot;, &amp;quot;videoId&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;


&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/2rYjlVPU9U4?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;

&lt;h3&gt;Uploading Videos&lt;/h3&gt;
&lt;p&gt;A YouTube API wouldn't be much of a YouTube API if it couldn't upload videos, of course, so I cooked that in as well.&lt;/p&gt;
&lt;p&gt;Here's a sample of that. We'll first pull an animation off the  &lt;a href="https://reference.wolfram.com/language/ref/Manipulate.html"&gt;&lt;code&gt;Manipulate&lt;/code&gt;&lt;/a&gt; docs:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;anim =
  Export[
    FileNameJoin@{$TemporaryDirectory, &amp;quot;plot3d.flv&amp;quot;},
    Manipulate[
      Plot3D[Sin[n x y], 
        {x, 0, 3}, {y, 0, 3}, 
        ViewPoint -&amp;gt; Dynamic[{2, v, 2}], SphericalRegion -&amp;gt; True, Ticks -&amp;gt; None,
        PerformanceGoal-&amp;gt;&amp;quot;Quality&amp;quot;
        ], 
      {n, 1, 4}, 
      {v, -2, 2}
      ]
    ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we'll upload the video we made:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;upload = $so[&amp;quot;UploadVideo&amp;quot;, &amp;quot;part&amp;quot;-&amp;gt;&amp;quot;id&amp;quot;, &amp;quot;BodyContent&amp;quot;-&amp;gt;anim];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we attach a title and things in a second request:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;UpdateVideo&amp;quot;, &amp;quot;id&amp;quot; -&amp;gt; upload[&amp;quot;id&amp;quot;],
 &amp;quot;part&amp;quot; -&amp;gt; &amp;quot;snippet&amp;quot;,
  &amp;quot;Title&amp;quot; -&amp;gt; &amp;quot;Mathematica Examples: Plot 3D&amp;quot;,
 &amp;quot;CategoryID&amp;quot; -&amp;gt; &amp;quot;22&amp;quot;
 ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post22-4324612576805415951" src="https://b3m2a1.github.io/img/post22-4324612576805415951.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then now we'll embed that video we just made:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;EmbedIFrame&amp;quot;, &amp;quot;id&amp;quot;-&amp;gt;upload[&amp;quot;id&amp;quot;]]&lt;/code&gt;&lt;/pre&gt;


&lt;iframe id="ytplayer" type="text/html" width="640" height="360"
src="https://www.youtube.com/embed/Quzcr4Vuq_Q?autoplay=0"
  frameborder="0"&gt;&lt;/iframe&gt;</content></entry><entry><title>Adding a Paclet to the Mathematica Paclet Server</title><link href="https://b3m2a1.github.io/adding-a-paclet-to-the-mathematica-paclet-server.html" rel="alternate"></link><published>2018-09-27T22:48:30-05:00</published><updated>2018-09-27T22:48:30-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-09-27:/adding-a-paclet-to-the-mathematica-paclet-server.html</id><summary type="html">&lt;p&gt;This'll be a short-and-sweet explanation of how to add a paclet to the  &lt;a href="https://paclets.github.io/PacletServer/"&gt;Mathematica Paclet Server&lt;/a&gt; . The hope is that it shows how easy these things can be.&lt;/p&gt;
&lt;p&gt;To showcase this I'll add my  &lt;a href="https://github.com/b3m2a1/Ems"&gt;Ems&lt;/a&gt; package that I showcased in my post  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/making-a-blog-in-30-minutes.html"&gt;Making a Blog in 30 Minutes&lt;/a&gt; . The first …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This'll be a short-and-sweet explanation of how to add a paclet to the  &lt;a href="https://paclets.github.io/PacletServer/"&gt;Mathematica Paclet Server&lt;/a&gt; . The hope is that it shows how easy these things can be.&lt;/p&gt;
&lt;p&gt;To showcase this I'll add my  &lt;a href="https://github.com/b3m2a1/Ems"&gt;Ems&lt;/a&gt; package that I showcased in my post  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/making-a-blog-in-30-minutes.html"&gt;Making a Blog in 30 Minutes&lt;/a&gt; . The first step is to install the interface paclet off the paclet server. To do this we'll go to  &lt;a href="https://paclets.github.io/PacletServer/publicpacletserver.html"&gt;its page&lt;/a&gt; and copy the installation instructions given there:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[
  &amp;quot;PublicPacletServer&amp;quot;,
  &amp;quot;Site&amp;quot;-&amp;gt;
    &amp;quot;http://raw.githubusercontent.com/paclets/PacletServer/master&amp;quot;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post21-6722923238009970110" src="https://b3m2a1.github.io/img/post21-6722923238009970110.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now, we load this package&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt;PublicPacletServer`&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then since Ems is already on my personal server I can just point the registration there:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServer[&amp;quot;RegisterPaclet&amp;quot;,
  &amp;lt;|
    &amp;quot;Name&amp;quot;-&amp;gt;&amp;quot;Ems&amp;quot;,
    &amp;quot;Author&amp;quot;-&amp;gt;&amp;quot;b3m2a1 &amp;lt;b3m2a1@gmail.com&amp;gt;&amp;quot;,
    &amp;quot;URL&amp;quot;-&amp;gt;&amp;quot;http://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer&amp;quot;,
    &amp;quot;Update&amp;quot;-&amp;gt;&amp;quot;DownloadOnce&amp;quot;
    |&amp;gt;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post21-2385149726991367475" src="https://b3m2a1.github.io/img/post21-2385149726991367475.png" /&gt;&lt;/p&gt;
&lt;p&gt;If I wanted it to download from GitHub, since I already have it on my GitHub instead I could also have just done:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServer[&amp;quot;RegisterPaclet&amp;quot;, &amp;quot;Ems&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which would have done the same.&lt;/p&gt;
&lt;p&gt;Now we can look at the  &lt;a href="https://github.com/paclets/PacletServer/issues/39"&gt;request that was made&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="post21-4494400686262893646" src="https://b3m2a1.github.io/img/post21-4494400686262893646.png" /&gt;&lt;/p&gt;
&lt;p&gt;And that's basically all that needs to be done. At that point the ball is firmly in my court and so we'll just go through what  &lt;em&gt;I&lt;/em&gt; do now to get the request fulfilled.&lt;/p&gt;
&lt;p&gt;First I open up the  &lt;a href="https://github.com/paclets/PacletServer/blob/master/ReviewQueue/IncludedPaclets.wl"&gt;IncludedPaclets.wl&lt;/a&gt; file that lists the paclets that are registered to download. Then I add an entry based odd the info provided:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post21-7329852412831181232" src="https://b3m2a1.github.io/img/post21-7329852412831181232.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then I open  &lt;a href="https://github.com/paclets/PacletServer/blob/master/build/build.nb"&gt;build.nb&lt;/a&gt; which handles all the builds of the server and find the line that says: &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServerRebuild[];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And just run that. The server rebuilds, the paclets download, and in the end it pushes everything to GitHub. Simple as that.&lt;/p&gt;
&lt;p&gt;Before rebuilding, though, we'll have some actually do one more thing which is to submit a paclet update (as packages do, in fact, need updates!). For this to work, the paclet first had to have been registered, but after that all we need to do is make use of the  &lt;code&gt;"RequestPacletUpdate"&lt;/code&gt; method of the  &lt;code&gt;PublicPacletServer&lt;/code&gt; . I just recently decided to add some more object-oriented syntax for it, so we'll make use of that to request the update that will get the new version of the paclet that supports that onto the server:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServer@&amp;quot;RequestPacletUpdate&amp;quot;[&amp;quot;PublicPacletServer&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post21-1211660871057209269" src="https://b3m2a1.github.io/img/post21-1211660871057209269.png" /&gt;&lt;/p&gt;
&lt;p&gt;Looking at the old registration page we see that an update has been requested:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post21-8343592441183779473" src="https://b3m2a1.github.io/img/post21-8343592441183779473.png" /&gt;&lt;/p&gt;
&lt;p&gt;And I handle this much like I handle all the others, except I go to the entry in the included paclets file and change the  &lt;code&gt;"DownloadNever"&lt;/code&gt; to a  &lt;code&gt;"DownloadOnce"&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="post21-2905139062477497817" src="https://b3m2a1.github.io/img/post21-2905139062477497817.png" /&gt;&lt;/p&gt;
&lt;p&gt;With that in place, I'll go back to the build notebook and do a proper build:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post21-7732348920836887034" src="https://b3m2a1.github.io/img/post21-7732348920836887034.png" /&gt;&lt;/p&gt;
&lt;p&gt;And a few seconds later the  &lt;a href="https://paclets.github.io/PacletServer/ems.html"&gt;new content&lt;/a&gt; is on the  &lt;a href="https://paclets.github.io/PacletServer/"&gt;paclet server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post21-5312486852621690036" src="https://b3m2a1.github.io/img/post21-5312486852621690036.png" /&gt;&lt;/p&gt;
&lt;p&gt;Hopefully this was enough to give you the confidence to submit your own paclets too. And always feel free to open an issue or otherwise comment on the repo if there's something you'd like further clarification on.&lt;/p&gt;</content></entry><entry><title>Making a Blog in 30 Minutes</title><link href="https://b3m2a1.github.io/making-a-blog-in-30-minutes.html" rel="alternate"></link><published>2018-09-26T17:38:53-05:00</published><updated>2018-09-26T18:21:15-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-09-26:/making-a-blog-in-30-minutes.html</id><summary type="html">&lt;p&gt;Today I'm going to have a bit of fun showing off a polished up project of mine. We're going to make a full-fledged Mathematica blog in under 30 minutes using a package of mine called  &lt;a href="https://github.com/b3m2a1/Ems"&gt;Ems&lt;/a&gt; . Let's get the clock started!&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$start = Now

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post20-143897372696997121" src="https://b3m2a1.github.io/img/post20-143897372696997121.png" /&gt;&lt;/p&gt;
&lt;p&gt;The first thing we'll need to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today I'm going to have a bit of fun showing off a polished up project of mine. We're going to make a full-fledged Mathematica blog in under 30 minutes using a package of mine called  &lt;a href="https://github.com/b3m2a1/Ems"&gt;Ems&lt;/a&gt; . Let's get the clock started!&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$start = Now

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post20-143897372696997121" src="https://b3m2a1.github.io/img/post20-143897372696997121.png" /&gt;&lt;/p&gt;
&lt;p&gt;The first thing we'll need to do is get the package installed. Happily this is easy as I put it on my  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/building-a-mathematica-package-ecosystem-part-1.html#main-content"&gt;paclet server&lt;/a&gt; , so it's just a single line of code:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[&amp;quot;Ems&amp;quot;,
  &amp;quot;Site&amp;quot;-&amp;gt;&amp;quot;http://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer&amp;quot;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post20-6044376379303271593" src="https://b3m2a1.github.io/img/post20-6044376379303271593.png" /&gt;&lt;/p&gt;
&lt;p&gt;This has installed Ems for us so now we just need to open up the  &lt;code&gt;Ems Assistant&lt;/code&gt; palette that was installed for us:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-3018764253048518340" src="https://b3m2a1.github.io/img/post20-3018764253048518340.png" /&gt;&lt;/p&gt;
&lt;p&gt;This opens up a helpful palette that will be our primary point of contact to the package.&lt;/p&gt;
&lt;p&gt;The first thing we'll do is create a new site but clicking on  &lt;img alt="post20-1706016611082382042" src="https://b3m2a1.github.io/img/post20-1706016611082382042.png" /&gt; down at the bottom of the palette. This opens a little window for us:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-8612153873720446237" src="https://b3m2a1.github.io/img/post20-8612153873720446237.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let's call our site  &lt;code&gt;"home"&lt;/code&gt; . When we do that we'll see the site picker at the top of the palette get set to  &lt;code&gt;"home"&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-3971340583569845046" src="https://b3m2a1.github.io/img/post20-3971340583569845046.png" /&gt;&lt;/p&gt;
&lt;p&gt;Next we'll get our site configured, so we'll click on  &lt;img alt="post20-1272344427469810573" src="https://b3m2a1.github.io/img/post20-1272344427469810573.png" /&gt; in the second panel of buttons. It'll pop open the  &lt;code&gt;SiteConfig.wl&lt;/code&gt; file where we'll make most of our changes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-1794282584951826230" src="https://b3m2a1.github.io/img/post20-1794282584951826230.png" /&gt;&lt;/p&gt;
&lt;p&gt;We see a bunch of options, but we'll just change a few things. The theme setting  &lt;code&gt;"bootstap-blog"&lt;/code&gt; provides a bunch of config options that we'll ignore. The big thing we'll change is the  &lt;code&gt;"SiteName"&lt;/code&gt; and the  &lt;code&gt;"SiteURL"&lt;/code&gt; . Before we do this, though, we'll need to decide on a deployment location. For the sake of argument, let's say my name is Steve Wolfraum. First I'll register steve.wolfraum@gmail.com:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-2073302413032380876" src="https://b3m2a1.github.io/img/post20-2073302413032380876.png" /&gt;&lt;/p&gt;
&lt;p&gt;Next I'll setup a Wolfram Cloud account with this GMail so we can deploy there:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-3093181126200354721" src="https://b3m2a1.github.io/img/post20-3093181126200354721.png" /&gt;&lt;/p&gt;
&lt;p&gt;These configuration things took us ~15 minutes:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$midway = Now
$midway - $start

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post20-7580949778323143944" src="https://b3m2a1.github.io/img/post20-7580949778323143944.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)

14.4225min&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we go back to our config and put in our  &lt;code&gt;"SiteURL"&lt;/code&gt; , which will just be our cloud base +  &lt;code&gt;"home"&lt;/code&gt; and we will also add a  &lt;code&gt;"SiteName"&lt;/code&gt; , which for convenience we'll say is  &lt;code&gt;"Steve Wolfraum"&lt;/code&gt; . Finally, for deployment we'll add our  &lt;code&gt;$WolframID&lt;/code&gt; to the   &lt;code&gt;CloudConnect&lt;/code&gt; option so that the system will know to connect there before deployment. Finally, there's a bug in the current  &lt;code&gt;"NeuralNetworks`"&lt;/code&gt; paclet that causes it to fail to find the default  &lt;code&gt;"SummaryLength"&lt;/code&gt; (which is one paragraph) so we'll convert that to one line instead.&lt;/p&gt;
&lt;p&gt;After all this our config looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-6413911531400461128" src="https://b3m2a1.github.io/img/post20-6413911531400461128.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now we just need to add some content! The  &lt;code&gt;"blog"&lt;/code&gt; template that we initialized off of has some template content for us, so we'll just build off of that. The first thing is to change the  &lt;code&gt;About&lt;/code&gt; page which we'll find is in the  &lt;code&gt;Open Page&lt;/code&gt; menu. This opens the notebook and we'll just add some personalized content:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-1596109516291035206" src="https://b3m2a1.github.io/img/post20-1596109516291035206.png" /&gt;&lt;/p&gt;
&lt;p&gt;We'll do the same for the first of the template posts:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-6114702035088562840" src="https://b3m2a1.github.io/img/post20-6114702035088562840.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now we just call  &lt;code&gt;"Build Pages"&lt;/code&gt; in the palette (I prefer to turn off  &lt;code&gt;"Silent"&lt;/code&gt; but that's up to you). This will open a page that looks bad for now, but will look right once it's deployed:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-7477456888420053168" src="https://b3m2a1.github.io/img/post20-7477456888420053168.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now we'll actually deploy this using the  &lt;code&gt;"Deploy Site"&lt;/code&gt; button. All the content will get copied up to the cloud directory starting with the site folder name we gave at the very beginning ( &lt;code&gt;"home"&lt;/code&gt; ). This is also the URL we provided as the  &lt;code&gt;"SiteURL"&lt;/code&gt; but the two don't necessarily have to be the same. The latter is only used to locate resources and things of that nature.&lt;/p&gt;
&lt;p&gt;After the deployment is done the page will open and we'll see our brand new site:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post20-8398158422932287388" src="https://b3m2a1.github.io/img/post20-8398158422932287388.png" /&gt;&lt;/p&gt;
&lt;p&gt;And checking our timing:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$stop = Now
$stop - $start

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post20-3076418382623228239" src="https://b3m2a1.github.io/img/post20-3076418382623228239.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)

29.718min&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we just barely snuck under the bar.&lt;/p&gt;</content></entry><entry><title>PJLink: Hooking up Mathematica and Python</title><link href="https://b3m2a1.github.io/pjlink-hooking-up-mathematica-and-python.html" rel="alternate"></link><published>2018-09-19T10:08:09-05:00</published><updated>2018-09-20T02:10:19-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-09-19:/pjlink-hooking-up-mathematica-and-python.html</id><summary type="html">&lt;p&gt;Mathematica is an incredibly powerful platform with a fun and intellectually pleasing language, but is incredibly expensive, closed source, and Stephen Wolfram rubs many people the wrong way. Python is a convenient, pretty powerful language with a lot of support from the developer community. For as long as the two …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Mathematica is an incredibly powerful platform with a fun and intellectually pleasing language, but is incredibly expensive, closed source, and Stephen Wolfram rubs many people the wrong way. Python is a convenient, pretty powerful language with a lot of support from the developer community. For as long as the two have existed people have been trying to tie them together, but very little has been done to do so at the native level with efficient, convenient exchange between the two. That's why over the past few weeks I took the time to build a clean, convenient link between the two. This post will go into how the link was built and some of its features, but first I think a little demo is appropriate.&lt;/p&gt;
&lt;p&gt;&lt;a id="a-quick-demo" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Quick Demo&lt;/h2&gt;
&lt;h3&gt;Installing PJLink&lt;/h3&gt;
&lt;p&gt;The link is based off of the  &lt;a href="https://reference.wolfram.com/language/JLink/tutorial/Overview.html"&gt;J/Link&lt;/a&gt; interface built into Mathematica for hooking up Java and Mathematica. To wit, I called it  &lt;a href="https://github.com/b3m2a1/PJLink"&gt;PJ/Link&lt;/a&gt; . It lives on my paclet server as well as GitHub, so we can easily install it from there:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[&amp;quot;PJLink&amp;quot;, &amp;quot;Site&amp;quot;-&amp;gt;&amp;quot;http://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="hookingupmathematicaandpython-274752603667507597" src="https://b3m2a1.github.io/img/hookingupmathematicaandpython-274752603667507597.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Loading PJLink in Jupyter&lt;/h3&gt;
&lt;p&gt;For this demo we'll need the path to this thing as well (note that the version might change in the future):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;%[&amp;quot;Location&amp;quot;]

(*Out:*)

&amp;quot;~/Library/Mathematica/Paclets/Repository/PJLink-1.0.0&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we'll leave Mathematica and open up a Jupyter notebook:&lt;/p&gt;
&lt;p&gt;&lt;img alt="hookingupmathematicaandpython-921972091567300718" src="https://b3m2a1.github.io/img/hookingupmathematicaandpython-921972091567300718.png" /&gt;&lt;/p&gt;
&lt;p&gt;Next we'll get that path available so we can actually make use of the package. Then we'll load things from the subsidiary  &lt;code&gt;SubprocessKernel&lt;/code&gt; package which is included in the paclet and makes use of PJLink:&lt;/p&gt;
&lt;pre&gt;import os, sys
pjlink_path = &amp;quot;~/Library/Mathematica/Paclets/Repository/PJLink-1.0.0&amp;quot; #this is whatever path was extracted before
sys.path.insert(0, os.path.expanduser (pjlink_path))

from SubprocessKernel import SubprocessKernel
from SubprocessKernel import MathematicaBlock, LinkEnvironment
## these are helpers I&amp;apos; ll use in the demo&lt;/pre&gt;

&lt;p&gt;&lt;img alt="hookingupmathematicaandpython-695494794636171070" src="https://b3m2a1.github.io/img/hookingupmathematicaandpython-695494794636171070.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Bidirectional Communication&lt;/h3&gt;
&lt;p&gt;Once we have this we can start a subprocess kernel which will open a Mathematica front-end to interact with. We'll also start and evaluator Mathematica can use to call back into python.&lt;/p&gt;
&lt;p&gt;You may see a long string of output from your C compiler as the setup.py file builds out the native library that PJLink uses. Don't worry, this should only happen once. If it fails, raise an issue on  &lt;a href="https://github.com/b3m2a1/PJLink/issues"&gt;GitHub&lt;/a&gt; so I can deal with it.&lt;/p&gt;
&lt;p&gt;Once Mathematica has loaded, we'll use the  &lt;code&gt;MathematicaBlock&lt;/code&gt; context manager so we can write something that looks a lot like Mathematica code and use the  &lt;code&gt;MEval&lt;/code&gt; function we'll define to run the code. That code for all this looks like:&lt;/p&gt;
&lt;pre&gt;ker = SubprocessKernel()
def MEval (expr, wait = True, kernel = ker) :
     &amp;quot;&amp;quot; &amp;quot;MEval evaluates a Mathematica expression in the Mathematica kernel

      &amp;quot; &amp;quot;&amp;quot;
    kernel.drain() # just to make sure things are clen
    return kernel.evaluate (expr, wait = wait)
ker.start()
ker.start_evaluator()&lt;/pre&gt;

&lt;p&gt;After that we can simply call into Mathematica:&lt;/p&gt;
&lt;pre&gt;with MathematicaBlock():
      res = MEval (Set (M.hi, &amp;quot;Hello from python!&amp;quot;))
res&lt;/pre&gt;

&lt;p&gt;&lt;img alt="hookingupmathematicaandpython-4447232891793681130" src="https://b3m2a1.github.io/img/hookingupmathematicaandpython-4447232891793681130.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see string  &lt;code&gt;"Hello from python!"&lt;/code&gt; was set to the symbol  &lt;code&gt;hi&lt;/code&gt; on the Mathematica side and was returned back by  &lt;code&gt;MEval&lt;/code&gt; . Symbols that aren't in the  &lt;code&gt;"System`"&lt;/code&gt;  context need to be prefaced by an  &lt;code&gt;M.&lt;/code&gt; as that's a special class that can resolve symbol names like that.&lt;/p&gt;
&lt;p&gt;We can also get efficient data transfer of arrays from either side. Here we'll take some Mathematica data and get it back out on the python side. The first thing we need to do is go to the Mathematica notebook that opened and load the  &lt;code&gt;"PJLink`"&lt;/code&gt; context. Then we'll install the python runtime that the  &lt;code&gt;SubprocessKernel&lt;/code&gt; object configured. This looks like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt;PJLink`
InstallPython[ LinkObject-&amp;gt;SubprocessKernel`$PyEvaluateLink, ProcessObject-&amp;gt;None];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Once it's installed, we'll use it directly via  &lt;code&gt;PyEvaluate&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;With[{arr= RandomReal[{-1, 1}, {50, 50, 50}]},
  PyEvaluate[dat=arr]
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Calls into python are done in an environment held only by the link, so to access that we need to wrap the evaluator we started ( &lt;code&gt;ker.evaluator&lt;/code&gt; ) in a  &lt;code&gt;LinkEnvironment&lt;/code&gt; context manager:&lt;/p&gt;
&lt;pre&gt;with LinkEnvironment(ker.evaluator):
      res = dat.shape
res&lt;/pre&gt;

&lt;p&gt;&lt;img alt="hookingupmathematicaandpython-8804306407173974153" src="https://b3m2a1.github.io/img/hookingupmathematicaandpython-8804306407173974153.png" /&gt;&lt;/p&gt;
&lt;p&gt;Arrays are held as NumPy arrays by default on the python side, although this may be disabled. If disabled, they're held as a data type called  &lt;code&gt;BufferedNDArray&lt;/code&gt; which holds the data as a single C-contiguous array and allows slicing and viewing into it (although no efficient math or manipulation of any sort).&lt;/p&gt;
&lt;p&gt;Finally, to close out the demo, we'll plot something on the Mathematica side and watch it come back on the python side. The code for this should be pretty self-explanatory by this point, but there is one cute feature to note:&lt;/p&gt;
&lt;pre&gt;with MathematicaBlock():
      res = MEval(
           Rasterize(
                 Plot(Sin (M.x), List (M.x, 0, Times (2, Pi)),
                       ImageSize = [250, 250],
                       PlotLabel = &amp;quot;sin(x) as plotted in Mathematica&amp;quot;
                       )
                 )
           )
res&lt;/pre&gt;

&lt;p&gt;Unfortunately it really does matter that we pass a  &lt;code&gt;List&lt;/code&gt; expression instead of a python list for the second argument to  &lt;code&gt;Plot&lt;/code&gt; as otherwise the system hangs for reasons that aren't totally clear. On the other hand, we can see how nice options passing is in the interface. We make use of the python  &lt;code&gt;**kwargs&lt;/code&gt; setup and that  &lt;code&gt;ImageSize= ...&lt;/code&gt; and  &lt;code&gt;PlotLabel= ...&lt;/code&gt; both get automatically converted into rules (albeit with a  &lt;code&gt;String&lt;/code&gt; key instead of a  &lt;code&gt;Symbol&lt;/code&gt; ). The  &lt;code&gt;Rasterize&lt;/code&gt; is, sadly, similarly necessary as there is currently no logic in the package to automatically convert  &lt;code&gt;Graphics&lt;/code&gt; expression into their rasterized forms. &lt;/p&gt;
&lt;p&gt;&lt;img alt="hookingupmathematicaandpython-6192533434254394386" src="https://b3m2a1.github.io/img/hookingupmathematicaandpython-6192533434254394386.png" /&gt;&lt;/p&gt;
&lt;p&gt;I think we'll close out the demo here, though, and move onto a description of how this works.&lt;/p&gt;
&lt;p&gt;&lt;a id="pjlink-native-library" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;PJLink Native Library&lt;/h2&gt;
&lt;p&gt;The heart of PJLink is the C library that connects a python runtime to MathLink. The source for this can be found  &lt;a href="https://github.com/b3m2a1/PJLink/blob/master/PJLink/PJLinkNativeLibrary/src/PJLinkNativeLibrary.cpp"&gt;here&lt;/a&gt; . This library, once compiled by the setup.py file packaged with it, implements the basic MathLink calls in a way that python can use them and attempts to do so with efficient memory usage and data transfer.&lt;/p&gt;
&lt;h3&gt;Data Sharing in the Native Library&lt;/h3&gt;
&lt;p&gt;The heart of the native library is the set of  &lt;code&gt;PutArray&lt;/code&gt; and  &lt;code&gt;GetArray&lt;/code&gt; functions it implements. Beyond anything else, it is the fast transfer of large arrays of data that makes a C-level connection so appealing. The way we handle this on the python side is via the python  &lt;a href="https://docs.python.org/3/c-api/buffer.html"&gt;buffer protocol&lt;/a&gt; . We enforce the condition that all data sent and received on the python side must be handled by an object that can work with a C-contiguous buffer of data. By default this is done with  &lt;a href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt; if it is installed, but if not there is a custom object called  &lt;code&gt;BufferedNDArray&lt;/code&gt; in the  &lt;a href="https://github.com/b3m2a1/PJLink/blob/master/PJLink/HelperClasses.py"&gt;HelperClasses&lt;/a&gt; package that deals with this.&lt;/p&gt;
&lt;h3&gt;Threading in the Native Library&lt;/h3&gt;
&lt;p&gt;Python has something called the  &lt;a href="https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock"&gt;Global Interpreter Lock (GIL)&lt;/a&gt; which is a method for synchronizing python state. Unfortunately for us, the presence of the GIL means that standard C calls of the kind we'll be using will cause all threads to lock. To get around this, every call into the MathLink library in the native library is wrapped in the  &lt;code&gt;MLTHREADED&lt;/code&gt; macro which handles the releasing and reacquiring of the lock. This allows our threads to work once more. Any extensions to the library should keep this in mind.&lt;/p&gt;
&lt;p&gt;&lt;a id="class-structures" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Class Structures&lt;/h2&gt;
&lt;p&gt;PJLink provides a glut of classes that handle the details communication, so we will quickly detail what the important ones do. More information is always available upon request.&lt;/p&gt;
&lt;h3&gt;The *Link classes&lt;/h3&gt;
&lt;p&gt;PJLink is based off of JLink and so it makes use of the same kind of class structure that JLink does. This means that it has a  &lt;code&gt;MathLink&lt;/code&gt; class that provides a template for the kind of link we'll work with and a  &lt;code&gt;KernelLink&lt;/code&gt; class that works specifically with Mathematica kernels. In general, we will only really work with a subclass of a  &lt;code&gt;KernelLink&lt;/code&gt; called a  &lt;code&gt;WrappedKernelLink&lt;/code&gt; that implements the  &lt;code&gt;KernelLink&lt;/code&gt; interface by calling into a  &lt;code&gt;NativeLink&lt;/code&gt; which is the only class which actually touches the native library at all.&lt;/p&gt;
&lt;p&gt;If one is controlling a Mathematica kernel from python, it will be handled by a  &lt;code&gt;WrappedKernelLink&lt;/code&gt; .&lt;/p&gt;
&lt;h3&gt;Reader class&lt;/h3&gt;
&lt;p&gt;The  &lt;code&gt;Reader&lt;/code&gt; class handles the other half of the communication. It waits for calls from Mathematica and processes them via the  &lt;code&gt;KernelLink._handlePacket&lt;/code&gt; function. Most commonly these calls in turn call  &lt;code&gt;KernelLink.__callPython&lt;/code&gt; which builds a python call from the symbolic python packet that  &lt;code&gt;PyEvaluate&lt;/code&gt; sends over the link. A  &lt;code&gt;Reader&lt;/code&gt; does its best not to completely prevent its link from passing data  &lt;em&gt;to&lt;/em&gt; Mathematica, but in general it is best not to depend on this as the  &lt;code&gt;NativeLink&lt;/code&gt; interface allows only a single thread to access the library at once for reasons of safety and stability.&lt;/p&gt;
&lt;h3&gt;MathLinkEnvironment and MathLinkException&lt;/h3&gt;
&lt;p&gt;The  &lt;code&gt;MathLinkEnvironment&lt;/code&gt; is a standalone class that handles all of the various flags and state that the links need. It centralizes all information about what a given token or flag from MathLink means and provides utility functions for working with this.  &lt;code&gt;MathLinkException&lt;/code&gt; is a subclass of the standard python  &lt;code&gt;Exception&lt;/code&gt; class that handles the MathLink-specific exceptions that are returned. It in turn calls into  &lt;code&gt;MathLinkEnvironment&lt;/code&gt; to learn what various exceptions mean.&lt;/p&gt;
&lt;h3&gt;MPackage, MLSym, and MLExpr&lt;/h3&gt;
&lt;p&gt;The HelperClasses package provides a large number of (generally) smaller classes that serve to make code cleaner in its implementation. A big part of this is done by the  &lt;code&gt;MPackage&lt;/code&gt; ,  &lt;code&gt;MLSym&lt;/code&gt; , and  &lt;code&gt;MLExpr&lt;/code&gt; classes, which allow for a way to create packets with a syntax that looks more like standard Mathematica code.  &lt;code&gt;MLSym&lt;/code&gt; and  &lt;code&gt;MLExpr&lt;/code&gt; are types that a  &lt;code&gt;KernelLink&lt;/code&gt; knows how to put onto a link and  &lt;code&gt;MPackage&lt;/code&gt; provides utilities and a custom  &lt;code&gt;__getattr__&lt;/code&gt; so that the packet code can look like Mathematica code.&lt;/p&gt;
&lt;h3&gt;MathematicaBlock and LinkEnvironment&lt;/h3&gt;
&lt;p&gt;Both  &lt;code&gt;MathematicaBlock&lt;/code&gt; and  &lt;code&gt;LinkEnvironment&lt;/code&gt; are also in the HelperClasses. They both edit the current evaluation state as  &lt;a href="https://docs.python.org/3/reference/datamodel.html#context-managers"&gt;context managers&lt;/a&gt; so that explicit references to  &lt;code&gt;MPackage&lt;/code&gt; can be dropped and variables held by a given link can be easily accessed. Being context managers, they are both used via  &lt;code&gt;with&lt;/code&gt; statements and change the execution environment of the enclosing block.&lt;/p&gt;
&lt;h3&gt;BufferedNDArray, ImageData, and SparseArrayData&lt;/h3&gt;
&lt;p&gt;These are all data classes that allow for more efficient and convenient data transfer. The  &lt;code&gt;ImageData&lt;/code&gt; and  &lt;code&gt;SparseArrayData&lt;/code&gt; classes hold data coming in from Mathematica as put using  &lt;code&gt;PJLink`Package`AddTypeHints&lt;/code&gt; . They have methods to efficiently transform to more standard formats like  &lt;code&gt;PIL.Image&lt;/code&gt; and  &lt;code&gt;scipy.sparse.csr_matrix&lt;/code&gt; . As more data types are handled by  &lt;code&gt;AddTypeHints&lt;/code&gt; it can be assumed that more classes like these will be written.&lt;/p&gt;
&lt;p&gt;&lt;a id="mathematicaside-package" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Mathematica-side Package&lt;/h2&gt;
&lt;p&gt;That was all to do with the python side of things, which is where most of the development work had to go. On the other hand, the Mathematica side of the equation still requires some explanation. The package itself is really quite simple, so please feel free to  &lt;a href="https://github.com/b3m2a1/PJLink/blob/master/Mathematica/PJLink.wl"&gt;peruse the source&lt;/a&gt; .&lt;/p&gt;
&lt;h3&gt;InstallPython&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;InstallPython&lt;/code&gt; is the most basic function in the package. It either finds or is given a python version or executable, attempts to open it via  &lt;code&gt;StartProcess&lt;/code&gt; , then links to it via  &lt;code&gt;LinkCreate&lt;/code&gt; and the  &lt;code&gt;start_kernel.py&lt;/code&gt; script provided in the PJLink python package.&lt;/p&gt;
&lt;p&gt;Notably, all it really requires is a  &lt;code&gt;LinkObject&lt;/code&gt; , so you can pass one directly via the  &lt;code&gt;LinkObject&lt;/code&gt; option. It will also by default try to make a python  &lt;code&gt;ProcessObject&lt;/code&gt; but you can pass that via the  &lt;code&gt;ProcessObject&lt;/code&gt; option or you can pass  &lt;code&gt;None&lt;/code&gt; in which case it won't attach to a Mathematica controlled process.&lt;/p&gt;
&lt;h3&gt;ClosePython&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ClosePython&lt;/code&gt; is the counterpart to  &lt;code&gt;InstallPython&lt;/code&gt; . It closes an opened python runtime by version or executable. When a new kernel is installed it is added to  &lt;code&gt;PJLink`Package`$PythonKernels&lt;/code&gt; and this is what  &lt;code&gt;ClosePython&lt;/code&gt; looks for to close. &lt;/p&gt;
&lt;h3&gt;PyEvaluate / PyEvaluateString&lt;/h3&gt;
&lt;p&gt;This is the heart of the package. It takes Mathematica-esque code, converts it into a structure that can be processed by  &lt;code&gt;KernelLink.__callPython()&lt;/code&gt; and sends it over and waits for a response. The conversion is handled by  &lt;code&gt;PJLink`SymbolicPython`ToSymbolicPython&lt;/code&gt; which was originally written for the  &lt;a href="https://github.com/b3m2a1/mathematica-PyTools"&gt;PyTools package&lt;/a&gt; . This is the best way to move data to python as things like  &lt;code&gt;Image&lt;/code&gt; objects, packable arrays, and  &lt;code&gt;SparseArray&lt;/code&gt; objects will be moved over intelligently.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PyEvaluateString&lt;/code&gt; is like  &lt;code&gt;PyEvaluate&lt;/code&gt; , but with the recognition that  &lt;code&gt;ToSymbolicPython&lt;/code&gt; will always be a little bit lacking. It allows one to simply call a string of python code on the link and get the results back.&lt;/p&gt;
&lt;h3&gt;PyWrite / PyWriteString / PyRead / PyReadErr&lt;/h3&gt;
&lt;p&gt;These are all functions that make use of the fact that when the  &lt;code&gt;Reader&lt;/code&gt; object started it allowed an interactive session to keep running and reading / writing on stdin, stdout, and stderr. The  &lt;code&gt;Read&lt;/code&gt; functions read from stdout and stderr and the write functions write to stdin. The former takes Mathematica code and auto-converts it into a string. The latter simply passes in the given string.&lt;/p&gt;
&lt;p&gt;&lt;a id="future-work" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Future Work&lt;/h2&gt;
&lt;p&gt;PJLink 1.0.0, beefy as it already is, should only really be seen as the beginning. My hope is that much more can be done to allow for more native data type transfer and for intelligent communication between the two systems.&lt;/p&gt;
&lt;p&gt;In my demo I tried to show some of the things that make the interoperation of the two so nice, but I obviously don't have the breadth of knowledge to know all of the many applications this can be put to. Applications built off of PJLink are always welcome and I'm happy to provide any requisite information and extensions to PJLink to get them built.&lt;/p&gt;
&lt;p&gt;Alongside that, I think better integration on the Mathematica side is necessary. There is a partial interface for allowing a  &lt;code&gt;PythonObject&lt;/code&gt; structure to hide the details of  &lt;code&gt;PyEvaluate&lt;/code&gt; on the Mathematica side, but this needs work from both ends, first hooking up the  &lt;code&gt;Language`MutatationHandler&lt;/code&gt; interface and then extending the same on the python side. After that, a  &lt;code&gt;JavaBlock&lt;/code&gt; -like setup that allows a link to be opened, used, and cleaned up would be highly useful for sandboxing.&lt;/p&gt;
&lt;p&gt;Finally, I'm sure there are numerous bugs hiding in the package as it stands. Please find them and let me know about them so they can be worked out.&lt;/p&gt;
&lt;p&gt;In the meantime, I hope you enjoy PJLink and being able to use my two favorite languages symbiotically.&lt;/p&gt;</content><category term="Mathematica"></category><category term="python"></category></entry><entry><title>Creating a Mathematica Package Repository</title><link href="https://b3m2a1.github.io/creating-a-mathematica-package-repository.html" rel="alternate"></link><published>2018-05-01T22:29:20-05:00</published><updated>2018-05-02T00:05:01-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-05-01:/creating-a-mathematica-package-repository.html</id><summary type="html">&lt;p&gt;This post is going to detail how I set up one of my recent projects—and a project I hope outlasts my direct involvement in it.&lt;/p&gt;
&lt;p&gt;We're going to talk about how to set up a custom paclet server in GitHub.&lt;/p&gt;
&lt;p&gt;&lt;a id="paclet-servers-revisited" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Paclet Servers Revisited&lt;/h2&gt;
&lt;p&gt;I talked about paclet servers a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is going to detail how I set up one of my recent projects—and a project I hope outlasts my direct involvement in it.&lt;/p&gt;
&lt;p&gt;We're going to talk about how to set up a custom paclet server in GitHub.&lt;/p&gt;
&lt;p&gt;&lt;a id="paclet-servers-revisited" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Paclet Servers Revisited&lt;/h2&gt;
&lt;p&gt;I talked about paclet servers a while back in  &lt;a href="building-a-mathematica-package-ecosystem-part-1.html"&gt;this post&lt;/a&gt; . Now we get to build on all of that work. Fundamentally, all we're going to be doing is building a paclet server via the method discussed there, but instead of deploying to the Wolfram Cloud, and opaque, unknown (and hence untrusted),  &lt;a href="http://community.wolfram.com/groups/-/m/t/1250045"&gt;severely&lt;/a&gt;   &lt;a href="http://community.wolfram.com/groups/-/m/t/1250055"&gt;lacking&lt;/a&gt;  system we'll deploy to GitHub, the defacto standard for code sharing and highly open and trusted system.&lt;/p&gt;
&lt;p&gt;To do this, we'll mostly treat things as before, but it might be worth revisiting what we did before.&lt;/p&gt;
&lt;h3&gt;Using the Paclet Manager&lt;/h3&gt;
&lt;p&gt;We're going to hook in to Mathematica's built-in package manager, called the  &lt;code&gt;PacletManager&lt;/code&gt; . It's called that because Mathematica packages are distributed as  &lt;code&gt;.paclet&lt;/code&gt;  files (which are just structured zip files with a  &lt;code&gt;Paclet&lt;/code&gt;  expression cooked in).&lt;/p&gt;
&lt;p&gt;If people know the server where a paclet is stored, they can install it as easy as:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[
  &amp;quot;PacletName&amp;quot;,
  &amp;quot;Site&amp;quot;-&amp;gt;&amp;quot;http://paclet.site/Server&amp;quot;
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And so we're trying to make that accessible.&lt;/p&gt;
&lt;h3&gt;Paclet Server Components&lt;/h3&gt;
&lt;p&gt;To do that we need to expose a  &lt;code&gt;Paclets&lt;/code&gt;  directory where all of our paclet files will be stored and a  &lt;code&gt;PacletSite.mz&lt;/code&gt;  file that details the paclets that are stored there.&lt;/p&gt;
&lt;p&gt;Happily, I'd already built out the tool-chains for those previously, so I just had to adapt those to this project. The function that handles this is call  &lt;code&gt;PacletServerAdd&lt;/code&gt; . It takes a paclet and stores it in that  &lt;code&gt;Paclets&lt;/code&gt;  directory and updates the  &lt;code&gt;PacletSite.mz&lt;/code&gt;  file to reflect this&lt;/p&gt;
&lt;h3&gt;Paclet Server Website&lt;/h3&gt;
&lt;p&gt;The other part of a good paclet server is the interface that tells people what's on it. For my own stuff I built out a set of paclet server pages that detail what's available for download, the details of these, etc. As of the time I'm writing this for us this looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="18creatingamathematicapackagerepository-7826302109937894265" src="https://b3m2a1.github.io/img/18creatingamathematicapackagerepository-7826302109937894265.png" /&gt;&lt;/p&gt;
&lt;p&gt;Although the design is subject to change.&lt;/p&gt;
&lt;p&gt;What's important is that it details everything that's there and it's customizable for our needs moving forward.&lt;/p&gt;
&lt;p&gt;Each paclet has a page that is derived from the data in the  &lt;code&gt;PacletSite.mz&lt;/code&gt;  file (which in turn reflects the data in the  &lt;code&gt;PacletInfo.m&lt;/code&gt;  files cooked into each paclet). All we do here is take the parameters from the file, shove them into a notebook via some  &lt;code&gt;CellTags&lt;/code&gt;  driven replacements, and then export that notebook to Markdown. From there the static site builder takes over. An example of one of those pages is:&lt;/p&gt;
&lt;p&gt;&lt;img alt="18creatingamathematicapackagerepository-2481485970852989325" src="https://b3m2a1.github.io/img/18creatingamathematicapackagerepository-2481485970852989325.png" /&gt;&lt;/p&gt;
&lt;p&gt;Scrolling further down the page will give you all the details about who made it (me) what version it is, what extensions it has, etc.&lt;/p&gt;
&lt;p&gt;&lt;a id="building-the-paclet-server" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Building the Paclet Server&lt;/h2&gt;
&lt;p&gt;We'll walk through most of the steps involved in this so that potentially others can make use of a similar flow. First we need to get everything working with GitHub.&lt;/p&gt;
&lt;h3&gt;Making a GitHub Organization&lt;/h3&gt;
&lt;p&gt;Since this is supposed to be a community effort I didn't want it attached to my personal GitHub. Better would be if it's associated with a  &lt;a href="https://blog.github.com/2010-06-29-introducing-organizations/"&gt;GitHub organization&lt;/a&gt; . So I made an organization that  halirutan helpfully suggested I call  &lt;a href="https://github.com/paclets"&gt;paclets&lt;/a&gt;  and made a  &lt;a href="https://github.com/paclets/PacletServer"&gt;repository for hosting our server&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img alt="18creatingamathematicapackagerepository-7139290626530984083" src="https://b3m2a1.github.io/img/18creatingamathematicapackagerepository-7139290626530984083.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Configuring the Repo&lt;/h3&gt;
&lt;p&gt;To set up the repository I just cloned it locally, then started adding paclets to it via  &lt;code&gt;PacletServerAdd&lt;/code&gt; . The standard way I'd call it is&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletServerAdd[&amp;quot;path/to/server&amp;quot;, &amp;quot;PacletName&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which adds the paclet for the folder and sets up things as they ought to be.&lt;/p&gt;
&lt;p&gt;Then I call&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletServerBuild[&amp;quot;path/to/server&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which builds out the website and all the necessary components.&lt;/p&gt;
&lt;p&gt;Finally I push this back to GitHub via an interface to its API (and also to git) that I wrote up. That generally looks like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Git[&amp;quot;Add&amp;quot;, &amp;quot;path/to/server&amp;quot;, &amp;quot;All&amp;quot;-&amp;gt;True];
Git[&amp;quot;Commit&amp;quot;, &amp;quot;path/to/server&amp;quot;, &amp;quot;Message&amp;quot;-&amp;gt;TemplateApply[&amp;quot;Rebuilt on ``&amp;quot;, DateString[]]];
GitHub[&amp;quot;Push&amp;quot;, &amp;quot;path/to/server&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And simple as that out server is built&lt;/p&gt;
&lt;h3&gt;Making a ReviewQueue&lt;/h3&gt;
&lt;p&gt;To make things nice for collaboration we'll want a way for people to submit things via GitHub on their own.&lt;/p&gt;
&lt;p&gt;The way we're currently doing this is via a review queue mechanism working off of GitHub's pull request machinery.&lt;/p&gt;
&lt;p&gt;A user forks the repo, adds a paclet to the  &lt;code&gt;ReviewQueue&lt;/code&gt;  directory, and then we check to make sure it's formatted correctly before building it into the server.&lt;/p&gt;
&lt;p&gt;To simplify this I cooked up a  &lt;a href="https://github.com/paclets/PacletServer/blob/master/build/src/BuildScript.m"&gt;build script&lt;/a&gt;  and  &lt;a href="https://github.com/paclets/PacletServer/blob/master/build/build.nb"&gt;build notebook&lt;/a&gt; . These load and submit the things in review queue (although checking that all the parts are there for the actual paclet is still best done by hand).&lt;/p&gt;
&lt;p&gt;I won't go into too much detail on the queue though, because I built an interface paclet to try to hide the all the steps in working with the queue.&lt;/p&gt;
&lt;h3&gt;Protections in Place&lt;/h3&gt;
&lt;p&gt;As with all packages, it's impossible to be sure that a paclet won't be harmful. To minimize the risk people face in using the server we added a  &lt;a href="https://paclets.github.io/PacletServer/pages/log.html"&gt;change log&lt;/a&gt;  that extracts who committed and changed which paclets.&lt;/p&gt;
&lt;p&gt;If a user you don't trust has recently changed a paclet, don't install it. We even put this in bold face anywhere we provide installation code.&lt;/p&gt;
&lt;p&gt;&lt;img alt="18creatingamathematicapackagerepository-4293929817718253197" src="https://b3m2a1.github.io/img/18creatingamathematicapackagerepository-4293929817718253197.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="building-an-interface-paclet" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Building an Interface Paclet&lt;/h2&gt;
&lt;p&gt;This has been the toughest part of the entire project. I wanted to make it so that people could submit their paclets directly in Mathematica, the fewer the lines of code necessary the better.&lt;/p&gt;
&lt;p&gt;To this effect I set up a paclet which is on the server and  &lt;a href="https://paclets.github.io/PacletServer/publicpacletserver.html"&gt;you can install&lt;/a&gt;  to get the job done. The paclet is called (rather uncreatively)  &lt;code&gt;"PublicPacletServer"&lt;/code&gt; . I talked about it some  &lt;a href="http://community.wolfram.com/groups/-/m/t/1330267"&gt;here&lt;/a&gt; . To use it you install it based on what was on that link and load it like&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt;PublicPacletServer`&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It will expose a single function  &lt;code&gt;PublicPacletServer&lt;/code&gt;  which provides access to the server and submission process. If you have a paclet you've been working on you can simply run:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServer[&amp;quot;SubmitPaclet&amp;quot;, &amp;quot;YourPacletName&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And it will search for your paclet and submit it if it can find it and build it. If not you can also supply the path to your paclet and it will build and submit your paclet automatically.&lt;/p&gt;
&lt;p&gt;This submits the paclet to your review queue. To get it onto the public server you'll submit a request to merge your paclet in. The way you do that is via:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServer[&amp;quot;SubmitPullRequest&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then once your paclet has passed review it will be added.&lt;/p&gt;
&lt;p&gt;This simple interface hides some complicated innards, though.&lt;/p&gt;
&lt;h3&gt;Creating a Fork&lt;/h3&gt;
&lt;p&gt;The heart of this workflow is forking the original server. This is a way that git knows which repository is the main / parent repository and makes it possible to easily merge changes up or down this tree.&lt;/p&gt;
&lt;p&gt;GitHub itself provides an  &lt;a href="https://developer.github.com/v3/repos/forks/"&gt;API for creating forks&lt;/a&gt; . I used this to make sure that no one has to download the entire server just to upload their package. What I do is I check whether you have a fork already by comparing your repositories to the forks of the main repository. You can check whether you have a fork by running&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServer[&amp;quot;ForkedQ&amp;quot;]

(*Out:*)

True&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you have a fork,  &lt;code&gt;"SubmitPaclet"&lt;/code&gt;  will add it to the review queue for it. If not, it'll tell you to make a fork by running&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PublicPacletServer[&amp;quot;Fork&amp;quot;]

(*Out:*)

&amp;quot;b3m2a1/PacletServer&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Submitting a Paclet&lt;/h3&gt;
&lt;p&gt;The paclet submission process hooks into GitHub's  &lt;a href="https://developer.github.com/v3/repos/contents/"&gt;API for single file uploads&lt;/a&gt; . It uses a toolchain I built for automatically finding and building a paclet (in fact the same one used by  &lt;code&gt;PacletServerAdd&lt;/code&gt; ) to build out a paclet then pushes it through the API to your fork's  &lt;code&gt;ReviewQueue&lt;/code&gt;  directory.&lt;/p&gt;
&lt;h3&gt;Submitting a Pull Request&lt;/h3&gt;
&lt;p&gt;This is something I expected to be incredibly simple. There's a  &lt;a href="https://developer.github.com/v3/pulls/"&gt;pull request API&lt;/a&gt;  that I do use in the end for submitting the request, but it turns out not all pull requests are valid. If there are changes on both the head and child repositories that conflict the child repository will need to merge the changes on the head repository before its changes can be pushed. To try to cover this case I run the  &lt;a href="https://developer.github.com/v3/repos/merging/"&gt;merges API&lt;/a&gt;  on a  &lt;a href="https://developer.github.com/v3/git/refs/"&gt;reference&lt;/a&gt;  extracted from the main repository. If that sounds like a whole bunch of jargon, that's because it is. Suffice it to say, for the most part you won't need this, but I tried to protect you if you do.&lt;/p&gt;
&lt;h3&gt;Future Directions&lt;/h3&gt;
&lt;p&gt;This paclet is most certainly in beta (it's currently only a  &lt;code&gt;0.0.1&lt;/code&gt;  release). There are a number of features I still need to add, such as &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Better support for cloning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for end users to build the server themselves&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review queue validation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A paclet submission GUI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulating functionality in a paclet&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you'd like to help with any of these, feel free to  &lt;a href="https://github.com/b3m2a1/mathematica-PublicPacletServer"&gt;clone the repo&lt;/a&gt;  and collaborate.&lt;/p&gt;
&lt;p&gt;In the meantime, I hope this encourages you to submit your paclets to the repository. We'd love to have them.&lt;/p&gt;</content><category term="packages"></category></entry><entry><title>Finding Functions in Mathematica</title><link href="https://b3m2a1.github.io/finding-functions-in-mathematica.html" rel="alternate"></link><published>2018-03-28T18:25:23-05:00</published><updated>2018-03-28T19:21:45-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-03-28:/finding-functions-in-mathematica.html</id><summary type="html">&lt;p&gt;As someone who has used Mathematica for a long time now, one thing I often forget is how hard it can be to find the best functions for a given task when you're just starting out.&lt;/p&gt;
&lt;p&gt;Mathematica has a nice  &lt;a href="https://reference.wolfram.com/language/guide/WolframRoot.html"&gt;&lt;code&gt;Documentation Center&lt;/code&gt;&lt;/a&gt; , but finding stuff in it often turns into …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As someone who has used Mathematica for a long time now, one thing I often forget is how hard it can be to find the best functions for a given task when you're just starting out.&lt;/p&gt;
&lt;p&gt;Mathematica has a nice  &lt;a href="https://reference.wolfram.com/language/guide/WolframRoot.html"&gt;&lt;code&gt;Documentation Center&lt;/code&gt;&lt;/a&gt; , but finding stuff in it often turns into a long slog of randomly clicking through links. The documentation search is okay, but it's generally cluttered with links and cruft and not clever enough on the fuzzy-matching that people usually want. &lt;/p&gt;
&lt;p&gt;So we're going to develop and alternative for finding the right function for the job. I'll build up to this and provide a package implementation at the end.&lt;/p&gt;
&lt;p&gt;&lt;a id="names-and-wildcards" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Names and Wildcards&lt;/h2&gt;
&lt;p&gt;The heart of this approach will be the function  &lt;a href="https://reference.wolfram.com/language/ref/Names.html"&gt;&lt;code&gt;Names&lt;/code&gt;&lt;/a&gt; . This takes a string pattern and returns all the symbols matching that pattern. If you remember nothing else from this, keep in mind that  &lt;code&gt;Names&lt;/code&gt;  is your best friend when working with Mathematica. It allows us to use  &lt;a href="https://reference.wolfram.com/language/tutorial/StringPatterns.html"&gt;&lt;code&gt;string pattern-matching syntax&lt;/code&gt;&lt;/a&gt;  to find functions. That lets us use wildcards and other things. For example, to find all the  &lt;code&gt;"*View"&lt;/code&gt;  functions we could do:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Names[&amp;quot;*View&amp;quot;]

(*Out:*)

{&amp;quot;FlipView&amp;quot;,&amp;quot;GalleryView&amp;quot;,&amp;quot;MenuView&amp;quot;,&amp;quot;OpenerView&amp;quot;,&amp;quot;PopupView&amp;quot;,&amp;quot;SlideView&amp;quot;,&amp;quot;TableView&amp;quot;,&amp;quot;TabView&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then we can look at the docs for each of these&lt;/p&gt;
&lt;p&gt;&lt;a id="helplookup" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;HelpLookup&lt;/h2&gt;
&lt;p&gt;With these in hand, we can turn to their doc pages. Now, we could obviously select the string and press Command-F for each, but we can do this more automatically, using the function  &lt;code&gt;Documentation`HelpLookup&lt;/code&gt; . For instance, if we wanted to find the doc page for a function that we know has  &lt;code&gt;"Log"&lt;/code&gt;  and the name and ends in  &lt;code&gt;"Plot"&lt;/code&gt; , we could just do:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Documentation`HelpLookup@First@Names[&amp;quot;*Log*Plot&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="finding-functions-in-mathematica-2084183971320515060" src="https://b3m2a1.github.io/img/finding-functions-in-mathematica-2084183971320515060.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="printdefinitionslocal" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;PrintDefinitionsLocal&lt;/h2&gt;
&lt;p&gt;Most of the time, though, the documentation page isn't enough. It's a template for how to use a function, but doesn't give us the whole story. Better is to be able to  &lt;a href="https://mathematica.stackexchange.com/a/15948/38205"&gt;spelunk a symbol&lt;/a&gt; . This is actually built-in as of 10.1 and the function is  &lt;code&gt;GeneralUtilities`PrintDefinitionsLocal&lt;/code&gt;  (there's also a version that opens a new notebook but that one's generally clumsier in my view).&lt;/p&gt;
&lt;p&gt;Now we can do stuff like look at functions that help us define layers in NNs:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;LinearLayer; (* This autoloads the NN context *)
GeneralUtilities`PrintDefinitionsLocal@First@Names[&amp;quot;NeuralNetworks`Define*Layer&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="finding-functions-in-mathematica-1755617662583270663" src="https://b3m2a1.github.io/img/finding-functions-in-mathematica-1755617662583270663.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="putting-it-all-together" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Putting it All Together&lt;/h2&gt;
&lt;p&gt;Now we can combine these parts to write a function that will take a string pattern, provide links to the documentation via  &lt;code&gt;Documentation`HelpLookup&lt;/code&gt; , and also wrap in the  &lt;code&gt;GeneralUtilities`PrintDefinitionsLocal&lt;/code&gt;  data at the bottom of the page. I've written this into a package here.&lt;/p&gt;
&lt;p&gt;You can load the package like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Get[&amp;quot;https://raw.githubusercontent.com/b3m2a1/mathematica-tools/master/DocFind.wl&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then we can go-to-town. First let's find all the functions in the  &lt;code&gt;"NeuralNetworks`"&lt;/code&gt;  context:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocFind[&amp;quot;*&amp;quot;, &amp;quot;NeuralNetworks`&amp;quot;, Select-&amp;gt;&amp;quot;Function&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="finding-functions-in-mathematica-2210417243271107702" src="https://b3m2a1.github.io/img/finding-functions-in-mathematica-2210417243271107702.png" /&gt;&lt;/p&gt;
&lt;p&gt;Clicking on any of these links will attempt to open the doc page and will stick the  &lt;code&gt;PrintDefinitionsLocal&lt;/code&gt;  data at the bottom:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="finding-functions-in-mathematica-2963264718765358883" src="https://b3m2a1.github.io/img/finding-functions-in-mathematica-2963264718765358883.png" /&gt;&lt;/p&gt;
&lt;p&gt;This makes finding the functions we need so much nicer.&lt;/p&gt;
&lt;p&gt;Alternately we can just search for any function with the name  &lt;code&gt;"DocFind"&lt;/code&gt;  in the  &lt;a href="https://reference.wolfram.com/language/ref/%24Packages.html"&gt;&lt;code&gt;$Packages&lt;/code&gt;&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocFind[&amp;quot;DocFind&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="finding-functions-in-mathematica-5233777250735749012" src="https://b3m2a1.github.io/img/finding-functions-in-mathematica-5233777250735749012.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is how I generally use the function. And with sophisticated pattern matching we can find functions that we know  &lt;em&gt;should&lt;/em&gt;  exist but we just don't have the names for. Say a constant somewhere in the  &lt;code&gt;"PacletManager`"&lt;/code&gt;  context that has  &lt;code&gt;"Dir"&lt;/code&gt;  in its name:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocFind[&amp;quot;Dir&amp;quot;, &amp;quot;PacletManager*&amp;quot;, Select-&amp;gt;&amp;quot;Constant&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="finding-functions-in-mathematica-1817945970746530836" src="https://b3m2a1.github.io/img/finding-functions-in-mathematica-1817945970746530836.png" /&gt;&lt;/p&gt;
&lt;p&gt;And now figuring out how the  &lt;code&gt;"PacletManager`"&lt;/code&gt;  works is as simple as doing a few  &lt;code&gt;DocFinds&lt;/code&gt;  and clicking a few links.&lt;/p&gt;</content><category term="documentation"></category></entry><entry><title>Making Documentation with DocGen</title><link href="https://b3m2a1.github.io/making-documentation-with-docgen.html" rel="alternate"></link><published>2018-03-24T10:16:29-05:00</published><updated>2018-03-24T13:08:59-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-03-24:/making-documentation-with-docgen.html</id><summary type="html">&lt;p&gt;Here's a quick example of how we can use some of the stuff I showed  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/making-mathematica-documentation-with-mathematica.html"&gt;in this post&lt;/a&gt;  to build out full documentation by hand.&lt;/p&gt;
&lt;p&gt;&lt;a id="getting-docgen" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Getting DocGen&lt;/h2&gt;
&lt;p&gt;This post will be using my DocGen system which is built into a large package of mine that supports other parts of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a quick example of how we can use some of the stuff I showed  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/making-mathematica-documentation-with-mathematica.html"&gt;in this post&lt;/a&gt;  to build out full documentation by hand.&lt;/p&gt;
&lt;p&gt;&lt;a id="getting-docgen" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Getting DocGen&lt;/h2&gt;
&lt;p&gt;This post will be using my DocGen system which is built into a large package of mine that supports other parts of the development process as well. This package lives in a paclet on my paclet server. You can install it with:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[&amp;quot;BTools&amp;quot;,
 &amp;quot;Site&amp;quot;-&amp;gt;&amp;quot;&amp;quot;
 ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you want to learn more about making paclet servers you can read more  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/building-a-mathematica-package-ecosystem-part-1.html"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a id="documenting-the-templating-system" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Documenting the Templating system&lt;/h2&gt;
&lt;p&gt;We're going to make use of a palette I designed for helping with the documentation system. After you've installed BTools you can open it by looking for  &lt;code&gt;BTools▸DocGen&lt;/code&gt;  in the palettes menu:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-50323364875999283" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-50323364875999283.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Palette Overview&lt;/h3&gt;
&lt;p&gt;The entire palette looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-7767653871764496452" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-7767653871764496452.png" /&gt;&lt;/p&gt;
&lt;p&gt;If we look at it, it essentially has five sections:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-6312758860212914569" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-6312758860212914569.png" /&gt;&lt;/p&gt;
&lt;p&gt;The first of these chooses the paclet and lets us open the relevant config files. The second lets us open any built documentation pages for this context. The third actually generates the content and optionally deploys it to the cloud. The fourth will make documentation indices for pre version 11.2 and the last creates a new documentation paclet.&lt;/p&gt;
&lt;h3&gt;Creating a new Documentation Paclet&lt;/h3&gt;
&lt;p&gt;We start off by making a new paclet to hold our documentation. To do that we just use the  &lt;img alt="making-documentation-with-docgen-7009256029017860706" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-7009256029017860706.png" /&gt;  button. It pops up a window:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-2791007331622069100" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-2791007331622069100.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we simply provide the name of our paclet. The current project will then switch to  &lt;code&gt;"Templating"&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-1743412973075559677" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-1743412973075559677.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we see the paclet info and config file have been built:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-552763968467873143" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-552763968467873143.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Making a SymbolPage Template&lt;/h3&gt;
&lt;p&gt;First we go to the  &lt;code&gt;"Context Pages"&lt;/code&gt;  menu and select  &lt;code&gt;"Symbol Page Template"&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-3053272758509917492" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-3053272758509917492.png" /&gt;&lt;/p&gt;
&lt;p&gt;This opens up a notebook with templates for all the symbols in the context:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-462167994733675065" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-462167994733675065.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Making a Symbol Page&lt;/h3&gt;
&lt;p&gt;We can fill out the content for a page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-5498733888786341535" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-5498733888786341535.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then we use the docked cell on the template page to build out the HTML (with the bracket for the content we're generating selected):&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-2943174513768772591" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-2943174513768772591.png" /&gt;&lt;/p&gt;
&lt;p&gt;This then builds a doc page for us:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-725166031214461507" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-725166031214461507.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Saving a Symbol Page&lt;/h3&gt;
&lt;p&gt;Alternately we can do this from the palette using the  &lt;code&gt;"Generate and Save"&lt;/code&gt;  menu to save the page to the current paclet:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-6219661019162151278" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-6219661019162151278.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then if we go to the  &lt;code&gt;"Open Symbol Page"&lt;/code&gt;  menu we see we've generated and saved the page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-3284837002929066762" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-3284837002929066762.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Making Multiple Pages&lt;/h3&gt;
&lt;p&gt;Alternately, if we opted not to select a cell bracket the package will generate a page for every template in the  &lt;a href="https://reference.wolfram.com/language/ref/InputNotebook.html"&gt;&lt;code&gt;InputNotebook&lt;/code&gt;&lt;/a&gt; . Or if we had selected multiple brackets pages would be generated for each. This gives us a way to easily update our documentation from a saved template. Here's what we get if we did it with no bracket selected:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-6556851610799844716" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-6556851610799844716.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Deploying the Paclet&lt;/h3&gt;
&lt;p&gt;The DocGen palette doesn't directly support deploying this paclet to a server, but we can use the Paclet Server Manager palette that also comes with BTools to do that. I won't go into the details, though, as they're documented  &lt;a href="https://mathematica.stackexchange.com/a/160987/38205"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;h3&gt;Generating HTML Documentation&lt;/h3&gt;
&lt;p&gt;We can also use these template to build HTML documentation. To do this without deployment we can simply select the  &lt;code&gt;"Symbol Web Pages"&lt;/code&gt;  action from the  &lt;code&gt;"Generate from Notebook"&lt;/code&gt;  menu (again with the bracket selected):&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-6451737925142533680" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-6451737925142533680.png" /&gt;&lt;/p&gt;
&lt;p&gt;This builds to a temporary directory (it also mirrors the display assets it needs the first time it's generated). The Cloud Deploy option comes into play when using the  &lt;code&gt;"Generate and Save"&lt;/code&gt;  menu.&lt;/p&gt;
&lt;p&gt;After this copies every thing and generates the HTML we end up with a page that looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-documentation-with-docgen-1179710600402752990" src="https://b3m2a1.github.io/img/making-documentation-with-docgen-1179710600402752990.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which of course looks like the 11.0 docs, but until a new version of  &lt;code&gt;"Transmogrify"&lt;/code&gt;  and  &lt;code&gt;"DocumentationBuild"&lt;/code&gt;  come out this is what we're restricted to. That, unfortunately, is outside of my control so we'll stop at this.&lt;/p&gt;</content><category term="documentation"></category></entry><entry><title>Making Mathematica Documentation with Mathematica</title><link href="https://b3m2a1.github.io/making-mathematica-documentation-with-mathematica.html" rel="alternate"></link><published>2018-03-21T15:33:53-05:00</published><updated>2018-03-24T10:18:02-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-03-21:/making-mathematica-documentation-with-mathematica.html</id><summary type="html">&lt;p&gt;This post is going to be long on design and relatively short on code. As usual, it's exposition of something I spent a while developing and have  &lt;a href="https://github.com/b3m2a1/mathematica-BTools"&gt;cooked into one of my packages&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I'm going to talk about how to make and distribute documentation in Mathematica, with specific emphasis on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is going to be long on design and relatively short on code. As usual, it's exposition of something I spent a while developing and have  &lt;a href="https://github.com/b3m2a1/mathematica-BTools"&gt;cooked into one of my packages&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I'm going to talk about how to make and distribute documentation in Mathematica, with specific emphasis on the automatic generation of documentation.&lt;/p&gt;
&lt;p&gt;&lt;a id="documentation-overview" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Documentation Overview&lt;/h1&gt;
&lt;p&gt;To start, though, we'll break down the types of things that we find in the documentation and which we'll want to support in a package. At this point there are about 10 different types of documentation formats out there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Symbol pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guide pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tutorial pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service Connection pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HowTos&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workflows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overviews&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of these, there are really only 4 distinct types of things that we see in the documentation folders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guides&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tutorials&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workflows&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of these I opted to only implement the first three as they are the ones I use the most.&lt;/p&gt;
&lt;p&gt;&lt;a id="reference-pages-symbols" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Reference Pages (Symbols)&lt;/h2&gt;
&lt;p&gt;Ref pages come in a few different flavors, but the most common one, and the most common type of documentation in general, is the symbol page.&lt;/p&gt;
&lt;p&gt;As of version 11.1 symbol pages look like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Rasterize@Documentation`HelpLookup[&amp;quot;ref/StatusArea&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-526634225825234956" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-526634225825234956.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which can be split into 5 major parts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Header bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related Links&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll need to include each of these when we build our own docs&lt;/p&gt;
&lt;p&gt;&lt;a id="guide-pages" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Guide Pages&lt;/h2&gt;
&lt;p&gt;Guides have four parts. In the interest of space I won't show an actual image of a guide, but you can see one via:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Documentation`HelpLookup[&amp;quot;guide/PlottingOptions&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;These parts are &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Header bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Title and abstract&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function listing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related links&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id="tutorials" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Tutorials&lt;/h2&gt;
&lt;p&gt;Tutorials are so much more flexible than guides of symbol pages that it only really makes sense to discuss three sections, with an optional fourth&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Header bar&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jump-links (optional)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tutorial content&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Related links&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This flexibility makes them both easier and harder to handle, as we'll get to later.&lt;/p&gt;
&lt;p&gt;&lt;a id="generating-documentation" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Generating Documentation&lt;/h1&gt;
&lt;p&gt;Now that we know what kinds of things we need to include we can move to how to include them. Before jumping into the actual code, though, it's worth noting that WRI does provide a tool for building docs.&lt;/p&gt;
&lt;p&gt;&lt;a id="workbench" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Workbench&lt;/h2&gt;
&lt;p&gt;Workbench is Wolfram's primary IDE. It's a plugin to Eclipse&lt;/p&gt;
&lt;h3&gt;Why not just use Workbench?&lt;/h3&gt;
&lt;p&gt;There's no absolute reason not to use Workbench. Indeed it's probably got the lowest barrier to entry given that it's semi-battle-tested by WRI.&lt;/p&gt;
&lt;p&gt;On the other hand, using Workbench restricts ones possibilities. It doesn't always stay up-to-date (as of writing this the documentation it builds by default is still on version 11.0) and by using it we lose the edge of our knowledge of Mathematica.&lt;/p&gt;
&lt;p&gt;In general, Mathematica will be the best tool for manipulating Mathematica documents, so my view is why not simply provide a Mathematica package to do it?&lt;/p&gt;
&lt;p&gt;&lt;a id="docgen" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;DocGen&lt;/h2&gt;
&lt;p&gt;The package that I developed is called  &lt;a href="https://github.com/b3m2a1/mathematica-BTools/blob/master/Packages/Paclets/DocGen.m"&gt;DocGen&lt;/a&gt;  (inspired by, but not nearly as clever as,  &lt;a href="http://www.stack.nl/~dimitri/doxygen/"&gt;doxygen&lt;/a&gt; ). It uses my larger BTools toolchain to provide extra linkages to the entire Mathematica ecosystem.&lt;/p&gt;
&lt;h3&gt;Documentation Templates&lt;/h3&gt;
&lt;p&gt;The first place any documentation starts is as a documentation template. This is simply a notebook with cell-types attached that will be post-processed into a full documentation notebook. We can make a new one for a Symbol Page like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(* to load DocGen *)
&amp;lt;&amp;lt;BTools`Paclets`
DocGen[&amp;quot;SymbolPage&amp;quot;, MyFunction, Method-&amp;gt;&amp;quot;Template&amp;quot;]//CreateDocument;

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-7939871188899330678" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-7939871188899330678.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can simply type in this notebook to add content. I'll fill this out, then generate it and we'll see what happens:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-5746074635887181910" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-5746074635887181910.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see that for the most part it looks the same, but now the notebook is formatted properly for use with the Documentation Center. In actually using the template we also find that there are, in essence, the different sections encoded—a usage template, a details box, an examples pane, and related links. We simply extract these and format them to build out the documentation page.&lt;/p&gt;
&lt;p&gt;A similar workflow is implemented for guides and tutorials, except with different sections and cell types.&lt;/p&gt;
&lt;h3&gt;Automatic Generation&lt;/h3&gt;
&lt;p&gt;This by itself doesn't give us much of a leg-up on Workbench. In fact, this template system may even be a little bit  &lt;em&gt;worse&lt;/em&gt;  than Workbench's DocuTools (although significantly less bloated and quicker to use).&lt;/p&gt;
&lt;p&gt;What does make this powerful is how it allows us to now  &lt;em&gt;automatically&lt;/em&gt;  generate documentation, as all we need to do it extract parameters from a  &lt;code&gt;Symbol&lt;/code&gt;  or context and feed them into this type of template.&lt;/p&gt;
&lt;p&gt;The actual details behind this can be a bit gory, but you can read about them in  &lt;a href="https://mathematica.stackexchange.com/a/146671/38205"&gt;my post on StackExchange&lt;/a&gt; . In general we simply take the  &lt;code&gt;Symbol&lt;/code&gt;  and extract the usage patterns to fill out the usage table, the calling patterns to fill out the details, make a few sample Examples based on the calling patterns, and provide See Also links based on camel-case similarity in the first hump.&lt;/p&gt;
&lt;p&gt;This is what  &lt;code&gt;DocGen&lt;/code&gt;  does by default, so for instance we can do:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocGen@DocGen&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-6455205443540996861" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-6455205443540996861.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we get a fully-functional documentation notebook automatically&lt;/p&gt;
&lt;p&gt;We can take this further, though, and do the same for an entire set of  &lt;em&gt;contexts&lt;/em&gt;  to link a package or multiple packages together:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocGen@
 {
  &amp;quot;BTools`Paclets`&amp;quot;,&amp;quot;BTools`FrontEnd`&amp;quot;, 
  &amp;quot;BTools`Web`&amp;quot;, &amp;quot;BTools`External`&amp;quot;,
  &amp;quot;BTools`&amp;quot;
  }

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-5587525071093655299" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-5587525071093655299.png" /&gt;&lt;/p&gt;
&lt;p&gt;This gives us a really powerful way to provide accessible documentation with a minimum of effort. In all, that makes it much more likely that the documentation will actually get made.&lt;/p&gt;
&lt;p&gt;This also rewards good package design as the better ones definition patterns are, the clearer the documentation built will be.&lt;/p&gt;
&lt;p&gt;&lt;a id="distributing-documentation" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Distributing Documentation&lt;/h1&gt;
&lt;p&gt;Simply building the documentation isn't enough, though. Good documentation should serve as an advertisement for one's package. So the next thing to do is design a distribution system that allows us to publicize and distribute our documentation effectively. To do that we'll want to start with building some paclets for our docs.&lt;/p&gt;
&lt;p&gt;&lt;a id="documentation-paclets" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Documentation Paclets&lt;/h2&gt;
&lt;h3&gt;Paclets&lt;/h3&gt;
&lt;p&gt;I've talked about paclets before on a number of occasions, so I won't go into depth on them now, but if you want a refresher you can look  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/building-a-mathematica-package-ecosystem-part-1.html#main-content"&gt;here&lt;/a&gt; . &lt;/p&gt;
&lt;p&gt;When we build our documentation paclets, we'll want to make them to have four properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;They are obviously documentation, not code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They do not interfere or interact with the package they document in anyway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They are modularized as much as possible&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They can be easily updated and versioned&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last one is easy using the paclet manager and a paclet server. The second to last can be done easily if packages are well partitioned into subcontexts. The first and second, however, are a little bit trickier.&lt;/p&gt;
&lt;p&gt;If we have a paclet call  &lt;code&gt;"MyPaclet"&lt;/code&gt;  and we wanted to distribute its documentation separately, we couldn't simply call the documentation paclet  &lt;code&gt;"MyPaclet"&lt;/code&gt;  as well. Instead, we'll follow suit with what WRI does for many of its subpaclets, such as  &lt;code&gt;"ServiceConnections"&lt;/code&gt;  and curated data and append a qualifier to the paclet name. So instead of  &lt;code&gt;"MyPaclet"&lt;/code&gt;  we'll call it  &lt;code&gt;"Documentation_MyPaclet"&lt;/code&gt;  to make it obvious where it comes from.&lt;/p&gt;
&lt;p&gt;The issue with this is that it breaks our simple lookup procedure, but happily it's simple enough to fix this. In the  &lt;code&gt;"Documentation"&lt;/code&gt;  extension to a  &lt;code&gt;Paclet&lt;/code&gt;  expression we find the option  &lt;code&gt;"LinkBase"&lt;/code&gt; . This specifies what the lookup-root for things in the paclet should be. For instance if there is a page at  &lt;code&gt;"Guides/MyPaclet"&lt;/code&gt;  in our  &lt;code&gt;"Documentation_MyPaclet"&lt;/code&gt;  paclet, by using  &lt;code&gt;"MyPaclet"&lt;/code&gt;  as the  &lt;code&gt;"LinkBase"&lt;/code&gt;  this page will resolve to  &lt;code&gt;"MyPaclet/guide/MyPaclet"&lt;/code&gt;  on lookup, and so the documentation will behave as expected.&lt;/p&gt;
&lt;p&gt;Overall, then, we'll have our  &lt;code&gt;Paclet&lt;/code&gt;  expression look like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Paclet[
 Name -&amp;gt; &amp;quot;Documentation_MyPaclet&amp;quot;, 
 Version -&amp;gt; &amp;quot;1.0.0&amp;quot;, 
 Extensions -&amp;gt; 
  {
    {
      &amp;quot;Documentation&amp;quot;, 
      &amp;quot;Language&amp;quot; -&amp;gt; &amp;quot;English&amp;quot;, 
      &amp;quot;LinkBase&amp;quot; -&amp;gt; &amp;quot;MyPaclet&amp;quot;, 
      &amp;quot;MainPage&amp;quot; -&amp;gt; &amp;quot;Guides/MyPaclet&amp;quot;
      }
    }
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is something I go over  &lt;a href="https://mathematica.stackexchange.com/a/169488/38205"&gt;here&lt;/a&gt;  as well.&lt;/p&gt;
&lt;h3&gt;Paclet Server&lt;/h3&gt;
&lt;p&gt;With these documentation paclets in hand, we can go one step further and build a paclet server for our documentation (see the refresher link for paclets for a refresher on paclet servers, too). This will be an entirely generic paclet server, but it will serve as a way to easily share documentation in small chunks, just like curated data. I set up a server for all the documentation I've built  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/DocumentationServer/main.html"&gt;here&lt;/a&gt;  which looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-2355226512675681026" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-2355226512675681026.png" /&gt;&lt;/p&gt;
&lt;p&gt;People can then install pieces of documentation from there, like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[
 &amp;quot;Documentation_PacletManager&amp;quot;,
 &amp;quot;Site&amp;quot;-&amp;gt;
  &amp;quot;http://www.wolframcloud.com/objects/b3m2a1.docs/DocumentationServer&amp;quot;
 ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-2019233375110478896" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-2019233375110478896.png" /&gt;&lt;/p&gt;
&lt;p&gt;And they'll be immediately ready to use in Mathematica.&lt;/p&gt;
&lt;p&gt;&lt;a id="documentation-sites" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Documentation Sites&lt;/h2&gt;
&lt;p&gt;One last thing to comment on is how we can take our documentation  &lt;code&gt;Notebooks&lt;/code&gt;  and turn them into true HTML documentation which you can peruse on the web. This will involve taking some pieces out of Workbench (but which I've made accessible from a paclet server, so no worries if you don't want to download Workbench).&lt;/p&gt;
&lt;h3&gt;HTML Documentation&lt;/h3&gt;
&lt;p&gt;Workbench provides some facilities for generating HTML documentation. These facilities are (as of when I wrote this package) limited to 11.0-style documentation, but that's more than good enough for most things. &lt;/p&gt;
&lt;p&gt;The main thing I needed to do was apply a thorough cleaning to the documentation pages I generated to make sure the finicky package that actually generates the HTML (called  &lt;code&gt;Transmogrify&lt;/code&gt;  which is in turn called by a higher-level package called  &lt;code&gt;DocumentationBuild&lt;/code&gt; ) won't hang when it reaches a directive it doesn't know how to process.&lt;/p&gt;
&lt;p&gt;After that, the main issue was simply making sure all the appropriate resources are deployed, and then we're good to go.&lt;/p&gt;
&lt;p&gt;I've built this into  &lt;code&gt;DocGen&lt;/code&gt;  as a method. So if you want to build out HTML documentation for a paclet or set of paclets you can do it like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocGen[&amp;quot;HTML&amp;quot;, PacletFind[&amp;quot;Documentation_BTools*&amp;quot;]]

(*Out:*)

{
 {&amp;quot;~/Library/Mathematica/Applic&amp;quot;…&amp;quot;Gen/Web/BToolsWeb/guide/BToolsWeb.html&amp;quot;,&amp;lt;&amp;lt;24&amp;gt;&amp;gt;,&amp;quot;&amp;quot;…&amp;quot;&amp;quot;},
 {&amp;quot;~/Library/Mathematica/Applic&amp;quot;…&amp;quot;Gen/Web/BToolsWeb/guide/BToolsWeb.html&amp;quot;,&amp;lt;&amp;lt;24&amp;gt;&amp;gt;,&amp;quot;&amp;quot;…&amp;quot;&amp;quot;},
 {&amp;quot;~/Library/Mathematica/Appli&amp;quot;…&amp;quot;oolsExternal/guide/BToolsExternal.html&amp;quot;,&amp;lt;&amp;lt;22&amp;gt;&amp;gt;,&amp;quot;&amp;quot;…&amp;quot;&amp;quot;},
 {&amp;quot;~/Library/Mathematica/Appli&amp;quot;…&amp;quot;oolsFrontEnd/guide/BToolsFrontEnd.html&amp;quot;,&amp;lt;&amp;lt;40&amp;gt;&amp;gt;,&amp;quot;&amp;quot;…&amp;quot;&amp;quot;},
 {&amp;quot;~/Library/Mathematica/ApplicationData/DocGen/Web/BTools/guide/BTools.html&amp;quot;},
 {&amp;quot;~/Library/Mathematica/Applicat&amp;quot;…&amp;quot;Web/BToolsPaclets/ref/AppAddContent.html&amp;quot;}
 }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And this can be deployed to the web to use as documentation. If we want that we can simply run it with  &lt;code&gt;CloudDeploy-&amp;gt;True&lt;/code&gt;  and it will do so.&lt;/p&gt;
&lt;p&gt;Alternately  &lt;code&gt;DocGen&lt;/code&gt;  also support deploying built HTML automatically, which we can see in the  &lt;code&gt;"Methods"&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocGen[&amp;quot;HTML&amp;quot;, &amp;quot;Methods&amp;quot;]

(*Out:*)

{Automatic,&amp;quot;Deploy&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The best way to do this is passing the directory with all the HTML:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocGen[&amp;quot;HTML&amp;quot;, PacletFind[&amp;quot;Documentation_BTools*&amp;quot;], Method-&amp;gt;&amp;quot;Deploy&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Documentation Site&lt;/h3&gt;
&lt;p&gt;We can take this a step further though, and build a wrapper around this type of functionality to get it to upload &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocumentationSiteBuild[&amp;quot;BuildOverview&amp;quot;-&amp;gt;True, &amp;quot;AutoDeploy&amp;quot;-&amp;gt;True];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This creates  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/main.html"&gt;a site&lt;/a&gt;  where we can browse all of the exposed documentation, much like the paclet server we had before:&lt;/p&gt;
&lt;p&gt;&lt;img alt="making-mathematica-documentation-with-mathematica-7555384944798244364" src="https://b3m2a1.github.io/img/making-mathematica-documentation-with-mathematica-7555384944798244364.png" /&gt;&lt;/p&gt;
&lt;p&gt;And with that, I think, we're done.&lt;/p&gt;</content><category term="documentation"></category></entry><entry><title>Building External Connections in Mathematica</title><link href="https://b3m2a1.github.io/building-external-connections-in-mathematica.html" rel="alternate"></link><published>2018-03-21T01:34:24-05:00</published><updated>2018-03-21T01:46:06-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2018-03-21:/building-external-connections-in-mathematica.html</id><summary type="html">&lt;p&gt;This builds off of something I brought up on  &lt;a href="https://mathematica.stackexchange.com/q/166557/38205"&gt;StackExchange a bit ago&lt;/a&gt;  as well as some recent work I've done in building a nicer  &lt;a href="https://github.com/b3m2a1/mathematica-tools/blob/master/GitConnection.wl"&gt;interface to Git and GitHub&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I'm hoping to mainly lay out in a brief fashion how one can tackle the really broad question of how …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This builds off of something I brought up on  &lt;a href="https://mathematica.stackexchange.com/q/166557/38205"&gt;StackExchange a bit ago&lt;/a&gt;  as well as some recent work I've done in building a nicer  &lt;a href="https://github.com/b3m2a1/mathematica-tools/blob/master/GitConnection.wl"&gt;interface to Git and GitHub&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;I'm hoping to mainly lay out in a brief fashion how one can tackle the really broad question of how to build interfaces and what tricks can be used to make them nice.&lt;/p&gt;
&lt;p&gt;There are many possible classifications for these types of interfaces, but the major two I've run into are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Restricted interfaces&lt;br /&gt;
    by this I mean interfaces where there is a proscribed set of functionality the interface should implement. Examples of this include APIs, CLI tools, and some packages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unrestricted interfaces&lt;br /&gt;
    by this I mean interfaces where there is a highly-flexible set of functionality that we want to implement. The major example of this is programming languages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll discuss the restricted case first as it's much easier to handle&lt;/p&gt;
&lt;p&gt;&lt;a id="restricted-interfaces" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Restricted Interfaces&lt;/h2&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;When linking to Git there's a very small set of commands you really need to include. You can pretty much just look at the  &lt;a href="https://git-scm.com/book/en/v2"&gt;git book&lt;/a&gt;  and determine what you need to include.&lt;/p&gt;
&lt;p&gt;Once you've done that, all you really need to do is write a general-purpose wrapper function for running Git and then register a bunch of different functions that do minor work on top of that.&lt;/p&gt;
&lt;p&gt;I put this into a  &lt;a href="https://github.com/b3m2a1/mathematica-BTools/blob/master/Packages/External/GitConnection.m"&gt;subpackage of my main application&lt;/a&gt; . You can go there for all the details. In essence, though, I just wrote a bunch of little functions to handle different parts of the Git process. For example, here's how I registered the  &lt;code&gt;GitAdd&lt;/code&gt;  function:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;GitRegisterFunction[GitAdd, &amp;quot;add&amp;quot;,
 {
  &amp;quot;DryRun&amp;quot;-&amp;gt;&amp;quot;dry-run&amp;quot;,
  &amp;quot;Verbose&amp;quot;-&amp;gt;&amp;quot;verbose&amp;quot;,
  &amp;quot;Force&amp;quot;-&amp;gt;&amp;quot;force&amp;quot;,
  &amp;quot;Interactive&amp;quot;-&amp;gt;&amp;quot;interactive&amp;quot;,
  &amp;quot;Patch&amp;quot;-&amp;gt;&amp;quot;patch&amp;quot;,
  &amp;quot;Edit&amp;quot;-&amp;gt;&amp;quot;edit&amp;quot;,
  &amp;quot;Update&amp;quot;-&amp;gt;&amp;quot;update&amp;quot;,
  &amp;quot;NoIgnoreRemoval&amp;quot;-&amp;gt;&amp;quot;no-ignore-removal&amp;quot;,
  &amp;quot;IgnoreRemoval&amp;quot;-&amp;gt;&amp;quot;ignore-removal&amp;quot;,
  &amp;quot;IntentToAdd&amp;quot;-&amp;gt;&amp;quot;intent-to-add&amp;quot;,
  &amp;quot;Refresh&amp;quot;-&amp;gt;&amp;quot;refresh&amp;quot;,
  &amp;quot;IgnoreErrors&amp;quot;-&amp;gt;&amp;quot;ignore-errors&amp;quot;,
  &amp;quot;IgnoreMissing&amp;quot;-&amp;gt;&amp;quot;ignore-missing&amp;quot;,
  &amp;quot;NoWarnEmbeddedRepo&amp;quot;-&amp;gt;&amp;quot;no-warn-embedded-repo&amp;quot;,
  &amp;quot;ChangeModee&amp;quot;-&amp;gt;&amp;quot;chmod&amp;quot;
  }
 ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This just defines the function  &lt;code&gt;GitAdd&lt;/code&gt; , the git command to call  &lt;code&gt;"add"&lt;/code&gt; , and the way to map Mathematica options to Git options.&lt;/p&gt;
&lt;p&gt;Once I had all the functions I wanted I cooked them into a single  &lt;code&gt;Association&lt;/code&gt;  to act as a router from a name to a method:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$GitActions=
 &amp;lt;|
  &amp;quot;Create&amp;quot;-&amp;gt;
   GitCreate,
  &amp;quot;Init&amp;quot;-&amp;gt;
   GitInit,
  &amp;quot;Clone&amp;quot;-&amp;gt;
   GitClone,
  &amp;quot;AddGitIgnore&amp;quot;-&amp;gt;
   GitAddGitIgnore,
  &amp;quot;AddGitExclude&amp;quot;-&amp;gt;
   GitAddGitExclude,
  &amp;quot;Add&amp;quot;-&amp;gt;
   GitAdd,
  &amp;quot;Move&amp;quot;-&amp;gt;
   GitMove,
  ...,
  &amp;quot;Archive&amp;quot;-&amp;gt;
   GitArchive,
  &amp;quot;SVN&amp;quot;-&amp;gt;
   GitSVN,
  &amp;quot;Bundle&amp;quot;-&amp;gt;
   GitBundle,
  &amp;quot;Daemon&amp;quot;-&amp;gt;
   GitDaemon,
  &amp;quot;Help&amp;quot;-&amp;gt;
   GitHelp,
  &amp;quot;HelpSynopsis&amp;quot;-&amp;gt;
   GitHelpSynopsis,
  &amp;quot;HelpDescription&amp;quot;-&amp;gt;
   GitHelpDescription,
  &amp;quot;HelpOptions&amp;quot;-&amp;gt;
   GitHelpOptions,
  &amp;quot;HelpFlags&amp;quot;-&amp;gt;
   GitHelpFlags,
  &amp;quot;HelpFlagMap&amp;quot;-&amp;gt;
   GitHelpFlagMap
  |&amp;gt;;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And I define a single function that provides the true interface to Git. I called that one  &lt;code&gt;Git&lt;/code&gt; . Then you can define it (with unnecessary parts excised) like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Git[
 command_?(KeyMemberQ[$gitactions,ToLowerCase@#]&amp;amp;),
 args___
 ]:=
 With[{cmd=$gitactions[ToLowerCase[command]]},
  With[{r=cmd[args]},
   r/;Head[r]=!=cmd
   ]
  ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And even better you can add autocompletions and things to make it easy to know what's there to use. E.g.:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt;BTools`External`&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="building-external-connections-in-mathematica-7072602429701907198" src="https://b3m2a1.github.io/img/building-external-connections-in-mathematica-7072602429701907198.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then can do things like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Git[&amp;quot;HelpDescription&amp;quot;, &amp;quot;rm&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="program"&gt;&lt;code style="width: 100%; white-space: pre-wrap;"&gt;-----------Out-----------
"Remove files from the index, or from the working tree and the index.\ngit rm will not remove a file from just your working directory. (There\nis no option to remove a file only from the working tree and yet keep\nit in the index; use //bin//rm if you want to do that.) The files being\nremoved have to be identical to the tip of the branch, and no updates\nto their contents can be staged in the index, though that default\nbehavior can be overridden with the --f option. When ----cached is given,\nthe staged content has to match either the tip of the branch or the\nfile on disk, allowing the file to be removed from just the index."&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;p&gt;In that package I do a similar thing for GitHub's API, except with the important exception that the default operation for each registered function isn't to actually call the API but rather to build the  &lt;a href="https://reference.wolfram.com/language/ref/HTTPRequest.html"&gt;&lt;code&gt;HTTPRequest&lt;/code&gt;&lt;/a&gt;  that the function will actually use.&lt;/p&gt;
&lt;p&gt;&lt;a id="unrestricted-interfaces" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Unrestricted Interfaces&lt;/h2&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;I developed a package for linking to python that I called  &lt;a href="https://github.com/b3m2a1/mathematica-PyTools"&gt;PyTools&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;To marshal Mathematica code down to a python representation I built out a  &lt;a href="https://github.com/b3m2a1/mathematica-PyTools/blob/master/Packages/Symbolic/SymbolicPython.m"&gt;symbolic Python package&lt;/a&gt; . This type of  &lt;em&gt;symbolic conversion&lt;/em&gt;  is a powerful way to build an interface. In it Mathematica constructs are reduced to an intermediate  &lt;em&gt;symbolic&lt;/em&gt;  representation which Mathematica can still easily manipulate and then further processing directions are defined on this symbolic form.&lt;/p&gt;
&lt;p&gt;As an example, we'll see how I did it for this package. First load the package:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt;PyTools`Symbolic`&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then you can take a Mathematica expression and convert it into a symbolic representation of a python expression. In general this is set up so your write python-like code in Mathematica:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ToSymbolicPython[
 Import[&amp;quot;PIL&amp;quot;];
 img=PIL.Image[];
 img.show[]
 ]

(*Out:*)

PyColumn[{PyImport[&amp;quot;PIL&amp;quot;],PyAssign[PySymbol[&amp;quot;img&amp;quot;],PyDot[PySymbol[&amp;quot;PIL&amp;quot;],PySymbol[Image][]]],PyDot[PySymbol[&amp;quot;img&amp;quot;],PySymbol[&amp;quot;show&amp;quot;][]]}]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we can see that this has built out a rather complicates structure to represent this simple program. We'll take it bit-by-bit:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ToSymbolicPython@Import[&amp;quot;PIL&amp;quot;]

(*Out:*)

PyImport[&amp;quot;PIL&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This simply maps to a symbolic structure called  &lt;code&gt;PyImport&lt;/code&gt; . If we convert that to a python string:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PyImport[&amp;quot;PIL&amp;quot;]//ToPython

(*Out:*)

&amp;quot;import PIL&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It just registers an import statement. In fact this uses  &lt;a href="https://reference.wolfram.com/language/ref/Sow.html"&gt;&lt;code&gt;Sow&lt;/code&gt;&lt;/a&gt;  to make sure the import occurs at the header of the file. This is just generally good practice.&lt;/p&gt;
&lt;p&gt;Moving onto the next piece&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ToSymbolicPython[img=PIL.Image[]]

(*Out:*)

PyAssign[PySymbol[&amp;quot;img&amp;quot;],PyDot[PySymbol[&amp;quot;PIL&amp;quot;],PySymbol[Image][]]]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This builds out a symbolic representation of this syntax. It's inspired by the low-level representation Mathematica uses:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;FullForm@Hold[img=PIL.Image[]]

(*Out:*)

Hold[Set[img,Dot[PIL,Image[]]]]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We have a syntactic wrapper for assignment ( &lt;code&gt;Set&lt;/code&gt; ) for the  &lt;code&gt;.&lt;/code&gt;  accessor in python, and a conversion of Mathematica  &lt;code&gt;Symbol&lt;/code&gt;  constructs into  &lt;code&gt;PySymbol&lt;/code&gt;  constructs which have less ambiguity in conversion to a string.&lt;/p&gt;
&lt;p&gt;Finally, taking this all together, we have a  &lt;code&gt;PyColumn&lt;/code&gt;  expression which is just a mimic of Mathematica's  &lt;code&gt;Column&lt;/code&gt;  function which arranges pieces line-by-line after each other. And this gives a nice way to go from Mathematica-level syntax to python code:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ToSymbolicPython[
 Import[&amp;quot;PIL&amp;quot;];
 img=PIL.Image[];
 img.show[]
 ]//ToPython

(*Out:*)

&amp;quot;import PIL\nimg = PIL.Image()\nimg.show()\n&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;All it took was a long-symbolic detour.&lt;/p&gt;
&lt;p&gt;As a final note, the power of this approach is in its flexibility. For instance, if we want to register new type conversions, we need only register patterns to get from a Mathematica construct to a symbolic python one. I did this for a large set of constructs, allowing one to automatically generate code for things like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ToSymbolicPython[
 myFunc[file]:=
  With[{x=Open[file], y=Open[file2, &amp;quot;w+&amp;quot;]},
   Do[y.write[line], {line, x}]
   ]
 ]//ToPython//StringTrim

(*Out:*)

&amp;quot;def myFunc(file):\n\twith open(file) as x:\n\t\twith open(file2, 'w+') as y:\n\t\t\tfor line in x:\n\t\t\t\ty.write(line)\n\t\t\t\tNone&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;SymbolicC&lt;/h3&gt;
&lt;p&gt;SymbolicC is a package built into Mathematica that works in a similar way. I'll let  &lt;a href="https://reference.wolfram.com/language/SymbolicC/tutorial/Overview.html"&gt;&lt;code&gt;its documentation&lt;/code&gt;&lt;/a&gt;  speak for it.&lt;/p&gt;
&lt;h3&gt;MATLink&lt;/h3&gt;
&lt;p&gt;This is a package developed by some top-tier Mathematica users to link MATLAB and Mathematica. It works on the lowest-level possible and in the most unrestricted way. This also makes it among the most powerful packages out there.&lt;/p&gt;
&lt;p&gt;The basic idea is to use the  &lt;a href="https://reference.wolfram.com/language/tutorial/WSTPAndExternalProgramCommunicationOverview.html"&gt;&lt;code&gt;MathLink&lt;/code&gt;&lt;/a&gt;  system to pass  &lt;em&gt;packets&lt;/em&gt;  around which encode the evaluation data desired. This is incredibly flexible but requires a lot of work to do right.&lt;/p&gt;
&lt;p&gt;&lt;a id="hybrid-interfaces" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Hybrid Interfaces&lt;/h2&gt;
&lt;h3&gt;Psi4&lt;/h3&gt;
&lt;p&gt;I won't go into this one much, but it's a  &lt;a href="https://github.com/b3m2a1/mathematica-ChemTools/blob/master/Packages/Psi4/Psi4Connection.m"&gt;link I provide&lt;/a&gt;  to the software  &lt;a href="http://www.psicode.org/"&gt;Psi4&lt;/a&gt;  in my main chemistry package. What makes this a hybrid interface is that the basic input for Psi4 is about 80% structured so that part can be restricted, but there is also about 20% flexibility that requires a more unstructured interface. To do this I use tricks somewhere in between what I did for Git and for Python.&lt;/p&gt;
&lt;p&gt;Feel free to ask me more if you have comments or questions.&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>Comment Analysis of the Mathematica StackExchange</title><link href="https://b3m2a1.github.io/comment-analysis-of-the-mathematica-stackexchange.html" rel="alternate"></link><published>2017-12-17T00:00:00-06:00</published><updated>2017-12-19T03:42:08-06:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-12-17:/comment-analysis-of-the-mathematica-stackexchange.html</id><summary type="html">&lt;p&gt;For this post, I’m going to use a bunch of data I mined  &lt;a href="../user-cohorts-on-the-stackexchange-network.html"&gt;a few posts back&lt;/a&gt;  to do a basic analysis of the comments on a forum like StackExchange. As per usual, I’m going to focus on the Mathematica StackExchange, as that is in some sense my …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For this post, I’m going to use a bunch of data I mined  &lt;a href="../user-cohorts-on-the-stackexchange-network.html"&gt;a few posts back&lt;/a&gt;  to do a basic analysis of the comments on a forum like StackExchange. As per usual, I’m going to focus on the Mathematica StackExchange, as that is in some sense my “home” community on the network.&lt;/p&gt;
&lt;p&gt;I’m going to make all of this data publically accessible via the  &lt;a href="https://www.wolframcloud.com"&gt;Wolfram Cloud&lt;/a&gt; . It will live here:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;KeyChainConnect[&amp;quot;DatasetsAccount&amp;quot;]

(*Out:*)

&amp;quot;b3m2a1.datasets@gmail.com&amp;quot;

CloudObject[&amp;quot;stack_exchange_data&amp;quot;][[1]]

(*Out:*)

&amp;quot;https://www.wolframcloud.com/objects/b3m2a1.datasets/stack_exchange_data&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="obtaining-the-data" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Obtaining the Data&lt;/h2&gt;
&lt;h3&gt;Finding a set of commenters&lt;/h3&gt;
&lt;p&gt;To start off, let’s import the cached version of my Mathematica user list:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;mUsers =
   CloudImport[&amp;quot;stack_exchange_data/communities/mmaUsers.mx&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Let’s then look at the different metrics we have to do analyses on:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DeleteDuplicates[Flatten[Normal@Keys[mUsers]]] // Sort

(*Out:*)

{&amp;quot;accept_rate&amp;quot;, &amp;quot;account_id&amp;quot;, &amp;quot;age&amp;quot;, &amp;quot;badge_counts&amp;quot;, &amp;quot;creation_date&amp;quot;,
&amp;quot;display_name&amp;quot;, &amp;quot;is_employee&amp;quot;, &amp;quot;last_access_date&amp;quot;,
&amp;quot;last_modified_date&amp;quot;, &amp;quot;link&amp;quot;, &amp;quot;location&amp;quot;, &amp;quot;profile_image&amp;quot;,
&amp;quot;reputation&amp;quot;, &amp;quot;reputation_change_day&amp;quot;, &amp;quot;reputation_change_month&amp;quot;,
&amp;quot;reputation_change_quarter&amp;quot;, &amp;quot;reputation_change_week&amp;quot;,
&amp;quot;reputation_change_year&amp;quot;, &amp;quot;timed_penalty_date&amp;quot;, &amp;quot;user_id&amp;quot;,
&amp;quot;user_type&amp;quot;, &amp;quot;website_url&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;There are lots of things we could roll with here, but I think the two  &lt;em&gt;&lt;em&gt;most generally useful&lt;/em&gt;&lt;/em&gt;  ones will be the  &lt;code&gt;"age"&lt;/code&gt;  and  &lt;code&gt;"location"&lt;/code&gt;  parameters. Since I looked at ages last time, lets look at them again.&lt;/p&gt;
&lt;p&gt;First we’ll correlate age with IDs:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;idAges =
   DeleteMissing@Dataset@Association@Flatten@Normal[
         mUsers[All, #[&amp;quot;user_id&amp;quot;] -&amp;gt; #[&amp;quot;age&amp;quot;] &amp;amp;]];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then histogram out our ages again, just to recall what they looked like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Histogram[Values[idAges]]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-4372619971147133059" src="https://b3m2a1.github.io/img/post-13-4372619971147133059.png" /&gt;&lt;/p&gt;
&lt;p&gt;Next we’ll see how we can gather user comments:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so = ServiceConnect[&amp;quot;StackExchange&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-6144816761416980676" src="https://b3m2a1.github.io/img/post-13-6144816761416980676.png" /&gt;&lt;/p&gt;
&lt;p&gt;The request for this will be the  &lt;code&gt;"UserComments"&lt;/code&gt;  request:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;htmlImp[ds_] :=

  ImportString[StringRiffle[Normal[ds[All, &amp;quot;body&amp;quot;]], &amp;quot;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;quot;], 
   &amp;quot;HTML&amp;quot;];
htmlImp@$so[
   &amp;quot;UserComments&amp;quot;, 
   &amp;quot;id&amp;quot; -&amp;gt; Keys[idAges][[1]], &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;,
   &amp;quot;filter&amp;quot; -&amp;gt; &amp;quot;withbody&amp;quot;,
   &amp;quot;pagesize&amp;quot; -&amp;gt; &amp;quot;5&amp;quot;
   ]&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="program"&gt;&lt;code style="width: 100%; white-space: pre-wrap;"&gt;-----------Out-----------
Thanks for the info, that's good to know.

Let us continue this discussion in chat .

I will look into that, but you are the first one to report this problem. Are you sure it is not on your side (your reader)? I have not touched the pdf pretty much since I uploaded it back in 2009.

@AliHashmi Thanks. But it's been here for quite a while.

@b3m2a1It has been cross-platform since V10, if memory serves. With the caveats mentioned by Szabolcs.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we look at how long one of these requests at full size takes:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;htmlImp@$so[
     &amp;quot;UserComments&amp;quot;, 
     &amp;quot;id&amp;quot; -&amp;gt; Keys[idAges][[1]],
     &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;,
     &amp;quot;filter&amp;quot; -&amp;gt; &amp;quot;withbody&amp;quot;,
     &amp;quot;pagesize&amp;quot; -&amp;gt; &amp;quot;100&amp;quot;
     ] // AbsoluteTiming // First

(*Out:*)

1.46333&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We find that we definitely don’t want to do this for the full 7156 users. Given that I probably only am wiling to wait 5 minutes for this data to come in and have 8 cores to distribute over, let’s figure out how large a sample we can use:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;timing =
   htmlImp@$so[
        &amp;quot;UserComments&amp;quot;, 
        &amp;quot;id&amp;quot; -&amp;gt; Keys[idAges][[1]],
        &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;,
        &amp;quot;filter&amp;quot; -&amp;gt; &amp;quot;withbody&amp;quot;,
        &amp;quot;pagesize&amp;quot; -&amp;gt; &amp;quot;100&amp;quot;
        ] // AbsoluteTiming // First;
Quantity[5*8, &amp;quot;Minutes&amp;quot;]/Quantity[timing, &amp;quot;Seconds&amp;quot;]

(*Out:*)

1432.56&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So let’s take like 1500 users, where we try to get pretty even sampling over ages. To do this, we can first try to fit our data to an  &lt;a href="https://reference.wolfram.com/language/ref/ExtremeValueDistribution.html"&gt;&lt;code&gt;ExtremeValueDistribution&lt;/code&gt;&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;oldDist =
  EstimatedDistribution[Normal@Values@idAges, 
  ExtremeValueDistribution[α, β]]

(*Out:*)

ExtremeValueDistribution[26.8155, 6.90588]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then we’ll weight by the reciprocal of this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;newIdAges =
   RandomSample[
     Values[#] -&amp;gt; Keys[#] &amp;amp;@
       Normal[Map[Evaluate[1/PDF[oldDist, #]] &amp;amp;, idAges]],
     1500
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then just to see how well we did:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
  {
    Lookup[Normal@idAges, newIdAges],
    Normal@Values[idAges]
    },
  PlotRange -&amp;gt; All
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-7403909869387610127" src="https://b3m2a1.github.io/img/post-13-7403909869387610127.png" /&gt;&lt;/p&gt;
&lt;p&gt;We find that this did help smooth the distribution. But we might want to try to do a bit better. For that we could use a real  &lt;a href="https://reference.wolfram.com/language/ref/SmoothKernelDistribution.html"&gt;&lt;code&gt;SmoothKernelDistribution&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;oldDist =
   SmoothKernelDistribution[Normal@Values@idAges];
newIds =
   RandomSample[
     Values[#] -&amp;gt; Keys[#] &amp;amp;@
       Normal[Map[Evaluate[1/PDF[oldDist, #]] &amp;amp;, idAges]],
     1500
     ];
SmoothHistogram[
  {
    Lookup[Normal@idAges, newIds],
    Normal@Values[idAges]
    },
  PlotRange -&amp;gt; All
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-8010102671074284783" src="https://b3m2a1.github.io/img/post-13-8010102671074284783.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which seems to have worked much better.&lt;/p&gt;
&lt;h3&gt;Extracting the comments:&lt;/h3&gt;
&lt;p&gt;With this in mind, we’re almost set actually mine this data. First let’s just do some quick checks that our users really have comments to their names:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AbsoluteTiming[
   comms =
     AssociationMap[
       $so[
          &amp;quot;UserComments&amp;quot;, 
          &amp;quot;id&amp;quot; -&amp;gt; #,
          &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;,
          &amp;quot;filter&amp;quot; -&amp;gt; &amp;quot;withbody&amp;quot;,
          &amp;quot;pagesize&amp;quot; -&amp;gt; &amp;quot;1&amp;quot;
          ] &amp;amp;,
       newIds
       ]
   ] // First

(*Out:*)

131.471

Select[comms, Length[#] &amp;gt; 0 &amp;amp;] // Length

(*Out:*)

375&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So we’re down to 375 users. Which is, I suppose, not terrible, but we’ll at least try to pad it back up a bit:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;newIds2 =
   RandomSample[
     Values[#] -&amp;gt; Keys[#] &amp;amp;@
       Normal@
         Map[
           Evaluate[1/PDF[oldDist, #]] &amp;amp;, 
           KeyTake[idAges,
             Complement[Keys@idAges, newIds]
             ]
           ],
     1500
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then once more we’ll prune like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AbsoluteTiming[
   comms2 =
     AssociationMap[
       $so[
          &amp;quot;UserComments&amp;quot;, 
          &amp;quot;id&amp;quot; -&amp;gt; #,
          &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;,
          &amp;quot;filter&amp;quot; -&amp;gt; &amp;quot;withbody&amp;quot;,
          &amp;quot;pagesize&amp;quot; -&amp;gt; &amp;quot;1&amp;quot;
          ] &amp;amp;,
       newIds2
       ]
   ] // First

(*Out:*)

129.244

Select[comms2, Length[#] &amp;gt; 0 &amp;amp;] // Length

(*Out:*)

348&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So between the two of these we have ~700 users. Still not many, but enough to start with.&lt;/p&gt;
&lt;p&gt;Finally, we’ll get to mining the comments:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AbsoluteTiming[
   idComments =
      AssociationMap[
        $so[
            &amp;quot;QueryIterate&amp;quot;,
            &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;UserComments&amp;quot;, 
            &amp;quot;id&amp;quot; -&amp;gt; #,
            &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;,
            &amp;quot;filter&amp;quot; -&amp;gt; &amp;quot;withbody&amp;quot;,
            &amp;quot;MaxIterations&amp;quot; -&amp;gt; 10
            ] &amp;amp;,
        Keys@Join[
           Select[comms, Length[#] &amp;gt; 0 &amp;amp;],
           Select[comms2, Length[#] &amp;gt; 0 &amp;amp;]
           ]
        ];
   ][[1]]

(*Out:*)

307.98&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then we’ll dump these onto the cloud:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;CloudExport[idComments, &amp;quot;MX&amp;quot;,
&amp;quot;stack_exchange_data/comments/mmaComments.mx&amp;quot;,
  Permissions -&amp;gt; &amp;quot;Public&amp;quot;
  ]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/b3m2a1.datasets/stack_exchange_data/comments/mmaComments.mx&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="distributions-in-mathematica-stackexchange-comments" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Distributions in Mathematica StackExchange comments&lt;/h2&gt;
&lt;h3&gt;User comment counts&lt;/h3&gt;
&lt;p&gt;Let’s just start by view in the distribution of comment numbers by user:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
  idComments // Map[Length] // Values,
  PlotRange -&amp;gt; All
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-7746140018277048762" src="https://b3m2a1.github.io/img/post-13-7746140018277048762.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which, somewhat unsurprisingly, shows a major peak around no comments and a minor peak at more-comments-than-I-imported. Of course, it is these comments by a small fraction of the site’s users that will tend to dominate this discussion, and they are simply so much more numerous (and generally longer).&lt;/p&gt;
&lt;h3&gt;Comment lengths&lt;/h3&gt;
&lt;p&gt;We can also break these apart by length:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;imppedComments =
   StringSplit[htmlImp@Apply[Join, Values[idComments]], &amp;quot;\n\n&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And given that that took a little to run, we can also dump this into the cloud:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;CloudExport[imppedComments, &amp;quot;MX&amp;quot;,
&amp;quot;stack_exchange_data/comments/mmaSplitComments.mx&amp;quot;,
  Permissions -&amp;gt; &amp;quot;Public&amp;quot;
  ]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/b3m2a1.datasets/stack_exchange_data/comments/mmaSplitComments.mx&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we can look at average comment length:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;comLens = StringLength /@ imppedComments;
SmoothHistogram[comLens]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-3197814616888799598" src="https://b3m2a1.github.io/img/post-13-3197814616888799598.png" /&gt;&lt;/p&gt;
&lt;p&gt;A few features stand out in this. The first is that we likely have two to three distributions hidden in here, which we can try to model as a  &lt;a href="https://reference.wolfram.com/language/ref/MixtureDistribution.html"&gt;&lt;code&gt;MixtureDistribution&lt;/code&gt;&lt;/a&gt;  of  &lt;a href="https://reference.wolfram.com/language/ref/GammaDistribution.html"&gt;&lt;code&gt;GammaDistributions&lt;/code&gt;&lt;/a&gt;  and  &lt;a href="https://reference.wolfram.com/language/ref/NormalDistribution.html"&gt;&lt;code&gt;NormalDistributions&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;We’ll start by letting Mathematica provide a guess and comparing that to our observed distribution:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;comLenDist =
  FindDistribution[comLens,
    TargetFunctions -&amp;gt; {NormalDistribution, GammaDistribution},
    PerformanceGoal -&amp;gt; &amp;quot;Quality&amp;quot;
    ]
Show[
  SmoothHistogram[comLens],
  Plot[PDF[comLenDist, x],
    {x, 0, 650},
    PlotStyle -&amp;gt; ColorData[97][2]
    ],
  PlotRange -&amp;gt; All
  ]

(*Out:*)

MixtureDistribution[{0.83119, 
  0.16881}, {GammaDistribution[2.37578, 56.2346], 
  NormalDistribution[350.011, 133.508]}]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-1697851779570957717" src="https://b3m2a1.github.io/img/post-13-1697851779570957717.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which is, overall, a pretty good guess. But notably it misses that little hump up around 590 that I would argue is meaningful. So we’ll use this form as a base and add another distribution:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;comLenDist =
  EstimatedDistribution[
    comLens,
    MixtureDistribution[
      {big, mid, little},
      {
        GammaDistribution[α, β],
        NormalDistribution[μ, σ],
        NormalDistribution[μs, σs]
        }
      ],
    MixtureDistribution[
      {0.83, 0.17, .05},
      {
        GammaDistribution[2.73, 56.23],
        NormalDistribution[350.01, 133.51],
        NormalDistribution[590, 10]
        }
      ],
    AccuracyGoal -&amp;gt; 20
    ]

(*Out:*)

MixtureDistribution[{0.823455, 0.158972, 
  0.017573}, {GammaDistribution[2.4218, 53.6177], 
  NormalDistribution[331.916, 108.543], 
  NormalDistribution[571.785, 19.2683]}]

Show[
  SmoothHistogram[comLens],
  Plot[
    PDF[comLenDist, x],
    {x, 0, 650},
    PlotStyle -&amp;gt;
        ColorData[97][2],
    PlotRange -&amp;gt; All
    ],
  PlotRange -&amp;gt; All
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-2315644765247144837" src="https://b3m2a1.github.io/img/post-13-2315644765247144837.png" /&gt;&lt;/p&gt;
&lt;p&gt;We’ve lost some goodness of fit, but have recovered one of the obvious features of the distribution, so we’ll call that a win for now.&lt;/p&gt;
&lt;p&gt;What’s interesting about this is the form. We can view this as its component distributions:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Plot[
  Evaluate@
    Prepend[
      MapThread[#*PDF[#2, x] &amp;amp;, List @@ comLenDist],
      PDF[comLenDist, x]
      ],
  {x, 0, 650},
  PlotRange -&amp;gt; All
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-1078334461258886281" src="https://b3m2a1.github.io/img/post-13-1078334461258886281.png" /&gt;&lt;/p&gt;
&lt;p&gt;The feature up above 500 can be easily assigned to the reasonably common case where the allotted number of characters is insufficient. Often this even causes wrapping over into further comments.&lt;/p&gt;
&lt;p&gt;The case of the primary peak around 100 is again reasonable, if perhaps on the high side.  Seeing as this sentence is ~100 characters, we can conclude that most comments are about a sentence long. If this seems high compared to general experience this may illustrate how little that is:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;StringRiffle[
  RandomSample[
    MinimalBy[
      Select[imppedComments, StringLength[#] == 100 &amp;amp;],
      StringLength
      ],
    5
    ],
  &amp;quot;\n\n&amp;quot;
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="program"&gt;&lt;code style="width: 100%; white-space: pre-wrap;"&gt;-----------Out-----------
You'll probably have to write a webscraper. At least according to stackoverflow.com/q/5991756/421225

@user11946 I suggest you take a look at the tutorial here: reference.wolfram.com/language/tutorial/…

(# - 2)^2 (# + .5)^2 - 625/256 &amp;[x], it seems that not all the roots can be found for this function.

There seems to be a bug. I get 5 for HenrikfindIndices[{0.1,0.2,0.3,0.6,0.8}, .7] and I expected 4 .

Please provide definitions for borderGCVector and linkGCVector . Your code doesn't run without them.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the other hand, even the absolute longest comments aren’t that much text. Here’re a few of them:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;StringRiffle[
  RandomSample[
    TakeLargestBy[imppedComments, StringLength, 10],
    2
    ],
  &amp;quot;\n\n&amp;quot;
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;pre class="program"&gt;&lt;code style="width: 100%; white-space: pre-wrap;"&gt;-----------Out-----------
@Pickett And when I saw it, I thought my world was about to change :-), but after discussing it with some more "knowledgeable people", although it was clear that the scope of these products was not yet very clear (or at least, to them), they all said that this would most likely be products to be integrated/used by editors of other products (that is medium to large scale businesses), and not really by individual users on a one case scenario... (it would be something like special licensing schemes, etc). But this was some time ago and probably the image is more clear now, and things have changed

Dear Yode, your approach in "treating" the image is very similar to the many attempts I made, before posting this question. Nonetheless, you were very successful at getting the lines over the sugarcane. The fact that there some misses is not very important, because one can always extrapolate the missing lines by looking at the most frequent distance between two lines (in a histogram). However, you approach will not work with a curved path, because of the function ImageLines, which only yields straight lines. Nonetheless, I am certain that your method will help me to improve on mine. Thank you.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The mushy middle Gaussian is an interesting case where there’s just such a broad distribution of these random comment lengths. Looking at these isn’t particularly interesting, so we’ll leave them out.&lt;/p&gt;
&lt;p&gt;&lt;a id="mathematica-stackexchange-comment-content" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Mathematica StackExchange comment content&lt;/h2&gt;
&lt;h3&gt;Word clouds and word frequencies&lt;/h3&gt;
&lt;p&gt;Finally we can start to play with some fun stuff. To start, let’s just make a word cloud of all of this stuff:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;comString = StringRiffle[imppedComments];
WordCloud[comString]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-8546085435734726015" src="https://b3m2a1.github.io/img/post-13-8546085435734726015.png" /&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately these aren’t terribly interesting. We could try removing some of these rather boring terms, but there’s no real reason to expect that this will dredge up anything fascinating.&lt;/p&gt;
&lt;p&gt;We do see a few fun things, though, particularly in the prominence of single letters and numbers, like  &lt;code&gt;x&lt;/code&gt; ,  &lt;code&gt;y&lt;/code&gt; ,  &lt;code&gt;1&lt;/code&gt; ,  &lt;code&gt;2&lt;/code&gt; , etc.&lt;/p&gt;
&lt;p&gt;These show that this is math driven site (unsurprisingly).&lt;/p&gt;
&lt;p&gt;So let’s move to something more quantitative. First we’ll get the words and bin them by usage:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;comWords =
   TextCases[DeleteStopwords@comString, &amp;quot;Word&amp;quot;];
comCounts =
   Counts[ToLowerCase@comWords];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Again I’ll dump these into the cloud, as they are computationally expensive:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;CloudExport[comCounts, &amp;quot;MX&amp;quot;,
&amp;quot;stack_exchange_data/comments/mmaWordCounts.mx&amp;quot;,
  Permissions -&amp;gt; &amp;quot;Public&amp;quot;
  ]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/b3m2a1.datasets/stack_exchange_data/comments/mmaWordCounts.mx&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Next we’ll take the word frequencies over these words:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;wordFreqs =
   AssociationThread[
     Keys[comCounts],
     Rescale[1. Values[comCounts]]
     ];
TakeSmallest[wordFreqs, 10]

(*Out:*)

&amp;lt;|&amp;quot;whenevent[{s[1][t&amp;quot; -&amp;gt; 0., &amp;quot;v.11.0.1&amp;quot; -&amp;gt; 0., &amp;quot;249/250&amp;quot; -&amp;gt; 0., 
 &amp;quot;10.13&amp;quot; -&amp;gt; 0., &amp;quot;10.13.2&amp;quot; -&amp;gt; 0., &amp;quot;floor[log[10&amp;quot; -&amp;gt; 0., &amp;quot;2x+y&amp;quot; -&amp;gt; 0., 
 &amp;quot;@louisb&amp;quot; -&amp;gt; 0., &amp;quot;pureunities&amp;quot; -&amp;gt; 0., &amp;quot;x^2+y&amp;quot; -&amp;gt; 0.|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we see from this that these aren’t really even words. So we’ll just drop them.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;wordFreqs2 =
   Select[wordFreqs, GreaterThan[.0005]];
TakeSmallest[wordFreqs2, 10]
TakeLargest[wordFreqs2, 10]

(*Out:*)

&amp;lt;|&amp;quot;mma8&amp;quot; -&amp;gt; 0.000542446, &amp;quot;responsive&amp;quot; -&amp;gt; 0.000542446, 
 &amp;quot;nasserm.abbasi&amp;quot; -&amp;gt; 0.000542446, &amp;quot;10.10.4&amp;quot; -&amp;gt; 0.000542446, 
 &amp;quot;ummm&amp;quot; -&amp;gt; 0.000542446, &amp;quot;biases&amp;quot; -&amp;gt; 0.000542446, 
 &amp;quot;sensor&amp;quot; -&amp;gt; 0.000542446, &amp;quot;3.4&amp;quot; -&amp;gt; 0.000542446, 
 &amp;quot;underdetermined&amp;quot; -&amp;gt; 0.000542446, &amp;quot;k3&amp;quot; -&amp;gt; 0.000542446|&amp;gt;

(*Out:*)

&amp;lt;|&amp;quot;question&amp;quot; -&amp;gt; 1., &amp;quot;answer&amp;quot; -&amp;gt; 0.941416, &amp;quot;code&amp;quot; -&amp;gt; 0.880662, 
 &amp;quot;use&amp;quot; -&amp;gt; 0.803092, &amp;quot;1&amp;quot; -&amp;gt; 0.763765, &amp;quot;just&amp;quot; -&amp;gt; 0.725522, 
 &amp;quot;mathematica&amp;quot; -&amp;gt; 0.72498, &amp;quot;thanks&amp;quot; -&amp;gt; 0.718742, &amp;quot;like&amp;quot; -&amp;gt; 0.670464, 
 &amp;quot;function&amp;quot; -&amp;gt; 0.597776|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;These, on the other hand, are largely boring. But lets compare these frequencies to the standard  &lt;a href="https://reference.wolfram.com/language/ref/WordFrequencyData.html"&gt;&lt;code&gt;WordFrequencyData&lt;/code&gt;&lt;/a&gt;  to get a sense of what words might be abnormally present:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;wordFreqsReal =
   WordFrequencyData[
     Keys@TakeLargest[wordFreqs2, 500]
     ];
TakeSmallest[wordFreqsReal, 15]

(*Out:*)

&amp;lt;|&amp;quot;j.m.&amp;quot; -&amp;gt; 5.33713*10^-9, &amp;quot;mma&amp;quot; -&amp;gt; 1.52723*10^-8, 
 &amp;quot;mathematica&amp;quot; -&amp;gt; 2.4267*10^-8, &amp;quot;workaround&amp;quot; -&amp;gt; 3.91462*10^-8, 
 &amp;quot;wolfram&amp;quot; -&amp;gt; 4.27572*10^-8, &amp;quot;mac&amp;quot; -&amp;gt; 1.81982*10^-7, 
 &amp;quot;pdf&amp;quot; -&amp;gt; 2.23877*10^-7, &amp;quot;ok&amp;quot; -&amp;gt; 4.88281*10^-7, 
 &amp;quot;formatted&amp;quot; -&amp;gt; 6.09125*10^-7, &amp;quot;+1&amp;quot; -&amp;gt; 9.20242*10^-7, 
 &amp;quot;bug&amp;quot; -&amp;gt; 1.23268*10^-6, &amp;quot;plotting&amp;quot; -&amp;gt; 1.63899*10^-6, 
 &amp;quot;simplify&amp;quot; -&amp;gt; 1.77491*10^-6, &amp;quot;kernel&amp;quot; -&amp;gt; 1.87406*10^-6, 
 &amp;quot;notebook&amp;quot; -&amp;gt; 1.89268*10^-6|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is vaguely interesting, as we see a number of Mathematica specific terms ( &lt;code&gt;"workaround"&lt;/code&gt; ,  &lt;code&gt;"formatted"&lt;/code&gt; ) show up with very low frequency. But even more interesting is that  &lt;code&gt;"j.m"&lt;/code&gt;  which is a reference to a user. We’ll handle that a bit later.&lt;/p&gt;
&lt;p&gt;For now, we’ll go back to the case at hand. We’ll take our  &lt;code&gt;wordFreqs2&lt;/code&gt;  and divide these out by out  &lt;code&gt;wordFreqsReal&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Take[
  wordFreqsNormmed =
    ReverseSort[TakeLargest[wordFreqs2, 500]/wordFreqsReal], 
  10]

(*Out:*)

&amp;lt;|&amp;quot;mr.wizard&amp;quot; -&amp;gt; 0.127204/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;@szabolcs&amp;quot; -&amp;gt; 0.102251/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;{x,&amp;quot; -&amp;gt; 0.0979116/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;@kuba&amp;quot; -&amp;gt; 0.0810957/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;{1,&amp;quot; -&amp;gt; 0.0550583/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;plotrange&amp;quot; -&amp;gt; 0.0474641/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;@belisarius&amp;quot; -&amp;gt; 0.0466504/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;ndsolve&amp;quot; -&amp;gt; 0.0450231/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;@michaele2&amp;quot; -&amp;gt; 0.0450231/Missing[&amp;quot;NotAvailable&amp;quot;], 
 &amp;quot;{0,&amp;quot; -&amp;gt; 0.0436669/Missing[&amp;quot;NotAvailable&amp;quot;]|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we see two things. One, when we look at user names we’ll have to account for  &lt;code&gt;@&lt;/code&gt;  mentions. Two, there are interesting terms like  &lt;code&gt;"ndsolve"&lt;/code&gt;  that simply never come up outside of this context. There are fewer of these than there are junk terms like  &lt;code&gt;"{0"&lt;/code&gt;  those, so we’ll just delete all of these.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Take[Select[wordFreqsNormmed, NumberQ], 5]

(*Out:*)

&amp;lt;|&amp;quot;mathematica&amp;quot; -&amp;gt; 2.98751*10^7, &amp;quot;j.m.&amp;quot; -&amp;gt; 1.64651*10^7, 
 &amp;quot;mma&amp;quot; -&amp;gt; 1.22715*10^7, &amp;quot;wolfram&amp;quot; -&amp;gt; 2.28994*10^6, 
 &amp;quot;workaround&amp;quot; -&amp;gt; 997700.|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And thus things like  &lt;code&gt;"mathematica"&lt;/code&gt;  explode. So we’ll drop anything with size greater than  &lt;p&gt;10&lt;/p&gt;&lt;sup&gt;6&lt;/sup&gt; .&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Take[
  wordFreqsNorm2 =
    Select[wordFreqsNormmed, LessThan[10^6]],
  5
  ]

(*Out:*)

&amp;lt;|&amp;quot;workaround&amp;quot; -&amp;gt; 997700., &amp;quot;ok&amp;quot; -&amp;gt; 228296., &amp;quot;mac&amp;quot; -&amp;gt; 220576., 
 &amp;quot;pdf&amp;quot; -&amp;gt; 216856., &amp;quot;+1&amp;quot; -&amp;gt; 213385.|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we start to see some fun things. Particularly the prominence of the word  &lt;code&gt;"workaround"&lt;/code&gt; .  This could reflect the fact that many questions on the site do seem to be about workarounds for various not-entirely-there pieces of core functionality.&lt;/p&gt;
&lt;p&gt;But let’s word-cloud these out (dropping  &lt;code&gt;"workaround"&lt;/code&gt;  as it is another outlier)&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-3343543913608174526" src="https://b3m2a1.github.io/img/post-13-3343543913608174526.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;WordCloud[Rest@wordFreqsNorm2]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-850464324379021256" src="https://b3m2a1.github.io/img/post-13-850464324379021256.png" /&gt;&lt;/p&gt;
&lt;p&gt;We see that  &lt;code&gt;"+1"&lt;/code&gt;  is very popular relative to standard word frequency, unsurprisingly. And  &lt;code&gt;"workaround"&lt;/code&gt;  gets paired with the word  &lt;code&gt;"bug"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Comment mentions vs. reputation&lt;/h3&gt;
&lt;p&gt;We could, in fact, extract  &lt;em&gt;&lt;em&gt;all&lt;/em&gt;&lt;/em&gt;  of the users whose names appear in  &lt;code&gt;wordFreqs2&lt;/code&gt; : &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;userNames =
   StringDelete[
     ToLowerCase@Normal@
        Reverse@mUsers[SortBy[&amp;quot;reputation&amp;quot;], &amp;quot;display_name&amp;quot;], 
     Whitespace
     ];
KeyTake[wordFreqs, Take[userNames, 10]]

(*Out:*)

&amp;lt;|&amp;quot;mr.wizard&amp;quot; -&amp;gt; 0.127204, &amp;quot;szabolcs&amp;quot; -&amp;gt; 0.0127475, 
 &amp;quot;michaele2&amp;quot; -&amp;gt; 0.00081367, &amp;quot;kglr&amp;quot; -&amp;gt; 0.00162734, 
 &amp;quot;dr.belisarius&amp;quot; -&amp;gt; 0.00298346, &amp;quot;kuba&amp;quot; -&amp;gt; 0.0105777, 
 &amp;quot;jens&amp;quot; -&amp;gt; 0.00542446, &amp;quot;j.m.&amp;quot; -&amp;gt; 0.0878763, &amp;quot;halirutan&amp;quot; -&amp;gt; 0.0035259|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And since the   &lt;code&gt;userNames&lt;/code&gt;  are in reverse-reputation order this provides an interesting connection between reputation and comment mentions. Given that the API also provides a  &lt;code&gt;"UserMentions"&lt;/code&gt;  request we could check this more directly, but for now we’ll use this as our proxy.&lt;/p&gt;
&lt;p&gt;We can do a raw word cloud of the 100 highest-rep users:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;WordCloud@KeyTake[wordFreqs, Take[userNames, 100]]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-8956697085663054093" src="https://b3m2a1.github.io/img/post-13-8956697085663054093.png" /&gt;&lt;/p&gt;
&lt;p&gt;Or we can normalize these by reputation:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;userNameReps =
   KeyTake[
     Association@Normal@
        mUsers[
          SortBy[&amp;quot;reputation&amp;quot;],

      StringDelete[ToLowerCase@#[&amp;quot;display_name&amp;quot;], Whitespace] -&amp;gt; #[
         &amp;quot;reputation&amp;quot;] &amp;amp;
          ],
     Keys@KeyTake[wordFreqs, Take[userNames, 100]]
     ];
WordCloud[
  KeyTake[wordFreqs, Keys[userNameReps]]/
    userNameReps
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-4904227619359609533" src="https://b3m2a1.github.io/img/post-13-4904227619359609533.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can also scatter plot this same data. We’ll log plot it, too, to reduce the clumping&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ListPlot[
  Callout[{userNameReps[#], wordFreqs[#]}, #] &amp;amp; /@ 
  Keys[userNameReps],
  AxesLabel -&amp;gt; {&amp;quot;reputation&amp;quot;, &amp;quot;mention frequency&amp;quot;},
  ImageSize -&amp;gt; 600,
  ScalingFunctions -&amp;gt; {{Log, Exp}, {Log, Exp}},
  Epilog -&amp;gt;
    {
      With[{f = 
      Fit[{userNameReps[#], wordFreqs[#]} &amp;amp; /@ 
        Keys[userNameReps], {x}, x]},
        Line[
          Table[Log@{r, f /. (x -&amp;gt; r)}, {r, {1, 220000}}]
          ]
        ]
      }
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-32758575970514940" src="https://b3m2a1.github.io/img/post-13-32758575970514940.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we can see that, as expected, there is a connection between reputation and comment mentions, but a) it’s relatively weak and b) there are a number of users (most notably J.M. here) who are mentioned much more often in the comments than would be predicted directly from their reputation.&lt;/p&gt;
&lt;p&gt;Also note that this is not total sample of all users. We are sampling only comments from a given subset of users and these comments are further dominated by a small number of users. If were were to take  &lt;em&gt;&lt;em&gt;all&lt;/em&gt;&lt;/em&gt;  comments I expect we would see a very different picture.&lt;/p&gt;
&lt;h3&gt;Word types&lt;/h3&gt;
&lt;p&gt;Finally, we’ll look at the types of words that are used in the comments. We’ll take a  &lt;a href="https://reference.wolfram.com/language/ref/FeatureSpacePlot.html"&gt;&lt;code&gt;FeatureSpacePlot&lt;/code&gt;&lt;/a&gt;  of the most common 100 with names longer than three letters, dropping the user names.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;featWrds =
   Select[
     Complement[
       Keys@
     TakeLargest[KeySelect[comCounts, StringLength[#] &amp;gt; 3 &amp;amp;], 300],
       Take[userNames, 100]
       ],
     StringMatchQ[LetterCharacter ..]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="comment-types-by-age" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Comment Types by Age&lt;/h2&gt;
&lt;h3&gt;Comment lengths by age&lt;/h3&gt;
&lt;p&gt;Finally we’ll get to the purported point of  &lt;em&gt;&lt;em&gt;this&lt;/em&gt;&lt;/em&gt;  post, which was to pick apart the possible ways two people of particular ages might phrase  &lt;em&gt;&lt;em&gt;their&lt;/em&gt;&lt;/em&gt;  posts. Or, more concisely and with fewer word starting with p, how does age affect word choice in comments.&lt;/p&gt;
&lt;p&gt;Let’s start by correlating our comments and ages of posters:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;idImpComs =
   StringSplit[htmlImp[#], &amp;quot;\n\n&amp;quot;] &amp;amp; /@ idComments;

ageImpComs =
   Flatten@KeyValueMap[
      Thread[#2 -&amp;gt;
          idAges[Key@#]
         ] &amp;amp;,
      idImpComs
      ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And again we’ll dump this on the web:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;CloudExport[ageImpComs, &amp;quot;MX&amp;quot;,
&amp;quot;stack_exchange_data/comments/mmaAgeTaggedComments.mx&amp;quot;,
  Permissions -&amp;gt; &amp;quot;Public&amp;quot;
  ]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/b3m2a1.datasets/stack_exchange_data/comments/mmaAgeTaggedComments.mx&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We can then group these things by age to take a look at the length of the average post for a person of a given age:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageImpGroupComs =
   GroupBy[ageImpComs, Last -&amp;gt; First];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;One thing to remember is that around three quarters of these posts will be been written by someone between the ages of 20 and 60, so this is the population we will primarily be probing.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComsWeighted =
   Map[Length, ageImpGroupComs] // 
   WeightedData[Keys[#], Values[#]] &amp;amp;;
ageComsDist =
   ageComsWeighted //
     SmoothKernelDistribution;
ageComsCDF =
   Evaluate[
      CDF[ageComsDist, #]
      ] &amp;amp;;
ageComsPDF =
   Evaluate[
      PDF[ageComsDist, #]
      ] &amp;amp;;
ageComsCDF[60] - ageComsCDF[20]
Grid@{
   {
     Plot[ageComsPDF[x],
       {x, 0, 100},
       PlotLabel -&amp;gt; &amp;quot;Probability density by commenter age&amp;quot;,
       AxesLabel -&amp;gt; {&amp;quot;age (years)&amp;quot;},
       ImageSize -&amp;gt; 250
       ],
     Histogram[ageComsWeighted,
       PlotLabel -&amp;gt; &amp;quot;Length histogram by age&amp;quot;,
       AxesLabel -&amp;gt; {&amp;quot;age (years)&amp;quot;},
       ImageSize -&amp;gt; 250
       ]
     },
   {
     Plot[ageComsCDF[x],
       {x, 0, 100},
       PlotLabel -&amp;gt; &amp;quot;Cumulative probability by age&amp;quot;,
       AxesLabel -&amp;gt; {&amp;quot;age (years)&amp;quot;},
       ImageSize -&amp;gt; 250
       ]
     }
   }

(*Out:*)

0.74258

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;table class="grid"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;img src="https://b3m2a1.github.io/img/post-13-8655081948500323418.png" alt="post-13-8655081948500323418"/&gt;&lt;/td&gt;&lt;td&gt;&lt;img src="https://b3m2a1.github.io/img/post-13-5595226195941596246.png" alt="post-13-5595226195941596246"/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;img src="https://b3m2a1.github.io/img/post-13-1415125505100810903.png" alt="post-13-1415125505100810903"/&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Null&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;First, we’ll look at mean comment length by age. To start let’s just look at what we’re working with:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageMeanComLens =
   Reverse@KeySort[Mean@*Map[StringLength] /@ ageImpGroupComs];
ListLinePlot[
  List @@@ Normal@ageMeanComLens,
  PlotRange -&amp;gt; All,
  AxesLabel -&amp;gt; {&amp;quot;user age (years)&amp;quot;, &amp;quot;mean len (chars)&amp;quot;}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-6724301368509613387" src="https://b3m2a1.github.io/img/post-13-6724301368509613387.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is all pretty messy. We’ll re-bin and re-average to smooth this out, but first we’ll see what’s going on around 18:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;N@KeySelect[ageMeanComLens, Between[{15, 18}]]

(*Out:*)

&amp;lt;|18 -&amp;gt; 131.912, 17 -&amp;gt; 277.296, 16 -&amp;gt; 98.1176, 15 -&amp;gt; 85.|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So we see something is going on ~17. If we look at our population of 17-year-old users, we have a small number of them:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Length[
  theYouths =
    Select[Keys@idImpComs, idAges[Key@#] == 17 &amp;amp;]
  ]

(*Out:*)

6

{N@Mean@Map[StringLength, #], Length[#]} &amp;amp; /@

 Lookup[idImpComs, theYouths]

(*Out:*)

{{108.667, 3}, {145., 10}, {110., 1}, {146.5, 2}, {280.777, 
  779}, {50.5, 2}}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We see we have one very active, very chatty 17 year old who is contributing most of this. Since most people first see Mathematica in college and one would expect a 17 year old would been in his or her first semester of college, it is particularly surprising they’re so active. Just to confirm, let’s see when they made their account:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;FromUnixTime@
 First@mUsers[Select[#[&amp;quot;user_id&amp;quot;] == theYouths[[-2]] &amp;amp;], 
   &amp;quot;creation_date&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-764833167556008518" src="https://b3m2a1.github.io/img/post-13-764833167556008518.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which would suggest they were 12 at the time, which seems entirely implausible (and StackExchange probably doesn’t even allow that). So we’ll write them off as having their age mislabeled.&lt;/p&gt;
&lt;p&gt;Returning to the original thread, we'll re-bin by 5 year increments, routing through  &lt;a href="https://reference.wolfram.com/language/ref/EventSeries.html"&gt;&lt;code&gt;EventSeries&lt;/code&gt;&lt;/a&gt;  to get the  &lt;a href="https://reference.wolfram.com/language/ref/Quantity.html"&gt;&lt;code&gt;Quantity&lt;/code&gt;&lt;/a&gt;  spec in.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComLens =
   KeySort[{Mean[#], Length[#]} &amp;amp;@*Map[StringLength] /@ 
    ageImpGroupComs];
ageComLenES =
   MovingMap[
     Mean@Flatten@
         Map[
           ConstantArray[#[[1]], #[[2]]] &amp;amp;,
           #
           ] &amp;amp;,
     EventSeries[
       KeyMap[DateObject[{2000}] + Quantity[#, &amp;quot;Years&amp;quot;] &amp;amp;, 
     ageComLens]
       ],
     Quantity[5, &amp;quot;Years&amp;quot;]
     ];
ageComLenPlotListFull =
   Map[
     {QuantityMagnitude[Round[#[[1]] - DateObject[{2000}]]], #[[2]]} &amp;amp;,
     ageComLenES[&amp;quot;DatePath&amp;quot;]
     ];
ListLinePlot[ageComLenPlotListFull, 
  AxesLabel -&amp;gt; {&amp;quot;user age (years)&amp;quot;, &amp;quot;mean len (chars)&amp;quot;}, 
  PlotRange -&amp;gt; All
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-3685666646788965473" src="https://b3m2a1.github.io/img/post-13-3685666646788965473.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is still quite messy (and we have a few people claiming, implausibly, to be well into their nineties or above). So we’ll ignore anything over 85 or so.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComLenPlotList =
   Map[
     {QuantityMagnitude[Round[#[[1]] - DateObject[{2000}]]], #[[2]]} &amp;amp;,
     TimeSeriesWindow[ageComLenES,
        DateObject[{2000}] + {Quantity[0, &amp;quot;Years&amp;quot;], 
       Quantity[85, &amp;quot;Years&amp;quot;]}
        ][&amp;quot;DatePath&amp;quot;]
     ];
ListLinePlot[ageComLenPlotList, 
 AxesLabel -&amp;gt; {&amp;quot;user age (years)&amp;quot;, &amp;quot;mean len (chars)&amp;quot;}]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-2017137824475339896" src="https://b3m2a1.github.io/img/post-13-2017137824475339896.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is still quite messy, but in general, we can see from this that verbosity seems to decrease with age. Of course, we are averaging over many many more at the younger ages, so a few rather terse users in their seventies can put quite a skew on the data. This overall trend does make sense, however, with regards to  &lt;a href="http://journals.sagepub.com/doi/abs/10.1177/0261927X14526993"&gt;recent research on how people communicate based on social status&lt;/a&gt; . That older people would be more comfortable being terser could be a reasonable corollary to that.&lt;/p&gt;
&lt;p&gt;Of course, this effect is small and the underlying data is bad, but it’s a fun possible interpretation.&lt;/p&gt;
&lt;h3&gt;Comment content&lt;/h3&gt;
&lt;p&gt;Another interesting thing to look at is comment sentiment. Mathematica supports the absolute most basic sentiment analysis in  &lt;a href="https://reference.wolfram.com/language/ref/Classify.html"&gt;&lt;code&gt;Classify&lt;/code&gt;&lt;/a&gt;  so we’ll first fragment our comments into sentences:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComSentences =
   Map[TextCases[StringRiffle[#, &amp;quot;\n\n&amp;quot;], &amp;quot;Sentences&amp;quot;] &amp;amp;, 
   ageImpGroupComs];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then classify all of these by sentiment. We’ll then do a simple -1, 0, 1 translation of these sentiments:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComSents =
   Replace[
       Classify[&amp;quot;Sentiment&amp;quot;, #],
       {
         &amp;quot;Positive&amp;quot; -&amp;gt; 1,
         &amp;quot;Neutral&amp;quot; -&amp;gt; 0,
         &amp;quot;Negative&amp;quot; -&amp;gt; -1,
         Indeterminate -&amp;gt; Nothing
         },
       {1}
       ] &amp;amp; /@ ageComSentences;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we’ll just look at the mean of all of these sentiments as a function of age:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ListPlot[List @@@ Normal[Mean /@ ageComSents], PlotRange -&amp;gt; All]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-519715183535349420" src="https://b3m2a1.github.io/img/post-13-519715183535349420.png" /&gt;&lt;/p&gt;
&lt;p&gt;And so in general these sentiments skew a negative, but not terribly so. And that in many ways makes sense, as almost always people come to StackExchange because they have an issue they want resolved.&lt;/p&gt;
&lt;p&gt;Next we'll do the same binning procedure as last time to get a less noisy version of this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComSentLens =
   KeySort[{Mean[#], Length[#]} &amp;amp; /@ ageComSents];
ageComSentES =
   MovingMap[
     Mean@Flatten@
         Map[
           ConstantArray[#[[1]], #[[2]]] &amp;amp;,
           #
           ] &amp;amp;,
     EventSeries[
       KeyMap[DateObject[{2000}] + Quantity[#, &amp;quot;Years&amp;quot;] &amp;amp;, 
     ageComSentLens]
       ],
     Quantity[5, &amp;quot;Years&amp;quot;]
     ];
ageComSentPlotList =
   Map[
     {QuantityMagnitude[Round[#[[1]] - DateObject[{2000}]]], #[[2]]} &amp;amp;,
     TimeSeriesWindow[ageComSentES,
        DateObject[{2000}] + {Quantity[0, &amp;quot;Years&amp;quot;], 
       Quantity[85, &amp;quot;Years&amp;quot;]}
        ][&amp;quot;DatePath&amp;quot;]
     ];
ListLinePlot[ageComSentPlotList, 
  AxesLabel -&amp;gt; {&amp;quot;user age (years)&amp;quot;, &amp;quot;mean sentiment&amp;quot;}, 
 PlotRange -&amp;gt; All]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-8572033510883230480" src="https://b3m2a1.github.io/img/post-13-8572033510883230480.png" /&gt;&lt;/p&gt;
&lt;p&gt;And here we find there is absolutely no connection between comment sentiment and age, belying the common stereotype of the crotchety old person. On StackExchange, instead, we are all crotchety, young and old.&lt;/p&gt;
&lt;p&gt;Another interesting thing to look at is the spread of the sentiments. For this we’ll stack a bunch of  &lt;code&gt;Histogram&lt;/code&gt;  to make a 3D plot. Just to make life more manageable we’ll group by years of five.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComSentsFiveGroups =
   KeySort@GroupBy[
      Normal@KeySelect[ageComSents, LessThan[85]],
      5*Quotient[#[[1]], 5, 1] &amp;amp; -&amp;gt; Last,
      Flatten
      ];
ageComSentHist =
  Histogram3D[
    KeyValueMap[
      Thread[{#, #2}] &amp;amp;,
      ageComSentsFiveGroups
      ],
    Automatic,
    &amp;quot;Probability&amp;quot;,
    ChartStyle -&amp;gt; {Opacity[1], Automatic}
    ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-8539708815315518962" src="https://b3m2a1.github.io/img/post-13-8539708815315518962.png" /&gt;&lt;/p&gt;
&lt;p&gt;And here we can see there might actually be age-dependent trends each different sentiment that were cancelling in the mean.&lt;/p&gt;
&lt;p&gt;For those interested, I’ve dumped this plot here:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;CloudDeploy[
  ageComSentHist,
  &amp;quot;stack_exchange_data/comments/mmaCommentsAgeSentiments.nb&amp;quot;, 
  Permissions -&amp;gt; &amp;quot;Public&amp;quot;
  ]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/b3m2a1.datasets/stack_exchange_data/comments/mmaCommentsAgeSentiments.nb&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Once the cloud supports all  &lt;code&gt;Graphics3D&lt;/code&gt;  primitives that will be viewable in 3D. For now you can always download the notebook with  &lt;code&gt;CloudImport&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Age vs Individual Sentiments&lt;/h3&gt;
&lt;p&gt;The most striking progression in that seems to be the decrease in positive sentiment in posts with age, so we’ll start by looking at that:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComSentsPosLens =
   KeySort[{Length[Cases[#, 1]], Length[#]} &amp;amp; /@ ageComSents];
ageComSentPosES =
   MovingMap[
     Total[#[[All, 1]]]/Total[#[[All, 2]]] &amp;amp;,
     EventSeries[
       KeyMap[DateObject[{2000}] + Quantity[#, &amp;quot;Years&amp;quot;] &amp;amp;, 
     ageComSentsPosLens]
       ],
     Quantity[5, &amp;quot;Years&amp;quot;]
     ];
ageComSentPosPlotList =
   Map[
     {QuantityMagnitude[Round[#[[1]] - DateObject[{2000}]]], #[[2]]} &amp;amp;,
     TimeSeriesWindow[ageComSentPosES,
        DateObject[{2000}] + {Quantity[0, &amp;quot;Years&amp;quot;], 
       Quantity[85, &amp;quot;Years&amp;quot;]}
        ][&amp;quot;DatePath&amp;quot;]
     ];
ListLinePlot[ageComSentPosPlotList, 
  AxesLabel -&amp;gt; {&amp;quot;user age (years)&amp;quot;, &amp;quot;percent positive&amp;quot;}, 
 PlotRange -&amp;gt; All]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-1802229423784582497" src="https://b3m2a1.github.io/img/post-13-1802229423784582497.png" /&gt;&lt;/p&gt;
&lt;p&gt;With this better sampling procedure much of what we saw before disappears. We can still check, though, what happens when plot all three sentiments simultaneously:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ageComSentsNeutLens =
   KeySort[{Length[Cases[#, 0]], Length[#]} &amp;amp; /@ ageComSents];
ageComSentNeutES =
   MovingMap[
     Total[#[[All, 1]]]/Total[#[[All, 2]]] &amp;amp;,
     EventSeries[
       KeyMap[DateObject[{2000}] + Quantity[#, &amp;quot;Years&amp;quot;] &amp;amp;, 
     ageComSentsNeutLens]
       ],
     Quantity[5, &amp;quot;Years&amp;quot;]
     ];
ageComSentNeutPlotList =
   Map[
     {QuantityMagnitude[Round[#[[1]] - DateObject[{2000}]]], #[[2]]} &amp;amp;,
     TimeSeriesWindow[ageComSentNeutES,
        DateObject[{2000}] + {Quantity[0, &amp;quot;Years&amp;quot;], 
       Quantity[85, &amp;quot;Years&amp;quot;]}
        ][&amp;quot;DatePath&amp;quot;]
     ];
ageComSentsNegLens =
   KeySort[{Length[Cases[#, -1]], Length[#]} &amp;amp; /@ ageComSents];
ageComSentNegES =
   MovingMap[
     Total[#[[All, 1]]]/Total[#[[All, 2]]] &amp;amp;,
     EventSeries[
       KeyMap[DateObject[{2000}] + Quantity[#, &amp;quot;Years&amp;quot;] &amp;amp;, 
     ageComSentsNegLens]
       ],
     Quantity[5, &amp;quot;Years&amp;quot;]
     ];
ageComSentNegPlotList =
   Map[
     {QuantityMagnitude[Round[#[[1]] - DateObject[{2000}]]], #[[
      2]]} &amp;amp;,
     TimeSeriesWindow[ageComSentNegES,
        DateObject[{2000}] + {Quantity[0, &amp;quot;Years&amp;quot;], 
       Quantity[85, &amp;quot;Years&amp;quot;]}
        ][&amp;quot;DatePath&amp;quot;]
     ];
ListLinePlot[
  {
    ageComSentPosPlotList, 
    ageComSentNeutPlotList,
    ageComSentNegPlotList
    },
  AxesLabel -&amp;gt; {&amp;quot;user age (years)&amp;quot;, &amp;quot;percent sentiment&amp;quot;}, 
  PlotRange -&amp;gt; All,
  PlotLegends -&amp;gt; {&amp;quot;positive&amp;quot;, &amp;quot;neutral&amp;quot;, &amp;quot;negative&amp;quot;}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-7306078627986006019" src="https://b3m2a1.github.io/img/post-13-7306078627986006019.png" /&gt;&lt;/p&gt;
&lt;p&gt;And here we see something interesting. Negative sentiment was pretty constant across ages, but the except in a few instances (I’m looking at you, 55 and 62 year olds), positive and neutral sentiments were coupled.&lt;/p&gt;
&lt;p&gt;What this means I have no idea, but it is an interesting result none-the-less.&lt;/p&gt;
&lt;h3&gt;Verbosity vs Sentiment&lt;/h3&gt;
&lt;p&gt;One might be interested in whether the two trends we’ve looked at, verbosity and sentiment, are connected. We can plot this by pulling from these plot lists and doing a direct correlation:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ListPlot[
  Thread[
    {
      ageComLenPlotList[[All, 2]],
      ageComSentPlotList[[All, 2]]
      }
    ],
  AxesLabel -&amp;gt;
    {
      &amp;quot;mean len (char)&amp;quot;,
      &amp;quot;mean sentiment&amp;quot;
     }
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-7237648988165766660" src="https://b3m2a1.github.io/img/post-13-7237648988165766660.png" /&gt;&lt;/p&gt;
&lt;p&gt;And that’s a decently convincing connection between increasing mean comment length and sentiment. We can quantify the fit like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;sentFit =
  LinearModelFit[
    Thread[
      {
        ageComLenPlotList[[All, 2]],
        ageComSentPlotList[[All, 2]]
        }
      ],
    chars,
    chars
    ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-13-8965116933799480070" src="https://b3m2a1.github.io/img/post-13-8965116933799480070.png" /&gt;&lt;/p&gt;
&lt;p&gt;So we get a weak-negative correlation between comment length and sentiment. Then we can pull the goodness-of-fit:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;sentFit[&amp;quot;RSquared&amp;quot;]

(*Out:*)

0.218534&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And yes, this is a pretty terrible fit, but much better than one might expect for such a messy set of data.&lt;/p&gt;
&lt;p&gt;&lt;a id="conclusions" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;With all of that, I think this has gone on long enough, but we can restate some basic conclusions we found.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We can model the expected length of a comment by considering three terms: 1) a standard  &lt;a href="https://reference.wolfram.com/language/ref/GammaDistribution.html"&gt;&lt;code&gt;GammaDistribution&lt;/code&gt;&lt;/a&gt;  that models a basic discrete, always positive process 2) a very broad  &lt;a href="https://reference.wolfram.com/language/ref/NormalDistribution.html"&gt;&lt;code&gt;NormalDistribution&lt;/code&gt;&lt;/a&gt;  that captures the breadth of comment distributions 3) a very small, sharp  &lt;a href="https://reference.wolfram.com/language/ref/NormalDistribution.html"&gt;&lt;code&gt;NormalDistribution&lt;/code&gt;&lt;/a&gt;  that recovers the fact that there is a limit to comment lengths and many people will push right up to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The standard language used on the stack exchange skews towards bug-fixes and workarounds, as compared to standard English. This might tell us something about how buggy and how many dark corners a huge chunk of software like Mathematica can have.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reputation and comment mentions are directly correlated, but some people are particularly highly mentioned for their rep. This could easily be an artifact of the dataset, or it could describe relative proclivities for conversing in the comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User age and mean comment length are negatively correlated, while user age and mean comment sentiment have no connection whatsoever.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Negative sentiment as expressed in comments is largely constant across ages, but positive and neutral sentiment are reasonably closed coupled, causing the dynamics we saw in the mean sentiment analysis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mean comment length and mean comment sentiment are negatively correlated with each other. What causes this is anyone’s guess, but it’s, at minimum, and interesting correlation&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content></entry><entry><title>Quantum Chemistry in Mathematica, A DVR Framework</title><link href="https://b3m2a1.github.io/quantum-chemistry-in-mathematica-a-dvr-framework.html" rel="alternate"></link><published>2017-10-26T18:30:59-05:00</published><updated>2017-10-27T17:16:58-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-10-26:/quantum-chemistry-in-mathematica-a-dvr-framework.html</id><summary type="html">&lt;p&gt;This will (time-permitting) be the first of a series of posts on doing quantum chemistry in Mathematica. This post will focus on one of the simplest non-standard techniques for solving the Schrödinger equation, called discrete variable representation (DVR).&lt;/p&gt;
&lt;p&gt;&lt;a id="a-discrete-variable-representation-framework" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Discrete Variable Representation Framework&lt;/h2&gt;
&lt;p&gt;Discrete variable representation (DVR) as a technique …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This will (time-permitting) be the first of a series of posts on doing quantum chemistry in Mathematica. This post will focus on one of the simplest non-standard techniques for solving the Schrödinger equation, called discrete variable representation (DVR).&lt;/p&gt;
&lt;p&gt;&lt;a id="a-discrete-variable-representation-framework" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;A Discrete Variable Representation Framework&lt;/h2&gt;
&lt;p&gt;Discrete variable representation (DVR) as a technique for computing wavefunctions dates back to some time in the ‘60s, but didn’t really get much attention until John Light and coworkers started to use it in the ‘80s. For those interested, Light and Carrington published a review paper in 2003 called  &lt;a href="http://light-group.uchicago.edu/dvr-rev.pdf"&gt;Discrete Variable Representations and their Utilization&lt;/a&gt;  that provides a more in-depth look at DVR and its history.&lt;/p&gt;
&lt;p&gt;DVR is a grid-based method, which is based off of two approximations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The basis-functions are localized at the grid points&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gaussian quadrature can be used to exactly compute the requisite integrals for a matrix representation of the Hamiltonian &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These approximations come from the realization that families of classical orthogonal polynomials have associated quadrature points, which can be used as a grid for an exact representation the Hamiltonian.&lt;/p&gt;
&lt;h3&gt;Why DVR?&lt;/h3&gt;
&lt;p&gt;DVR has two desirable characteristics in terms of simplifying chemical problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functions in pure coordinates have diagonal matrix representations (i.e. there is no coupling between grid points)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Matrix representations in a DVR are very sparse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first of these means that we can simply use Psi4 or Gaussian to generate evaluate the potential at the grid points when building up a representation of the potential. The second means that we can use efficient iterative methods for diagonalizing the Hamiltonian. An unfortunate complication is that the kinetic energy may not have a simple statement in the DVR basis, but given the age of the technique, many complicated operators have already been represented in standard DVR bases.&lt;/p&gt;
&lt;p&gt;DVR is also good for the programmer, as its simple and modular. The most computation intensive aspects of working with DVR are generating a representation for the kinetic energy and diagonalizing the Hamiltonian. With a semi-modern laptop (2012 MacBook Pro), even for complex systems, both of these can be done locally in under 30 minutes.&lt;/p&gt;
&lt;p&gt;The modularity makes frameworking convenient, as there are always 4 steps that need to be done: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate the coordinate grid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the grid to generate the kinetic and potential matrices&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add these and diagonalize to get the wavefunctions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;View the wavefunctions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of these, often only the grid and kinetic energy need to be changed (and sometimes not even the former) when implementing a new DVR scheme. &lt;/p&gt;
&lt;p&gt;Even better, multi-dimensional DVRs are often implemented as direct products of one-dimensional DVRs, which allows such a framework to reap double the benefits&lt;/p&gt;
&lt;h3&gt;A DVR Object System&lt;/h3&gt;
&lt;p&gt;Our DVR framework will be based on a concept of “classes” of DVRs and “instances” of these DVR classes. As an example, in  &lt;a href="http://www.cchem.berkeley.edu/millergrp/pdf/243.pdf"&gt;a 1984 paper&lt;/a&gt; , Daniel Colbert and William Miller introduced a DVR scheme that works on the range [-∞, ∞]. A general implementation of that scheme would be a DVR class on a 1D Cartesian grid. An instance of that DVR class would be a specific DVR using 151 grid points on the range [-2, 2].&lt;/p&gt;
&lt;p&gt;At this point, I’ve written DVR classes for a number of general cases. First, we’ll load the DVR submodule of my  &lt;a href="https://github.com/b3m2a1/mathematica-ChemTools"&gt;ChemTools&lt;/a&gt;  package:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Needs[&amp;quot;ChemTools`DVR`&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you need to install ChemTools to you can get it like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[&amp;quot;ChemTools&amp;quot;,
  &amp;quot;Site&amp;quot; -&amp;gt; 
  &amp;quot;http://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer&amp;quot;
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we can list the classes available:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemDVRClasses[]

(*Out:*)

{&amp;quot;Cartesian1DDVR&amp;quot;, &amp;quot;LegendreDVR&amp;quot;, &amp;quot;MeyerDVR&amp;quot;, &amp;quot;PlanePointDVR&amp;quot;, \
&amp;quot;ProlateTopDVR&amp;quot;, &amp;quot;RadialDVR&amp;quot;, &amp;quot;SlowLoadingDVR&amp;quot;, &amp;quot;SphericalDVR&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The DVR we’ll be using here is what I called the  &lt;code&gt;"Cartesian1DDVR"&lt;/code&gt; . We’ll first load the class:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;c1ddvrclass = ChemDVRClass[&amp;quot;Cartesian1DDVR&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-4111166959648506694" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-4111166959648506694.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then we can use the class to build an object:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;c1ddvr = c1ddvrclass[]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-6142766584366648679" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-6142766584366648679.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is now a proper object we can play with. It comes pre-populated with a harmonic oscillator potential, and we can see how it looks on that (note we’re using  &lt;code&gt;Manipulate -&amp;gt; False&lt;/code&gt;  for static display purposes):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;c1ddvr[Manipulate -&amp;gt; False]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-8956359670760616181" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-8956359670760616181.png" /&gt;&lt;/p&gt;
&lt;p&gt;This approximation is super rough. Let’s polish it up a bit by using more points:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;c1ddvr[
  &amp;quot;Points&amp;quot; -&amp;gt; {151},
  Manipulate -&amp;gt; False
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-1227987671069820866" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-1227987671069820866.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is a good approximation. And it’s fast. Let’s generate interpolating versions of the first few of these:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;c1ddvr[
  &amp;quot;Points&amp;quot; -&amp;gt; {151},
  Return -&amp;gt; &amp;quot;InterpolatingWavefunctions&amp;quot;,
  &amp;quot;WavefunctionSelection&amp;quot; -&amp;gt; ;; 5,
  Manipulate -&amp;gt; False
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-5133509634393693038" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-5133509634393693038.png" /&gt;&lt;/p&gt;
&lt;p&gt;This gives us wavefunction energies and interpolating functions.&lt;/p&gt;
&lt;p&gt;&lt;a id="doublewell-potential" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Double-Well Potential&lt;/h2&gt;
&lt;p&gt;That’s fun, but the harmonic oscillator is a little boring. Let’s play with a more interesting potential (but not too interesting, mind you). We’ll do a half-square, double-well potential.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;L = 10;
barR = barL = 10000;
v0 = L(*^-1.5*);
zp = 0;
pot =
  Compile[{{x, _Real}},
    With[{L = L, v0 = v0, zp = zp, barR = barR, barL = barL},
      Piecewise[{
         {barL,
           x &amp;lt; L (-3/2)},
         {zp,
           L (-3/2) &amp;lt;= x &amp;lt;= L (-1/2)},
         {v0,
           L (-1/2) &amp;lt; x &amp;lt; 0},
         {v0*Power[1 - Exp[(x - L)*Power[x, -.5]], 2],
           0 &amp;lt;= x}
         }]
      ],
    RuntimeOptions -&amp;gt; {
       &amp;quot;EvaluateSymbolically&amp;quot; -&amp;gt; False
       }
    ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-6940580373306911830" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-6940580373306911830.png" /&gt;&lt;/p&gt;
&lt;p&gt;We’ll quickly confirm we have a nice double-well:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Plot[pot[x], {x, -(3/2 + 1/100) L, (3/2 + 1/100)*L }]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-4478202207018823702" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-4478202207018823702.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then we’ll feed this into a new DVR object on a new range. &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;c1ddvr2 = c1ddvrclass[{151}, {2 L*{-1, 1}}];

c1ddvr2[
  Function -&amp;gt; pot,
  Manipulate -&amp;gt; False, 
  &amp;quot;WavefunctionSelection&amp;quot; -&amp;gt; 3,
  PlotRange -&amp;gt; {-.1, .5}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-8564704634016007244" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-8564704634016007244.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see that it appears as if we have standard particle-in-a-box wavefunctions on the left (1 and 3) and Morse-oscillator functions on the right (2). We can then extract the  &lt;code&gt;"InterpolatingWavefunctions"&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;wfns = c1ddvr2[Function -&amp;gt; pot, 
   Return -&amp;gt; &amp;quot;InterpolatingWavefunctions&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we can  &lt;a href="https://reference.wolfram.com/language/ref/Animate.html"&gt;&lt;code&gt;Animate&lt;/code&gt;&lt;/a&gt;  these:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ListAnimate[
  MapIndexed[
    Show[
       Plot[Evaluate[#[[1]] + #[[2]][x]], {x, -2 L, 2 L}, 
         PlotRange -&amp;gt; {-.1, 10 + #[[1]]},
         PlotStyle -&amp;gt; ColorData[97][#2[[1]]]
         ],
       Plot[pot[x], {x, -2 L, 2 L}, 
     PlotStyle -&amp;gt; Directive[Dashed, Gray]]
       ] &amp;amp;,
    Take[wfns, 25]
    ]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="quantum-chemistry-in-mathematica-a-dvr-framework-2876316653199124104" src="https://b3m2a1.github.io/img/quantum-chemistry-in-mathematica-a-dvr-framework-2876316653199124104.gif" /&gt;&lt;/p&gt;
&lt;h3&gt;Other DVR Schemes&lt;/h3&gt;
&lt;p&gt;Many different types of DVRs are possible. I have constructed DVRs in up to 3 dimensions, although theoretically arbitrary dimensional DVRs are possible. Similarly I’ve constructed DVRs that work in angular coordinates, or which are appropriate for radial wavefunctions (which allowed me to build a DVR on a spherical grid). For now, though, we’ll leave it at this and come back to those some other day.&lt;/p&gt;</content><category term="chemistry"></category></entry><entry><title>Building Websites with Mathematica, Part 2</title><link href="https://b3m2a1.github.io/building-websites-with-mathematica-part-2.html" rel="alternate"></link><published>2017-09-19T16:41:14-05:00</published><updated>2017-09-19T23:15:45-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-09-19:/building-websites-with-mathematica-part-2.html</id><summary type="html">&lt;p&gt;So in this  &lt;a href="building-websites-with-mathematica.html"&gt;website’s very first post&lt;/a&gt;  I ran through how one can use  &lt;a href="https://blog.getpelican.com/"&gt;pelican&lt;/a&gt;  and Mathematica in conjunction to make a website. Now we’re gonna cut pelican out all together.&lt;/p&gt;
&lt;p&gt;The basic process will look almost exactly the same, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write content in Mathematica notebooks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customize the …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;So in this  &lt;a href="building-websites-with-mathematica.html"&gt;website’s very first post&lt;/a&gt;  I ran through how one can use  &lt;a href="https://blog.getpelican.com/"&gt;pelican&lt;/a&gt;  and Mathematica in conjunction to make a website. Now we’re gonna cut pelican out all together.&lt;/p&gt;
&lt;p&gt;The basic process will look almost exactly the same, though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Write content in Mathematica notebooks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Customize the website via themes and templates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Export to build directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Deploy to cloud&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main trick here, though, is in that innocuous “customize the website via themes and templates”, as it’s that “templates” that will really trip us up.&lt;/p&gt;
&lt;p&gt;&lt;a id="xmltemplates" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;XMLTemplates&lt;/h2&gt;
&lt;h3&gt;Basic Overview&lt;/h3&gt;
&lt;p&gt;Mathematica’s had a templating system for a little while, now:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletFind[&amp;quot;Templating&amp;quot;][[1]][&amp;quot;MathematicaVersion&amp;quot;]

(*Out:*)

&amp;quot;10.1+&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This system has a general templating language that runs through  &lt;a href="https://reference.wolfram.com/language/ref/TemplateObject.html"&gt;&lt;code&gt;TemplateObject&lt;/code&gt;&lt;/a&gt; . The templating language is too clunky for most simple cases, though. Because of this the team that made the templating system added a collection of specialized templates, including  &lt;a href="https://reference.wolfram.com/language/ref/StringTemplate.html"&gt;&lt;code&gt;StringTemplate&lt;/code&gt;&lt;/a&gt; ,  &lt;a href="https://reference.wolfram.com/language/ref/NotebookTemplate.html"&gt;&lt;code&gt;NotebookTemplate&lt;/code&gt;&lt;/a&gt; ,  &lt;a href="https://reference.wolfram.com/language/ref/FileTemplate.html"&gt;&lt;code&gt;FileTemplate&lt;/code&gt;&lt;/a&gt; , and most important for us,  &lt;a href="https://reference.wolfram.com/language/ref/XMLTemplate.html"&gt;&lt;code&gt;XMLTemplate&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;It’s this  &lt;code&gt;XMLTemplate&lt;/code&gt;  system that we’ll use to build our site. So the first order-of-business is to translate our old Jinja templates into  &lt;code&gt;XMLTemplate&lt;/code&gt; -ready form.&lt;/p&gt;
&lt;p&gt;Here’s a quick example. First the Jinja template:&lt;/p&gt;
&lt;pre class='program'&gt;
 &lt;code&gt;
&amp;lt;title&amp;gt; {% block title %} {{ SITENAME }} {% endblock %} &amp;lt;/title&amp;gt;
&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;{{ SITEURL }}/{{ output_file }}&amp;quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And now the  &lt;code&gt;XMLTemplate&lt;/code&gt;&lt;/p&gt;
&lt;pre class='program'&gt;
 &lt;code&gt;
&amp;lt;title&amp;gt;&amp;lt;wolfram:slot id=&amp;quot;Title&amp;quot;&amp;gt;&amp;lt;wolfram:slot id = &amp;quot;SiteName&amp;quot;/&amp;gt;&amp;lt;/wolfram:slot&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;&amp;lt;wolfram:slot id=&amp;apos;SiteURL&amp;apos;/&amp;gt;/&amp;lt;wolfram:slot id=&amp;apos;OutputFile&amp;apos;/&amp;gt;&amp;quot;&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In general there’s a pretty simple translation between the two, although the Wolfram version is, unsurprisingly, more verbose.&lt;/p&gt;
&lt;h3&gt;XMLTemplate Complications&lt;/h3&gt;
&lt;p&gt;Unfortunately there are cases when things get more complex where this breaks down. The core case is when you are extending templates or using passed variables as slot names—or whenever you need variables to cascade up or down, essentially.&lt;/p&gt;
&lt;p&gt;As an example, in Jinja we might have this:&lt;/p&gt;
&lt;pre class='program'&gt;
 &lt;code&gt;
{% extends &amp;quot;index.html&amp;quot; %}

{% block title %}
# {{ tag }} Articles | {{ SITENAME }}
{% endblock %}

{% block page_header %}
# {{ tag }} Articles
{% endblock %}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Our naive  &lt;code&gt;XMLTemplate&lt;/code&gt;  would look like this:&lt;/p&gt;
&lt;pre class='program'&gt;
 &lt;code&gt;
&amp;lt;wolfram:get path = &amp;quot;index.html&amp;quot;&amp;gt;

&amp;lt;wolfram:slot id = &amp;quot;Title&amp;quot;&amp;gt;
# &amp;lt;wolfram:slot id = &amp;quot;Tag&amp;quot;/&amp;gt; Articles | &amp;lt;wolfram:slot id = &amp;quot;SiteName&amp;quot;/&amp;gt;
&amp;lt;/wolfram:slot&amp;gt;

&amp;lt;wolfram:slot id = &amp;quot;PageHeader&amp;quot;&amp;gt;
# &amp;lt;wolfram:slot id = &amp;quot;Tag&amp;quot;/&amp;gt; Articles
&amp;lt;/wolfram:slot&amp;gt;

&amp;lt;/wolfram:get&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;But we can run into issues here. The first might occur in passing  &lt;code&gt;"Title"&lt;/code&gt;  to our template. &lt;/p&gt;
&lt;p&gt;Say we apply this template like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;temp =
  XMLTemplate@&amp;quot;
   &amp;lt;wolfram:comment&amp;gt;
   We're excluding the &amp;lt;wolfram:get&amp;gt;...&amp;lt;/wolfram:get&amp;gt; for now
   &amp;lt;/wolfram:comment&amp;gt;

   &amp;lt;wolfram:slot id='Title'&amp;gt;
   #&amp;lt;wolfram:slot id='Tag'/&amp;gt; Articles | &amp;lt;wolfram:slot id='SiteName'/&amp;gt;
   &amp;lt;/wolfram:slot&amp;gt;

   &amp;lt;wolfram:slot id='PageHeader'&amp;gt;
   #&amp;lt;wolfram:slot id='Tag'/&amp;gt; Articles
   &amp;lt;/wolfram:slot&amp;gt;
   &amp;quot;;
TemplateApply[
  temp, &amp;lt;|&amp;quot;Tag&amp;quot; -&amp;gt; &amp;quot;tag&amp;quot;, &amp;quot;SiteName&amp;quot; -&amp;gt; &amp;quot;mycoolsite&amp;quot;|&amp;gt;] // StringTrim&lt;/code&gt;&lt;/pre&gt;


&lt;pre class='program'&gt;
 &lt;code&gt;-----------Out-----------
#tag Articles | mycoolsite



#tag Articles&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;All good here. But what happens if we also pass a  &lt;code&gt;"Title"&lt;/code&gt; ?&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;TemplateApply[
  temp, &amp;lt;|&amp;quot;Tag&amp;quot; -&amp;gt; &amp;quot;tag&amp;quot;, &amp;quot;SiteName&amp;quot; -&amp;gt; &amp;quot;mycoolsite&amp;quot;, 
   &amp;quot;Title&amp;quot; -&amp;gt; &amp;quot;mytitle&amp;quot;|&amp;gt;] // StringTrim&lt;/code&gt;&lt;/pre&gt;


&lt;pre class='program'&gt;
 &lt;code&gt;-----------Out-----------
mytitle

#tag Articles&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;The  &lt;code&gt;"Title"&lt;/code&gt;  slot got wiped out. This shows how you can be burned if you’re expecting the  &lt;code&gt;"Title"&lt;/code&gt;  to cascade up. The  &lt;code&gt;"Title"&lt;/code&gt;  is a global replacement as are all passed variables. If you have a  &lt;code&gt;"Title"&lt;/code&gt;  slot in a parent template, the  &lt;code&gt;"Title"&lt;/code&gt;  will insert there. A somewhat better way to write this is like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;temp =
  XMLTemplate@&amp;quot;
   &amp;lt;wolfram:comment&amp;gt;
   We're excluding the &amp;lt;wolfram:get&amp;gt;...&amp;lt;/wolfram:get&amp;gt; for now
   &amp;lt;/wolfram:comment&amp;gt;

   &amp;lt;wolfram:slot id='PassedTitle'&amp;gt;
   #&amp;lt;wolfram:slot id='Tag'/&amp;gt; Articles | &amp;lt;wolfram:slot id='SiteName'/&amp;gt; \
| &amp;lt;wolfram:slot id='Title'/&amp;gt;
   &amp;lt;/wolfram:slot&amp;gt;

   &amp;lt;wolfram:slot id='PageHeader'&amp;gt;
   #&amp;lt;wolfram:slot id='Tag'/&amp;gt; Articles
   &amp;lt;/wolfram:slot&amp;gt;
   &amp;quot;;
TemplateApply[
  temp, &amp;lt;|&amp;quot;Tag&amp;quot; -&amp;gt; &amp;quot;tag&amp;quot;, &amp;quot;SiteName&amp;quot; -&amp;gt; &amp;quot;mycoolsite&amp;quot;, 
   &amp;quot;Title&amp;quot; -&amp;gt; &amp;quot;mytitle&amp;quot;|&amp;gt;] // StringTrim&lt;/code&gt;&lt;/pre&gt;


&lt;pre class='program'&gt;
 &lt;code&gt;-----------Out-----------
#tag Articles | mycoolsite | mytitle



#tag Articles&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;This way the  &lt;code&gt;"Title"&lt;/code&gt;  will cascade up as  &lt;code&gt;"PassedTitle"&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;This can also bite you when you are using  &lt;code&gt;"&amp;lt;wolfram:get&amp;gt;"&lt;/code&gt;  blocks the other way. Say you have a  &lt;code&gt;"var"&lt;/code&gt;  parameter that you’re generating and which you’d like to pass into a  &lt;code&gt;"&amp;lt;wolfram:get&amp;gt;"&lt;/code&gt;  block, like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;varExists =
  &amp;quot;&amp;lt;wolfram:which&amp;gt;
   &amp;lt;wolfram:if test='KeyMemberQ[#,#var]'&amp;gt;
    &amp;lt;wolfram:slot id='if'&amp;gt;&amp;lt;/wolfram:slot&amp;gt;
   &amp;lt;/wolfram:if&amp;gt;
   &amp;lt;wolfram:else&amp;gt;
    &amp;lt;wolfram:slot id='else' /&amp;gt;
   &amp;lt;/wolfram:else&amp;gt;
  &amp;lt;/wolfram:which&amp;gt;&amp;quot;;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This seems pretty good. We have a test which tests if a parameter  &lt;code&gt;"var"&lt;/code&gt;  is in our template variable list. Well, when we drop this in a file and test it like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;dir = FileNameJoin@{$TemporaryDirectory, &amp;quot;xml_templates&amp;quot;};
CreateDirectory[dir];

Export[FileNameJoin@{dir, &amp;quot;varExists&amp;quot;},
   varExists,
   &amp;quot;Text&amp;quot;
   ];

temp = &amp;quot;
  &amp;lt;title&amp;gt;
   &amp;lt;wolfram:with longTitle='True'&amp;gt;
    &amp;lt;wolfram:get path='varExists'&amp;gt;
     &amp;lt;wolfram:slot id='var'&amp;gt;longTitle&amp;lt;/wolfram:slot&amp;gt;
     &amp;lt;wolfram:slot id='if'&amp;gt;A very long title&amp;lt;/wolfram:slot&amp;gt;
     &amp;lt;wolfram:slot id='else'&amp;gt;A more compact title&amp;lt;/wolfram:slot&amp;gt;
    &amp;lt;/wolfram:get&amp;gt;
   &amp;lt;/wolfram:with&amp;gt;
  &amp;lt;/title&amp;gt;&amp;quot;;


Block[{
    $TemplatePath =
      Append[$TemplatePath, dir]
    },
   TemplateApply[XMLTemplate@temp, &amp;lt;||&amp;gt;]
   ]&lt;/code&gt;&lt;/pre&gt;


&lt;pre class='program'&gt;
 &lt;code&gt;-----------Out-----------

&amp;lt;title&amp;gt;


  A more compact title


&amp;lt;/title&amp;gt;&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;We see here that the  &lt;code&gt;Slot&lt;/code&gt;  operator doesn’t work as one would expect. It is not an &lt;code&gt;Association&lt;/code&gt; of all current stack arguments, but rather just those passed. There’s some syntactic sugar to support  &lt;code&gt;"#var"&lt;/code&gt;  type names from the stack, but meta-programming of this nature is hard. Similarly there can be complex issues with variable passing and values which all derive from this core issue.&lt;/p&gt;
&lt;h3&gt;XMLTemplates Routine Libraries&lt;/h3&gt;
&lt;p&gt;An effective way to circumvent these issues is to fall back to the core Mathematica code. In particular there are parameters  &lt;code&gt;Templating`$TemplateArgumentStack&lt;/code&gt;  and  &lt;code&gt;Templating`$TemplateArguments&lt;/code&gt;  which provide access to stack values. We can define a new  &lt;code&gt;varExists&lt;/code&gt;  routine like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;With[{
     tempArgs =
        $$templateLib[&amp;quot;getTemplateArguments&amp;quot;][#]
     },
    ! MatchQ[
        $$templateLib[&amp;quot;templateArgumentLookup&amp;quot;][tempArgs, &amp;quot;var&amp;quot;],
        _Missing | False | None | _String?(StringMatchQ[Whitespace])
        ]
    ] &amp;amp;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which takes advantage of two other routines,  &lt;code&gt;getTemplateArguments&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(Join @@
     Flatten@{
         #,
         Replace[Templating`$TemplateArgumentStack, {
               {___, a_} :&amp;gt; a,
               _ -&amp;gt; &amp;lt;||&amp;gt;
             }]
         }) &amp;amp;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And  &lt;code&gt;templateArgumentLookup&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Replace[
    #@
       Replace[#[#2],
          t_TemplateObject :&amp;gt;
             TemplateApply[t, #]
          ],
    TemplateObject[{
         Templating`Evaluator`PackagePrivate`apply[_,
            a_
            ]
         }] :&amp;gt;
         Block[
            {
               Templating`PackageScope`$TemplateEvaluate = True
               },
            a
            ]
    ] &amp;amp;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we place these in .m files and define a loading function like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;With[{Templating`lib`Private`libdir = DirectoryName[$InputFileName]},
   Templating`lib`$$templateLib[f_] :=

  Templating`lib`$$templateLib[f] =
         (
            Begin[&amp;quot;Templating`lib`Private`&amp;quot;];
            (End[]; #) &amp;amp;@

     Import@FileNameJoin[{Templating`lib`Private`libdir, f &amp;lt;&amp;gt; &amp;quot;.m&amp;quot;}]
            )
   ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we can use these routines in  &lt;code&gt;XMLTemplate&lt;/code&gt;  expressions, like this:&lt;/p&gt;
&lt;pre class='program'&gt;
 &lt;code&gt;
&amp;lt;!--varDefinedBlock.html--&amp;gt;

&amp;lt;wolfram:which&amp;gt;
  &amp;lt;wolfram:if
    test=&amp;apos;$$templateLib[&amp;quot;varDefined&amp;quot;][#]&amp;apos;&amp;gt;
    &amp;lt;wolfram:slot id=&amp;apos;if&amp;apos; /&amp;gt;
  &amp;lt;/wolfram:if&amp;gt;
  &amp;lt;wolfram:else&amp;gt;
    &amp;lt;wolfram:slot id=&amp;apos;else&amp;apos; /&amp;gt;
  &amp;lt;/wolfram:else&amp;gt;
&amp;lt;/wolfram:which&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And then in our generator we prep and clear  &lt;code&gt;$$templateLib&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;By doing this we can make the  &lt;code&gt;XMLTemplate&lt;/code&gt;  framework a lot more flexible and extensible and make our code a lot less verbose.&lt;/p&gt;
&lt;p&gt;&lt;a id="building-content" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Building Content&lt;/h2&gt;
&lt;h3&gt;Basic Idea&lt;/h3&gt;
&lt;p&gt;So with our  &lt;code&gt;XMLTemplate&lt;/code&gt;  considerations out of the way we move on to the real work of content generation. The basic process idea is that we’ll have an ever growing stack of parameters which encapsulates all of our site data. We’ll populate it from the .md and .html files in our content directory in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Meta-information for all files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helper-info like URL, Summary, etc. for posts and pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Raw HTML for posts and pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aggregation pages, like the index.html &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll have this stack be an  &lt;code&gt;Association&lt;/code&gt;  for convenient lookup, which allows us to provide helper functions like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;quot;ContentData&amp;quot; -&amp;gt;
  Function[
    Fold[
      Lookup[#, #2, &amp;lt;||&amp;gt;] &amp;amp;,
      $ContentStack,
      {#, &amp;quot;Attributes&amp;quot;}
      ]
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Or aggregations like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;quot;Pages&amp;quot; :&amp;gt;
  Select[
    Values@
      $ContentStack[[All, &amp;quot;Attributes&amp;quot;]],
    MemberQ[#[&amp;quot;Templates&amp;quot;], &amp;quot;page.html&amp;quot;] &amp;amp;
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then by exposing this  &lt;code&gt;$ContentStack&lt;/code&gt;  to the templates, we can write even more powerful templates with even less work. For instance, here’s a snippet from my standard index.html template:&lt;/p&gt;
&lt;pre class='program'&gt;
 &lt;code&gt;
&amp;lt;wolfram:sequence
    values=&amp;quot;Replace[#IndexListing,Except[_List]:&amp;gt;#Articles]&amp;quot;
    slot=&amp;quot;IndexItem&amp;quot; delimiters=&amp;quot;&amp;lt;hr&amp;gt;&amp;quot;
    &amp;gt;

    &amp;lt;div class=&amp;quot;article-bubble bubble centered&amp;quot;&amp;gt;
      &amp;lt;article class=&amp;quot;teaser&amp;quot;&amp;gt;
          &amp;lt;h4 class=&amp;quot;article-title&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;apos;&amp;lt;wolfram:slot id=&amp;quot;SiteURL&amp;quot;/&amp;gt;/&amp;lt;wolfram:expr&amp;gt;#IndexItem[&amp;quot;URL&amp;quot;]&amp;lt;/wolfram:expr&amp;gt;&amp;apos;&amp;gt;
              &amp;lt;wolfram:expr&amp;gt;#IndexItem[&amp;quot;Title&amp;quot;]&amp;lt;/wolfram:expr&amp;gt;
            &amp;lt;/a&amp;gt;
          &amp;lt;/h4&amp;gt;
          &amp;lt;div class=&amp;quot;content article-summary&amp;quot;&amp;gt;
            &amp;lt;wolfram:expr&amp;gt;#IndexItem[&amp;quot;Summary&amp;quot;]&amp;lt;/wolfram:expr&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/article&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;We pass the entire  &lt;code&gt;$ContentStack&lt;/code&gt;  to the  &lt;code&gt;TemplateApply&lt;/code&gt;  call, so the template can take advantage of the  &lt;code&gt;"Articles"&lt;/code&gt;  parameter it provides.&lt;/p&gt;
&lt;h3&gt;Markdown Parsing&lt;/h3&gt;
&lt;p&gt;The hard part of all this is that we have to have an effective way to go from Markdown to HTML. Since we want to work with pure Mathematica code we need a Markdown to HTML converter function—something which I was unable to find before starting work on the site builder.&lt;/p&gt;
&lt;p&gt;I won’t go into all the details of how to write one of these now, but know that it’s a pretty tedious endeavor (and my version is not even entirely complete). Let it suffice to know that one now exists.&lt;/p&gt;
&lt;p&gt;&lt;a id="copying-themes" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Copying Themes&lt;/h2&gt;
&lt;p&gt;The second-to-last (or final if you aren’t deploying in the cloud) step is to copy over the theme. We want to be efficient about how we do this—it’s wasteful to copy it over every time. To make this more efficient we use a system where we check the  &lt;code&gt;FileDate&lt;/code&gt;  of the previously copied version and the version in the core theme directory. If the previously copied one is older we copy over the new one.&lt;/p&gt;
&lt;p&gt;&lt;a id="deployment" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Deployment&lt;/h2&gt;
&lt;p&gt;Finally, with all this in place, we can move to actually deploying our page. We will do it in exactly the same way as described in the original post.&lt;/p&gt;
&lt;p&gt;&lt;a id="extensions" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Extensions&lt;/h2&gt;
&lt;p&gt;The power of having something like this in pure Mathematica code is that it significantly lowers the barriers to developing websites. Making a new site is as simple as creating a new collection of  &lt;code&gt;XMLTemplate&lt;/code&gt; s (or more likely adapting an old one), maybe adding some new  &lt;code&gt;$$templateLib&lt;/code&gt;  functions.&lt;/p&gt;
&lt;p&gt;This is very powerful, and I’ve already set up two systems that use this. My first is an extension of the built-in  &lt;code&gt;PacletManager&lt;/code&gt; , which creates a static site that lists what is on a paclet server. The second is a general documentation host for providing a nicer interface on the documentation I generate and web-deploy.&lt;/p&gt;
&lt;p&gt;The first one lives  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer/main.html"&gt;here&lt;/a&gt;  and the impetus behind its creation is described in  &lt;a href="building-a-mathematica-package-ecosystem-part-1.html"&gt;this post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post-11-7041362475981202038" src="https://b3m2a1.github.io/img/post-11-7041362475981202038.png" /&gt;&lt;/p&gt;
&lt;p&gt;And the latter is  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/main.html"&gt;here&lt;/a&gt;  and the impetus behind its creation is described in  &lt;a href="building-a-mathematica-package-ecosystem-part-2.html"&gt;this post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post-11-7379889623084279071" src="https://b3m2a1.github.io/img/post-11-7379889623084279071.png" /&gt;&lt;/p&gt;
&lt;p&gt;Even better, both of these can also live as their own packages without any dependencies on anything outside of Mathematica. Having a native site builder just makes things vastly quicker to set up and so much more convenient.&lt;/p&gt;
&lt;p&gt;And with that, I think, we're done.&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>User Cohorts on the StackExchange Network</title><link href="https://b3m2a1.github.io/user-cohorts-on-the-stackexchange-network.html" rel="alternate"></link><published>2017-09-16T13:19:19-05:00</published><updated>2017-09-16T15:50:02-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-09-16:/user-cohorts-on-the-stackexchange-network.html</id><summary type="html">&lt;p&gt;Here’s a quick post on something I’ve been playing with recently. For fun I was looking at the data from the StackExchange API and noticed that it provides user ages, assuming a user has provided their birthdate to StackExchange.&lt;/p&gt;
&lt;p&gt;So, for fun, I decided I’d look at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here’s a quick post on something I’ve been playing with recently. For fun I was looking at the data from the StackExchange API and noticed that it provides user ages, assuming a user has provided their birthdate to StackExchange.&lt;/p&gt;
&lt;p&gt;So, for fun, I decided I’d look at the Mathematica user-age distribution. Here’s how I pulled down the data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so = ServiceConnect[&amp;quot;StackExchange&amp;quot;];
mseUsers =
   $so[&amp;quot;QueryIterate&amp;quot;,
     &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Users&amp;quot;,
     &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;I’ve cached that data in the cloud, so for those who are interested in looking at it, this will suffice:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;mseUsers = CloudImport[&amp;quot;user:b3m2a1/mse_users_list.mx&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We’ll then want a function for extracting age data and we’ll include an optional weighting parameter, too, so we can weight by reputation:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;userAgeData[ds_, weighting_: None] :=
   Lookup[
      Merge[
        Normal@
      ds[Select[#[&amp;quot;age&amp;quot;] &amp;gt; 0 &amp;amp;]][All, {&amp;quot;reputation&amp;quot;, &amp;quot;age&amp;quot;}],
        Flatten
        ],
      {&amp;quot;age&amp;quot;, &amp;quot;reputation&amp;quot;}
      ] //
    If[weighting === None,
       #[[1]],
       WeightedData @@ ReplacePart[#, 2 -&amp;gt; Map[weighting, #[[2]]]]
       ] &amp;amp;;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then creating a  &lt;a href="https://reference.wolfram.com/language/ref/SmoothHistogram.html"&gt;&lt;code&gt;SmoothHistogram&lt;/code&gt;&lt;/a&gt;  of this data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[userAgeData[mseUsers],
  PlotRange -&amp;gt; {{10, 100}, All},
  GridLines -&amp;gt; {Range[10, 100, 5], None}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-6131293665048629036" src="https://b3m2a1.github.io/img/post-10-6131293665048629036.png" /&gt;&lt;/p&gt;
&lt;p&gt;We notice we have a few interesting features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An incredibly strong peak around age 27&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bump around age 47&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A bump around age 97&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last of those is likely coming from people supplying the maximum possible age to StackExchange and the first is probably reflective of the fact that graduate students tend to be the core users of Mathematica (and also that StackExchange skews young in general).&lt;/p&gt;
&lt;p&gt;The second could have many factors, but my guess—and note it is really just a guess—since I just mentioned graduate students, is that there’s a group of professors who use the site. But it could be reflective of many things and any suggestions would be of interest to me.&lt;/p&gt;
&lt;p&gt;Now let’s look at this with some weighting provided for user reputation.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[userAgeData[mseUsers, Identity],
  PlotRange -&amp;gt; {{10, 100}, All},
  GridLines -&amp;gt; {Range[10, 100, 5], None}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-2760807501770355014" src="https://b3m2a1.github.io/img/post-10-2760807501770355014.png" /&gt;&lt;/p&gt;
&lt;p&gt;What we’re seeing now is the effect of small groups of core users. There’s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A group of retirees up around 80&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A group of mostly WRI employees around 60&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A group of former and current scientists (mostly physicists) around 40, many of whom work for WRI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A collection of people at the expected peak around 29&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(note that most of this isn’t possible to get from the graph, I just checked which users corresponded to which groups)&lt;/p&gt;
&lt;p&gt;Now let’s change the weighting so these core groups aren’t as dominant;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[userAgeData[mseUsers, Power[N[#], .8] &amp;amp;],
  PlotRange -&amp;gt; {{10, 100}, All},
  GridLines -&amp;gt; {Range[10, 100, 5], None}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-6394743223667867810" src="https://b3m2a1.github.io/img/post-10-6394743223667867810.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see already that things are shifting back younger. Let’s make a little animation of the shift:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ListAnimate[
  Table[
    With[{shift = shift},
      SmoothHistogram[userAgeData[mseUsers, Power[N[#], shift] &amp;amp;],
        PlotRange -&amp;gt; {{10, 100}, All},
        GridLines -&amp;gt; {Range[10, 100, 5], None}
        ]
      ],
    {shift, 1, 0, -.1}
    ]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-6669741786640704768" src="https://b3m2a1.github.io/img/post-10-6669741786640704768.gif" /&gt;&lt;/p&gt;
&lt;p&gt;What we can see in this is that the core Mathematica StackExchange user tends to be older (in many cases considerably) than the average Mathematica StackExchange user.&lt;/p&gt;
&lt;h3&gt;Cross Site Comparisons&lt;/h3&gt;
&lt;p&gt;Now let’s see how Mathematica compares to other sites on the StackExchange network. First we’ll create a function that will pull down a user cohort from a different site of about the same size at the Mathematica user cohort:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;userCohort[site_, n_: 35000] :=
  $so[&amp;quot;QueryIterate&amp;quot;,
    &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Users&amp;quot;,
    &amp;quot;site&amp;quot; -&amp;gt; site,
    &amp;quot;MaxIterations&amp;quot; -&amp;gt; Ceiling[n/100]
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now, let’s look at math and the main site. First pull the data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;mathUsers = userCohort[&amp;quot;math&amp;quot;];
soUsers = userCohort[&amp;quot;stackoverflow&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And make the same sort of histogram:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
  userAgeData /@
    &amp;lt;|

   &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
      &amp;quot;Math StackExchange&amp;quot; -&amp;gt; mathUsers,
      &amp;quot;StackOverflow&amp;quot; -&amp;gt; soUsers
      |&amp;gt;,
  PlotRange -&amp;gt; {{10, 100}, All},
  GridLines -&amp;gt; {Range[10, 100, 5], None}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-4634238591996953363" src="https://b3m2a1.github.io/img/post-10-4634238591996953363.png" /&gt;&lt;/p&gt;
&lt;p&gt;And interestingly we see that the profile of the math site is very similar to the Mathematica site except for a few perhaps skewing a bit younger (no blips around 40 and 45, more probability down towards 18 and 20). StackOverflow, however, is very different. We’ll expand this to look at many more sites and see if we can extract anything from that.&lt;/p&gt;
&lt;p&gt;First we’ll make the same sort of reputation-weighted plot as before, though:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
  userAgeData[#, Identity] &amp;amp; /@
    &amp;lt;|

   &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
      &amp;quot;Math StackExchange&amp;quot; -&amp;gt; mathUsers,
      &amp;quot;StackOverflow&amp;quot; -&amp;gt; soUsers
      |&amp;gt;,
  PlotRange -&amp;gt; {{10, 100}, All},
  GridLines -&amp;gt; {Range[10, 100, 5], None}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-1913612074465802521" src="https://b3m2a1.github.io/img/post-10-1913612074465802521.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see from this that only Mathematica so skewed by the effects of small groups of users. This may well be because of the differences in population size, though. We only partially sampled from StackOverflow and math, while we had the entire user-cohort for Mathematica.&lt;/p&gt;
&lt;p&gt;Let’s check out this hypothesis:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ListLinePlot[
  Normal@#[All, &amp;quot;reputation&amp;quot;] &amp;amp; /@
    &amp;lt;|

   &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
      &amp;quot;Math StackExchange&amp;quot; -&amp;gt; mathUsers,
      &amp;quot;StackOverflow&amp;quot; -&amp;gt; soUsers
      |&amp;gt;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-2953889655496443823" src="https://b3m2a1.github.io/img/post-10-2953889655496443823.png" /&gt;&lt;/p&gt;
&lt;p&gt;We notice that there’s a lot less skew in the other two communities, particularly StackOverflow. Let’s focus on it. Considering that we may still have sampling issues, let’s check out the highest-rep users of the site:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;TakeLargest[Normal@soUsers[All, &amp;quot;reputation&amp;quot;], 36] // 
 Newlineate[#, 4] &amp;amp;

(*Out:*)

{
  973816, 754771, 751311, 714950,
  710297, 689050, 671794, 599982,
  585842, 585344, 575101, 565940,
  553757, 548520, 536940, 528742,
  511144, 504964, 504356, 502389,
  500592, 494351, 493484, 477360,
  471503, 466358, 461402, 457448,
  450181, 449332, 445476, 444598,
  443842, 440660, 436769, 431215
  }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And by doing a visual comparison with this:  &lt;a href="https://stackoverflow.com/users?tab=Reputation&amp;amp;filter=all"&gt;https://stackoverflow.com/users?tab=Reputation&amp;amp;filter=all&lt;/a&gt; . We see that we have in fact hit the entire group. This suggests (but in no way proves) that our issue isn’t sampling after all, but rather something about the communities themselves.&lt;/p&gt;
&lt;p&gt;First off, StackOverflow is simply much larger than the Mathematica StackExchange. That alone decreases the effect of any high-reputation user. But another possibility is in how one gets reputation.&lt;/p&gt;
&lt;p&gt;The best way to get reputation is to answer questions that will be useful to many users, so naturally the more types of questions you can answer, the faster your reputation will grow. On the Mathematica site, there is only one core topic, so a given user can answer proportionately more types of questions than on the math of StackOverflow. But to confirm this we’ll again want to look at more sites.&lt;/p&gt;
&lt;h3&gt;Extended Cross-Site Comparison&lt;/h3&gt;
&lt;p&gt;We’ll add on chemistry, physics, server-fault (the sysadmin site), and software engineering. Since Mathematica is both programming language as well as computational tool, these sites may have similar populations. Finally we’ll also add on TeX because that’s got the same type of specific focus that Mathematica does.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;chemUsers = userCohort[&amp;quot;chemistry&amp;quot;];
physUsers = userCohort[&amp;quot;physics&amp;quot;];
servUsers = userCohort[&amp;quot;serverfault&amp;quot;];
sweUsers = userCohort[&amp;quot;softwareengineering&amp;quot;];
texUsers = userCohort[&amp;quot;tex&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And the histogram:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
  userAgeData /@
    &amp;lt;|

   &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
      &amp;quot;Math StackExchange&amp;quot; -&amp;gt; mathUsers,
      &amp;quot;Chemistry StackExchange&amp;quot; -&amp;gt; chemUsers,
      &amp;quot;Physics StackExchange&amp;quot; -&amp;gt; physUsers,
      &amp;quot;TeX StackExchange&amp;quot; -&amp;gt; texUsers,
      &amp;quot;ServerFault&amp;quot; -&amp;gt; servUsers,
      &amp;quot;Software Engineering StackExchange&amp;quot; -&amp;gt; sweUsers,
      &amp;quot;StackOverflow&amp;quot; -&amp;gt; soUsers
      |&amp;gt;,
  PlotRange -&amp;gt; {{10, 100}, All},
  GridLines -&amp;gt; {Range[10, 100, 5], None}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-5625797829707527904" src="https://b3m2a1.github.io/img/post-10-5625797829707527904.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now this is a bit cluttered, but we can see three distinct groups. Let’s isolate them (all with Mathematica as comparison). For each we’ll look at the weighted and unweighted forms:&lt;/p&gt;
&lt;p&gt;The first is the chemistry exchange. It skews  &lt;em&gt;&lt;em&gt;very&lt;/em&gt;&lt;/em&gt;  young. &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
  Join[
    userAgeData /@
      &amp;lt;|

    &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
        &amp;quot;Chemistry StackExchange&amp;quot; -&amp;gt; chemUsers
        |&amp;gt;,
    userAgeData[#, Identity] &amp;amp; /@
      &amp;lt;|

    &amp;quot;Weighted Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
        &amp;quot;Weighted Chemistry StackExchange&amp;quot; -&amp;gt; chemUsers
        |&amp;gt;
    ],
  PlotRange -&amp;gt; {{10, 100}, All},
  GridLines -&amp;gt; {Range[10, 100, 5], None},
  PlotStyle -&amp;gt; {Automatic, Automatic, Dashed, Dashed},
  PlotLabel -&amp;gt; &amp;quot;Mathematica and Chemistry&amp;quot;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-672723586657038879" src="https://b3m2a1.github.io/img/post-10-672723586657038879.png" /&gt;&lt;/p&gt;
&lt;p&gt;It looks to be as if it’s mostly undergrads, with a slight bump of grad students.  But if you look at the weighted version, rep tends to skew towards older (professor-aged) users. All-in-all that’s probably a good thing. &lt;/p&gt;
&lt;p&gt;Our second cohort is math, physics, and TeX.  Unfortunately having all of those at one is too messy, so we’ll do a collection of stacked plots:This group&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
     Join[
       userAgeData /@
         &amp;lt;|

       &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
           #
           |&amp;gt;,
       userAgeData[#, Identity] &amp;amp; /@
         &amp;lt;|

       &amp;quot;Weighted Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
           &amp;quot;Weighted &amp;quot; &amp;lt;&amp;gt; #[[1]] -&amp;gt; #[[2]]
           |&amp;gt;
       ],
     PlotRange -&amp;gt; {{10, 100}, All},
     GridLines -&amp;gt; {Range[10, 100, 5], None},
     PlotStyle -&amp;gt; {Automatic, Automatic, Dashed, Dashed},
     PlotLabel -&amp;gt; &amp;quot;Mathematica and &amp;quot; &amp;lt;&amp;gt; StringSplit[#[[1]]][[1]],
     ImageSize -&amp;gt; 365
     ] &amp;amp; /@ {
     &amp;quot;Math StackExchange&amp;quot; -&amp;gt; mathUsers,
     &amp;quot;Physics StackExchange&amp;quot; -&amp;gt; physUsers,
     &amp;quot;TeX StackExchange&amp;quot; -&amp;gt; texUsers
     } // Column

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-6607975221298532913" src="https://b3m2a1.github.io/img/post-10-6607975221298532913.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post-10-5912437618158765742" src="https://b3m2a1.github.io/img/post-10-5912437618158765742.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post-10-2634894817178644132" src="https://b3m2a1.github.io/img/post-10-2634894817178644132.png" /&gt;&lt;/p&gt;
&lt;p&gt;So we can note from this that these are in fact very similar communities age-wise (and there’s probably a good deal of user overlap, too). As far as rep-distribution goes, TeX seems to be a merger of physics and Mathematica. And the much strong peaking away from the unweighted distribution in the TeX and Mathematica communities does provide some confirmation for the specificity argument. Both are pretty specific sites, relative to, say, math or physics. And TeX itself is not a small community. It’s got ~115k users, which, while a third of the size of math, is still a bit larger than physics and ~3 or so times the size of the Mathematica community.&lt;/p&gt;
&lt;p&gt;One final cohort to look at is  ServerFault, Software Engineering, and StackOverflow:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;SmoothHistogram[
     Join[
       userAgeData /@
         &amp;lt;|

       &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
           #
           |&amp;gt;,
       userAgeData[#, Identity] &amp;amp; /@
         &amp;lt;|

       &amp;quot;Weighted Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
           &amp;quot;Weighted &amp;quot; &amp;lt;&amp;gt; #[[1]] -&amp;gt; #[[2]]
           |&amp;gt;
       ],
     PlotRange -&amp;gt; {{10, 100}, All},
     GridLines -&amp;gt; {Range[10, 100, 5], None},
     PlotStyle -&amp;gt; {Automatic, Automatic, Dashed, Dashed},
     PlotLabel -&amp;gt; &amp;quot;Mathematica and &amp;quot; &amp;lt;&amp;gt; StringSplit[#[[1]]][[1]],
     ImageSize -&amp;gt; 365
     ] &amp;amp; /@ {
     &amp;quot;SoftwareEngineering StackExchange&amp;quot; -&amp;gt; sweUsers,
     &amp;quot;ServerFault&amp;quot; -&amp;gt; servUsers,
     &amp;quot;StackOverflow&amp;quot; -&amp;gt; soUsers
     } // Column

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-7575966621498735722" src="https://b3m2a1.github.io/img/post-10-7575966621498735722.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post-10-4673039738110435178" src="https://b3m2a1.github.io/img/post-10-4673039738110435178.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="post-10-8222992891039283558" src="https://b3m2a1.github.io/img/post-10-8222992891039283558.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note how similar these are. And note how none of them have as-strong peaks away from the unweighted distribution as Mathematica. Rep on Software Engineering is rather more correlated with age (perhaps an effect of academia, perhaps an effect of older more senior profession programmers or academic computer scientists), but not that much. Now, one thing to consider is how much these actual populations overlap. Let’s measure this against StackOverflow for all of the communities considered:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;KeyValueMap[
    # -&amp;gt;
       Apply[Divide,
         Length /@
          {
            Intersection[
              Normal@soUsers[All, &amp;quot;account_id&amp;quot;],
              Normal@#2[All, &amp;quot;account_id&amp;quot;]
              ],
            #2
            }
         ] &amp;amp;,
    &amp;lt;|
      &amp;quot;Mathematica StackExchange&amp;quot; -&amp;gt; mseUsers,
      &amp;quot;Math StackExchange&amp;quot; -&amp;gt; mathUsers,
      &amp;quot;Chemistry StackExchange&amp;quot; -&amp;gt; chemUsers,
      &amp;quot;Physics StackExchange&amp;quot; -&amp;gt; physUsers,
      &amp;quot;TeX StackExchange&amp;quot; -&amp;gt; texUsers,
      &amp;quot;ServerFault&amp;quot; -&amp;gt; servUsers,
      &amp;quot;Software Engineering StackExchange&amp;quot; -&amp;gt; sweUsers
      |&amp;gt;
    ] // Association // Dataset

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-10-6020550821326793290" src="https://b3m2a1.github.io/img/post-10-6020550821326793290.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see that these two communities—ServerFault and SoftwareEngineering—share significantly more overlap with StackOverflow than do the rest, which makes their population overlap somewhat less surprising. &lt;/p&gt;
&lt;p&gt;On the other hand they and StackOverflow are all skewed away from the other communities considered population wise. If I had to guess why that is, I'd say we're seeing the difference between the professional world and academia. ServerFault, Software Engineering, and StackOverflow are likely more populated with professional programmers than are Mathematica, physics, math, and the others. Those communities are likely proportionately more student (mostly grad student, except for chemistry).&lt;/p&gt;
&lt;p&gt;An unsurprising hypothesis, perhaps, but one that does seem to be born out by the data.&lt;/p&gt;</content></entry><entry><title>Building a Mathematica Package Ecosystem, Part 2.</title><link href="https://b3m2a1.github.io/building-a-mathematica-package-ecosystem-part-2.html" rel="alternate"></link><published>2017-09-04T23:16:18-05:00</published><updated>2017-09-05T03:07:54-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-09-04:/building-a-mathematica-package-ecosystem-part-2.html</id><summary type="html">&lt;p&gt;So a few days ago I talked about building a package ecosystem in Mathematica by extending the built-in package manager. In that post I identified two things that ought to be extended to improve how packages are used in the Mathematica community: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The package manager needs to be more automated …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;So a few days ago I talked about building a package ecosystem in Mathematica by extending the built-in package manager. In that post I identified two things that ought to be extended to improve how packages are used in the Mathematica community: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The package manager needs to be more automated and paclet servers need to be clearer about what they have&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating and distributing documentation should be more convenient&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We had some tools to simplify the first one some. Now we’ll move on to the second.&lt;/p&gt;
&lt;p&gt;Let’s start off by acknowledging that Mathematica has a very nice documentation set-up. Every function has a documentation page with usage, details, and examples, related functions, and related guides. It’s pretty high-quality stuff. You can write your own using the  &lt;a href="https://www.wolfram.com/workbench/"&gt;Wolfram Workbench Eclipse plugin&lt;/a&gt;  that is the easy route. Or you could do what I did and rewrite a documentation generator from scratch. The former has many benefits in that it’s:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A lot less work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wolfram sanctioned&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Somewhat more likely to be maintained&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter has benefits in that it’s customizable and, unfortunately, possible to keep more up-to-date than the plugin, as Wolfram’s documentation format sometimes changes faster than they release plugin versions. But there’s also one benefit that perhaps isn’t as obvious: we can easily extend it to support automatic documentation generation. That last one will be key to simplifying the documentation process.&lt;/p&gt;
&lt;p&gt;&lt;a id="automatic-function-documentation" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Automatic Function Documentation&lt;/h2&gt;
&lt;p&gt;We’ll start by taking a look at what is required to build out decent documentation for a given function:&lt;/p&gt;
&lt;h3&gt;Extracting Usage Data&lt;/h3&gt;
&lt;p&gt;Our usage data will simply be the left-hand-side of the  &lt;code&gt;OwnValues&lt;/code&gt; ,  &lt;code&gt;DownValues&lt;/code&gt; ,  &lt;code&gt;SubValues&lt;/code&gt; , and  &lt;code&gt;UpValues&lt;/code&gt; . This is all easily accessible. Harder is to then convert this into something readable. The strategy will be all about reducing pattern complexity. There are a few things that will need to happen here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HoldPattern&lt;/code&gt;  expressions will need to be converted to their interior expressions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Pattern&lt;/code&gt; ,  &lt;code&gt;Optional&lt;/code&gt; ,  &lt;code&gt;PatternTest&lt;/code&gt; , and  &lt;code&gt;Condition&lt;/code&gt;  expressions will need to be converted to their left-hand-sides&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alternatives&lt;/code&gt;  should reduce to their first case&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Blank&lt;/code&gt; -type patterns should be replaced by their types&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function we’ll need for this will then basically be an extended  &lt;code&gt;ReplaceRepeated&lt;/code&gt;  that handles all these conditions and applies them to the  &lt;code&gt;*Values&lt;/code&gt;  functions. It’s not really worth posting the content of the function itself here, so I won’t.&lt;/p&gt;
&lt;h3&gt;Extracting Details Data&lt;/h3&gt;
&lt;p&gt;Our details data will essentially list scrape-able info for general convenience. We’ll want the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What types of usages a function has&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whether a function has  &lt;code&gt;FormatValues&lt;/code&gt;  or not&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What  &lt;code&gt;Options&lt;/code&gt;  it inherits from common functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What  &lt;code&gt;Options&lt;/code&gt;  it has that aren’t inherited&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What  &lt;code&gt;Messages&lt;/code&gt;  it supports&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only interesting thing here is how to determine what  &lt;code&gt;Options&lt;/code&gt;  are new to the function. But even this isn’t hard. We simply take a list of functions from which  &lt;code&gt;Options&lt;/code&gt;  are commonly inherited and just look at  &lt;code&gt;Options&lt;/code&gt;  names intersections one by one.&lt;/p&gt;
&lt;h3&gt;Configuring Examples&lt;/h3&gt;
&lt;p&gt;This is a more interesting problem and one that I haven’t yet fully figured out how to handle. Something that makes this tough is that we obviously generally can’t tell what a function will do before we test it, so passing it naive examples could have disastrous consequences. My answer to this was to provide a sample example for each distinct usage which would be left unevaluated. This means we have a new pattern-reduction problem on our hands. This time we’ll apply the following set of rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Untyped (i.e. without a  &lt;code&gt;Head&lt;/code&gt;  specified)  &lt;code&gt;Blank&lt;/code&gt;  patterns reduce to 0, 1 or 2 symbols, depending on the type of blank pattern&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Typed  &lt;code&gt;Blank&lt;/code&gt;  patterns reduce to 0, 1 or 2 objects of the  &lt;code&gt;Head&lt;/code&gt; , depending on the type of blank pattern&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PatternTest&lt;/code&gt;  generally reduces to the left-hand-side, except when a known type-test is on the right-hand-side, in which case it reduces to that type as many times as the left-hand side specifies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Pattern&lt;/code&gt;  reduces to its right-hand side unless its right-hand side is a  &lt;code&gt;Blank&lt;/code&gt; , in which case it becomes the pattern left-hand side as a symbol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Optional&lt;/code&gt;  becomes its optional value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Alternatives&lt;/code&gt;  becomes the first alternative&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that these rules could be extended yet further. They just provide a nice starting point.&lt;/p&gt;
&lt;h3&gt;Finding Similarly Named Functions&lt;/h3&gt;
&lt;p&gt;With all that in place we’ll lastly want to auto-determine what functions are similar to our function by name, taking advantage of the camel-casing that is the default in Mathematica. In general we can assume that a function that shares the first “camel-hump” with our function is related enough to note. On top of that we’ll want to only use functions that are in the same context, as functions in other contexts are not obviously related. &lt;/p&gt;
&lt;h3&gt;Sample Page&lt;/h3&gt;
&lt;p&gt;We’ll generate a page for the function that does this itself:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;GenerateSymbolPages@GenerateSymbolPages

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-9-1262940102178453808" src="https://b3m2a1.github.io/img/post-9-1262940102178453808.png" /&gt;&lt;/p&gt;
&lt;p&gt;The weakest point of all of this is the examples, but on the other hand it takes only a few seconds to generate that page (and only that because of inefficiencies in over-calling the front-end). That’s significant savings, particularly for someone like me who’s not sure what functions, if any, others will find useful.&lt;/p&gt;
&lt;p&gt;&lt;a id="automatic-context-documentation" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Automatic Context Documentation&lt;/h2&gt;
&lt;p&gt;Auto-generation becomes most useful when we consider using it to go beyond generating documentation for a single function to something like generating documentation for an entire package or context. For that I wrote a function  &lt;code&gt;GenerateDocumentation&lt;/code&gt; . It takes a lists of contexts and builds documentation for each that also links to the others. A good example of its utility something like this, where we build documentation for two complementary, undocumented packages:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;GenerateDocumentation[{
   &amp;quot;MQTTLink`&amp;quot;,
   &amp;quot;HTTPHandling`&amp;quot;
   }]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-9-2892288905153870383" src="https://b3m2a1.github.io/img/post-9-2892288905153870383.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="documentation-deployment" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Documentation Deployment&lt;/h2&gt;
&lt;p&gt;With documentation like this built, we’ll now want some way to make it accessible to others. Here we’ll use the fact that WRI distributes documentation in just such a fashion as HTML pages. We’ll use some of WRI’s tools to build the HTML directly and then distribute this.&lt;/p&gt;
&lt;h3&gt;Basic HTML Distribution&lt;/h3&gt;
&lt;p&gt;The tools WRI packages require significant correction to get in a useful working order, but I’ve done most of this work myself so that others don’t need to. I packaged it up in a function I called  &lt;code&gt;GenerateHTMLDocumentation&lt;/code&gt; . Since  &lt;code&gt;GenerateDocumentation&lt;/code&gt;  builds out documentation paclets, we can find these via  &lt;code&gt;PacletFind&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletFind[&amp;quot;HTTPHandling&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="post-9-3249245892677581363" src="https://b3m2a1.github.io/img/post-9-3249245892677581363.png" /&gt;&lt;/p&gt;
&lt;p&gt;We’ll note that one of these has version number 0. That’s the one we want. Version 0 is almost never going to be a release version, so it’s a pretty safe documentation paclet version.&lt;/p&gt;
&lt;p&gt;We can then build the HTML docs for a paclet like this and deploy them to the cloud at the same time:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;GenerateHTMLDocumentation[PacletFind[&amp;quot;HTTPHandling&amp;quot;][[2]],
   CloudDeploy -&amp;gt; True] // Replace[#, {c_, ___} :&amp;gt; c, 1] &amp;amp;

(*Out:*)

{CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/b3m2a1.docs/reference/\
HTTPHandling/guide/HTTPHandling.html&amp;quot;], CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/b3m2a1.docs/reference/\
HTTPHandling/ref/StartWebServer.html&amp;quot;], CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/b3m2a1.docs/reference/\
HTTPHandling/ref/WebServer.html&amp;quot;], CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/b3m2a1.docs/reference/\
HTTPHandling/ref/$MQTTBroker.html&amp;quot;], CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/b3m2a1.docs/reference/\
HTTPHandling/ref/$WebServers.html&amp;quot;]}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is all we need to get the most basic stuff up-and-running.&lt;/p&gt;
&lt;h3&gt;Building a Documentation Site&lt;/h3&gt;
&lt;p&gt;On the other hand we may find ourselves wanting more. We might want a general landing page where we can see  &lt;em&gt;&lt;em&gt;all&lt;/em&gt;&lt;/em&gt;  of our docs. For this, we’ll need to first build out a documentation overview. This process isn’t entirely set-in-stone, so most of the functionality remains in the package scope. But it can demonstrate at least  &lt;em&gt;&lt;em&gt;a&lt;/em&gt;&lt;/em&gt;  way to do this. Our basic idea will be to take a set of directories, extract what’s known about the documentation they have, and build a landing page for it. The basic call looks like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Export[
  FileNameJoin@{
     BTools`Private`$DocPacletsDirectory,
     &amp;quot;Documentation&amp;quot;,
     &amp;quot;English&amp;quot;,
     &amp;quot;Guides&amp;quot;,
     &amp;quot;DocumentationOverview.nb&amp;quot;
     },
  BTools`Private`Hidden`DocumentationMultiPackageOverviewNotebook[
    BTools`Private`$DocPacletsDirectory,
    Except@FileBaseName[BTools`Private`$DocPacletsDirectory]
    ]
  ]

(*Out:*)

&amp;quot;~/Library/Mathematica/ApplicationData/DocGen/DocPaclets/\
Documentation/English/Guides/DocumentationOverview.nb&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we can build and deploy this overview:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;GenerateHTMLDocumentation[
 BTools`Private`$DocPacletsDirectory,
 CloudDeploy -&amp;gt; True
 ]

(*Out:*)

{
CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/b3m2a1.docs/reference/guide/\
DocumentationOverview.html&amp;quot;]}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Finally, we’ll build a small wrapper site on top of all of this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DocumentationSiteBuild[&amp;quot;AutoDeploy&amp;quot; -&amp;gt; True];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It uses the same SiteBuilder framework as the paclet site, but the resources are different. Then we go to  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/main.html"&gt;its main page&lt;/a&gt;  and we can see why this is useful. It provides us with a way to display our doc pages with extra site info, particularly with links to our paclet site.&lt;/p&gt;
&lt;p&gt;Here is a screen shot of the site home:&lt;/p&gt;
&lt;p&gt;&lt;img alt="post-9-3823310612676356258" src="https://b3m2a1.github.io/img/post-9-3823310612676356258.png" /&gt;&lt;/p&gt;
&lt;p&gt;It is no more than an iframe on that landing page, but it provides a much nicer, more integrated framework. And hopefully all of this together—how automatic it is, how little burden it puts on the user—means we’ll start to see more, easier to use paclets and some development in the Mathematica paclet ecosystem&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>Building a Mathematica Package Ecosystem, Part 1.</title><link href="https://b3m2a1.github.io/building-a-mathematica-package-ecosystem-part-1.html" rel="alternate"></link><published>2017-08-29T02:53:34-05:00</published><updated>2017-09-05T03:21:25-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-08-29:/building-a-mathematica-package-ecosystem-part-1.html</id><summary type="html">&lt;p&gt;We’ll start off this post by trying to establish what we mean by a “Package Ecosystem”. The basic idea is a collection of frameworks that make package distribution and development easy and relatively seamless. Essentially, we’ll want something or a collection of somethings that don’t actually (explicitly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We’ll start off this post by trying to establish what we mean by a “Package Ecosystem”. The basic idea is a collection of frameworks that make package distribution and development easy and relatively seamless. Essentially, we’ll want something or a collection of somethings that don’t actually (explicitly) change the way we write our code, but more how we share it and link it to others’ code. And to make it as seamless as possible, we’ll want to be able to run everything via Mathematica.&lt;/p&gt;
&lt;p&gt;Before we start implementing away, we need to consider how useful it is to implement something like this for ourselves, given that there’s a platform out there already that covers the vast majority of what we’ll need:  &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt; . Let’s look at what it brings to the table so we can see where exactly it’s insufficient (or at least where we can build systems that complement it).&lt;/p&gt;
&lt;p&gt;GitHub gives us two major things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Easy sharing of source code &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A standard platform for hosting packages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, really, these cover most of the bases, with that last one being the most notable. The fact that GitHub is the de-facto standard for code distribution is probably the single best reason to put one’s code on it. People trust GitHub, and are used to using it, and so if you put your code in a GitHub repo and simply send people there they’ll generally know what to do.&lt;/p&gt;
&lt;p&gt;The major problem with using just GitHub, though, is that it’s not designed for scaling up. That is, you can put up your code, you can put up a Readme, you can even start to build out pages and sites, but at some point if you want to go bigger or customize more you start to hit the constraints of the (very nice and convenient) space GitHub has provided for you.&lt;/p&gt;
&lt;p&gt;A more minor problem, but still an important one, is that in general you’ll want to use Mathematica’s native package distribution system and it doesn’t work great with GitHub. Mathematica allows you to build out servers from which to distribute your packages, but GitHub, given the server configurations necessary.&lt;/p&gt;
&lt;p&gt;So we’ll approach ecosystem building from two directions. We’ll want easy distribution of our code in a packaged format (as we can easily just host the source on GitHub) and and convenient systems for documenting our code and distributing this documentation, as nothing serves as a better advertisement for code than good doc pages.&lt;/p&gt;
&lt;p&gt;For reasons of space and attention span, we’ll only handle the first part of that in this post and push documentation off to another.&lt;/p&gt;
&lt;p&gt;&lt;a id="package-distribution" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Package Distribution&lt;/h2&gt;
&lt;p&gt;Unfortunately, before we can discuss how we’re going to simplify package distribution, we’ll need to talk about paclets.&lt;/p&gt;
&lt;h3&gt;WTF is a “Paclet”?&lt;/h3&gt;
&lt;p&gt;A paclet is Mathematica’s package distribution format. It’s basically the source-code for a package, plus a metadata PacletInfo.m file. The source looks like a standard Mathematica application, e.g.:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Package
 Package.m
  + Kernel
    - init.m
  + FrontEnd
    + StyleSheets
      - ss1.nb
      ...
      + Palettes
      - palette1.nb 
      ...
    + Documentation
    + English
      + ReferencePages
        + Symbols
      + Guides
      + Tutorials&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;But now we have an extra PacletInfo.m file so it looks like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Package
 Package.m
 PacletInfo.m
  + Kernel
    - init.m
  etc.&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And this PacletInfo.m really just contains a single expression with the head  &lt;code&gt;Paclet&lt;/code&gt; . All you absolutely need is this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Paclet[
  Name -&amp;gt; &amp;quot;Package&amp;quot;,
  Version -&amp;gt; &amp;quot;nn.nn.nn&amp;quot;
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;But to build a nice distribution ecosystem it’s much better to have something like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Paclet[
  Name -&amp;gt; &amp;quot;Package&amp;quot;,
  Version -&amp;gt; &amp;quot;nn.nn.nn&amp;quot;,
  Description -&amp;gt; &amp;quot;A few lines of package description&amp;quot;,
  Creator -&amp;gt; &amp;quot;me@me.me&amp;quot;
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This file can also specify things about the package via an  &lt;code&gt;"Extensions"&lt;/code&gt;  argument, but we won’t deal with that here. We’ll restrict ourselves to this more basic information.&lt;/p&gt;
&lt;p&gt;Now for our use we’ll include a few fields that currently have no meaning in the paclet expression, but which will be useful for us. Our expression will end up looking like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Paclet[
  Name -&amp;gt; &amp;quot;Package&amp;quot;,
  Version -&amp;gt; &amp;quot;nn.nn.nn&amp;quot;,
  Description -&amp;gt; &amp;quot;A few lines of package description&amp;quot;,
  Creator -&amp;gt; &amp;quot;me@me.me&amp;quot;,
  Tags -&amp;gt; {&amp;quot;a&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;of&amp;quot;, &amp;quot;tags&amp;quot;},
  Categories -&amp;gt; {&amp;quot;a&amp;quot;, &amp;quot;list&amp;quot;, &amp;quot;of&amp;quot;, &amp;quot;categories&amp;quot;}
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This expression then gets exported to PacletInfo.m and the whole package is compressed to a .paclet file. This is the file format we’ll work with.&lt;/p&gt;
&lt;h3&gt;Paclet Servers&lt;/h3&gt;
&lt;p&gt;The paclet file format is a distribution format and so Mathematica also provides tools for managing these distributions. The basic use case is to call  &lt;code&gt;PacletInstall&lt;/code&gt;  on one of these paclet files, this works as such:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall@&amp;quot;path/to/paclet&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;or&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall@&amp;quot;http://url/of/paclet&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;depending on whether one has downloaded the paclet or not. And this can be reversed by calling  &lt;code&gt;PacletUninstall&lt;/code&gt;  on the paclet name or paclet name and version.&lt;/p&gt;
&lt;p&gt;There’s another usage though, which involves what’s known as a paclet server (or paclet site). This is how Wolfram Research distributes its packages and addons. We can find the Wolfram paclet server as follows:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$PacletSite

(*Out:*)

&amp;quot;http://pacletserver.wolfram.com&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Actually, that’s not quite what the real server site is. We can figure out how to find the real server site by looking at the source code for the manager. In it we find this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;StringReplace[$PacletSite, 
  &amp;quot;pacletserver&amp;quot; -&amp;gt; (
     &amp;quot;pacletserver&amp;quot; &amp;lt;&amp;gt; 
    PacletManager`Services`Private`$wriPacletServerIndex
     )]

(*Out:*)

&amp;quot;http://pacletserver4.wolfram.com&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Per the comments in the source that 4 is just something that WRI puts in place for performance reasons. It’s randomly chosen between 1 and 6 and seems to define a mirror server. In any case, we can find what’s living on that server by looking at the paclet server version of a sitemap, which is a file called PacletSite.mz&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Import[
  URLRead@
   HTTPRequest[
      StringReplace[$PacletSite, 
         &amp;quot;pacletserver&amp;quot; -&amp;gt; (

        &amp;quot;pacletserver&amp;quot; &amp;lt;&amp;gt; 
         PacletManager`Services`Private`$wriPacletServerIndex
            )] &amp;lt;&amp;gt; &amp;quot;/PacletSite.mz&amp;quot;,
    &amp;lt;|
     &amp;quot;UserAgent&amp;quot; -&amp;gt; PacletManager`Package`$userAgent,
       &amp;quot;Headers&amp;quot; -&amp;gt; {
          &amp;quot;Mathematica-systemID&amp;quot; -&amp;gt; $SystemID, 
       &amp;quot;Mathematica-license&amp;quot; -&amp;gt; ToString[$LicenseID],
          &amp;quot;Mathematica-mathID&amp;quot; -&amp;gt; ToString[$MachineID], 
       &amp;quot;Mathematica-language&amp;quot; -&amp;gt; ToString[$Language],
          &amp;quot;Mathematica-activationKey&amp;quot; -&amp;gt; ToString[$ActivationKey]}
     |&amp;gt;
    ],
  {&amp;quot;ZIP&amp;quot;, &amp;quot;PacletSite.m&amp;quot;}
  ] // Take[#, 5] &amp;amp;

(*Out:*)

PacletSite[PacletManager`Paclet[
 &amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;Alexa&amp;quot;, &amp;quot;Version&amp;quot; -&amp;gt; &amp;quot;1.0.0&amp;quot;, 
  &amp;quot;MathematicaVersion&amp;quot; -&amp;gt; &amp;quot;10+&amp;quot;, 
  &amp;quot;Description&amp;quot; -&amp;gt; &amp;quot;Easily create Alexa skills for the Amazon Echo \
and other devices that support Alexa Voice Services.&amp;quot;, 
  &amp;quot;Creator&amp;quot; -&amp;gt; &amp;quot;Todd Gayley&amp;quot;, 
  &amp;quot;Extensions&amp;quot; -&amp;gt; {{
    &amp;quot;Kernel&amp;quot;, &amp;quot;Root&amp;quot; -&amp;gt; &amp;quot;Kernel&amp;quot;, &amp;quot;Context&amp;quot; -&amp;gt; &amp;quot;Alexa`&amp;quot;}, {
    &amp;quot;Documentation&amp;quot;, &amp;quot;Language&amp;quot; -&amp;gt; &amp;quot;English&amp;quot;, 
     &amp;quot;MainPage&amp;quot; -&amp;gt; &amp;quot;Alexa/guide/AlexaSkills&amp;quot;}, {
    &amp;quot;LibraryLink&amp;quot;}}], PacletManager`Paclet[
 &amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;ARDrone&amp;quot;, &amp;quot;Version&amp;quot; -&amp;gt; &amp;quot;0.3.1&amp;quot;, 
  &amp;quot;Extensions&amp;quot; -&amp;gt; {{
    &amp;quot;Kernel&amp;quot;, &amp;quot;Root&amp;quot; -&amp;gt; &amp;quot;Kernel&amp;quot;, &amp;quot;Context&amp;quot; -&amp;gt; &amp;quot;ARDrone`&amp;quot;}, {
    &amp;quot;Documentation&amp;quot;, &amp;quot;MainPage&amp;quot; -&amp;gt; &amp;quot;Tutorials/ARDroneTutorial&amp;quot;}, {
    &amp;quot;LibraryLink&amp;quot;}}], PacletManager`Paclet[
 &amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;AstronomicalData_AdditionalExoplanetHostStars&amp;quot;, 
  &amp;quot;Version&amp;quot; -&amp;gt; &amp;quot;9.0.15&amp;quot;, &amp;quot;MathematicaVersion&amp;quot; -&amp;gt; &amp;quot;9.0+&amp;quot;, 
  &amp;quot;BackwardCompatible&amp;quot; -&amp;gt; &amp;quot;*&amp;quot;, 
  &amp;quot;Extensions&amp;quot; -&amp;gt; {{
    &amp;quot;Resource&amp;quot;, &amp;quot;Root&amp;quot; -&amp;gt; &amp;quot;Data&amp;quot;}}], PacletManager`Paclet[
 &amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;AstronomicalData_Comets1&amp;quot;, &amp;quot;Version&amp;quot; -&amp;gt; &amp;quot;7.0.17&amp;quot;, 
  &amp;quot;MathematicaVersion&amp;quot; -&amp;gt; &amp;quot;7.0+&amp;quot;, &amp;quot;BackwardCompatible&amp;quot; -&amp;gt; &amp;quot;*&amp;quot;, 
  &amp;quot;Extensions&amp;quot; -&amp;gt; {{
    &amp;quot;Resource&amp;quot;, &amp;quot;Root&amp;quot; -&amp;gt; &amp;quot;Data&amp;quot;}}], PacletManager`Paclet[
 &amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;AstronomicalData_Comets1&amp;quot;, &amp;quot;Version&amp;quot; -&amp;gt; &amp;quot;8.0.9&amp;quot;, 
  &amp;quot;MathematicaVersion&amp;quot; -&amp;gt; &amp;quot;8.0+&amp;quot;, &amp;quot;BackwardCompatible&amp;quot; -&amp;gt; &amp;quot;*&amp;quot;, 
  &amp;quot;Extensions&amp;quot; -&amp;gt; {{&amp;quot;Resource&amp;quot;, &amp;quot;Root&amp;quot; -&amp;gt; &amp;quot;Data&amp;quot;}}]]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we see this is just an expression  &lt;code&gt;PacletSite&lt;/code&gt;  which contains a bunch of those  &lt;code&gt;Paclet&lt;/code&gt;  metadata files. And each of these metadata files points to a .paclet file on the server, hosted at server.url/Paclets/name-version.paclet. Finally, we can then install and update paclets from one of such a server by name one of two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set the server as a site and call  &lt;code&gt;PacletInstall&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pass the site as the  &lt;code&gt;"Site"&lt;/code&gt;  option to  &lt;code&gt;PacletInstall&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either way works, although having previously added the site can be faster as Mathematica will store that data from the PacletSite.mz file.&lt;/p&gt;
&lt;p&gt;In any case, since Wolfram’s paclet server is already set as a known site let’s just quickly look at how this works:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall[&amp;quot;Alexa&amp;quot;]

(*Out:*)

PacletManager`Paclet[
&amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;Alexa&amp;quot;, &amp;quot;Version&amp;quot; -&amp;gt; &amp;quot;1.0.0&amp;quot;, 
 &amp;quot;MathematicaVersion&amp;quot; -&amp;gt; &amp;quot;10+&amp;quot;, 
 &amp;quot;Description&amp;quot; -&amp;gt; &amp;quot;Easily create Alexa skills for the Amazon Echo and \
other devices that support Alexa Voice Services.&amp;quot;, 
 &amp;quot;Creator&amp;quot; -&amp;gt; &amp;quot;Todd Gayley&amp;quot;, 
 &amp;quot;Extensions&amp;quot; -&amp;gt; {{
   &amp;quot;Kernel&amp;quot;, &amp;quot;Root&amp;quot; -&amp;gt; &amp;quot;Kernel&amp;quot;, &amp;quot;Context&amp;quot; -&amp;gt; &amp;quot;Alexa`&amp;quot;}, {
   &amp;quot;Documentation&amp;quot;, &amp;quot;Language&amp;quot; -&amp;gt; &amp;quot;English&amp;quot;, 
    &amp;quot;MainPage&amp;quot; -&amp;gt; &amp;quot;Alexa/guide/AlexaSkills&amp;quot;}, {&amp;quot;LibraryLink&amp;quot;}}, 
 &amp;quot;Location&amp;quot; -&amp;gt; &amp;quot;~/Library/Mathematica/Paclets/Repository/Alexa-1.0.0&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Making an Extended Paclet Server&lt;/h3&gt;
&lt;p&gt;Happily, this handles most of the distribution side of things, as we can easily pack up and ship out our packages via a server. The issue is that it’s not all that easy for people to figure out what’s on a paclet server and therefore even though we have a nice, easy-to-use, installation process, our packages aren’t really any more mobile than before.&lt;/p&gt;
&lt;p&gt;But recall that we have that  &lt;code&gt;PacletSite&lt;/code&gt;  expression that tells us everything that’s on the server to be distributed. Moreover it gives us all of that metadata. So why not use all of this information to build a nicer way to show people what’s on a server?&lt;/p&gt;
&lt;p&gt;There are two approaches to this that I’ve thought of and liked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a GUI to be run within Mathematica that provides, for every paclet in the  &lt;code&gt;PacletSite&lt;/code&gt; :  a) The paclet metadata b) Whether it has been installed already c) Whether an update is available d) Install and uninstall buttons&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a static site for a paclet server that provides shingles for each package&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both are good options, I think, and honestly they are complementary. At this point in time though, I have only implemented the latter, as I think it gets us further.&lt;/p&gt;
&lt;p&gt;My approach to this was to use a Mathematica implementation of the  &lt;a href="https://blog.getpelican.com/"&gt;pelican site generator&lt;/a&gt;  for python. Building this may get its own post some day, but here’s  &lt;a href="https://github.com/b3m2a1/mathematica-SiteBuilder"&gt;a link to the source&lt;/a&gt; . The basic idea is that we write static content in markdown which get converted to HTML, passed through templates, and aggregated by tags, categories, etc.&lt;/p&gt;
&lt;p&gt;It is for this reason that we’re adding the  &lt;code&gt;Tags&lt;/code&gt;  and  &lt;code&gt;Categories&lt;/code&gt;  fields to our  &lt;code&gt;Paclet&lt;/code&gt;  expressions. Each paclet will get a page that lists its information from the  &lt;code&gt;Paclet&lt;/code&gt;  expression as well as a link to download the paclet (the address from which can of course also simply be copied and fed into  &lt;code&gt;PacletInstall&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;Happily, since I had already written a notebook to markdown converter for building this site, I could simply export the information to a notebook expression, which is more extensible that going straight to markdown.&lt;/p&gt;
&lt;p&gt;There are particulars about building servers that will be discussed later, but first let’s just look at one of these sites in action.  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/PacletServer/main.html"&gt;This&lt;/a&gt;  is my personal paclet server. It serves up all of the paclets I make and so is obviously my guinea-pig server for building such a site. We’ll note a few things about the site that make it useful for getting paclets off of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has a landing site that lays out everything that’s on the site:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="building-a-mathematica-package-ecosystem-part-1-8752386334307355490" src="https://b3m2a1.github.io/img/building-a-mathematica-package-ecosystem-part-1-8752386334307355490.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each paclet in turn has a page laying out the info on the paclet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="building-a-mathematica-package-ecosystem-part-1-6837272127839565584" src="https://b3m2a1.github.io/img/building-a-mathematica-package-ecosystem-part-1-6837272127839565584.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There’re aggregation pages for things like authors, categories, and tags:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="building-a-mathematica-package-ecosystem-part-1-1410395217613385545" src="https://b3m2a1.github.io/img/building-a-mathematica-package-ecosystem-part-1-1410395217613385545.png" /&gt;&lt;/p&gt;
&lt;p&gt;These make clicking through and figuring out what’s there easier and, of course, the release pages for each paclet can be tweaked and customized and pages detailing more of what’s on the server can be added, etc. &lt;/p&gt;
&lt;p&gt;Now, back to how we build our server. We’ll assume we have a a paclet named  &lt;code&gt;"MyPack"&lt;/code&gt;  that’s discoverable as a .paclet file or a directory via  &lt;code&gt;PacletFind&lt;/code&gt; . I’ve built out a function called  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/BTools/ref/PacletUpload.html"&gt;&lt;code&gt;PacletUpload&lt;/code&gt;&lt;/a&gt;  that packs a paclet and pushes it to a server. Generally this server is in the cloud, which is useful quick sharing, but makes it hard to build a good paclet server off of. Conveniently, though, a paclet server can be local and served via the  &lt;a href="https://en.wikipedia.org/wiki/File_URI_scheme"&gt;file:// protocol&lt;/a&gt;  and so I had previously extended  &lt;code&gt;PacletUpload&lt;/code&gt;  to work with local uploads. We will make good use of that here.&lt;/p&gt;
&lt;p&gt;We’ll stick our server here:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;FileNameJoin@{$UserBaseDirectory, &amp;quot;ApplicationData&amp;quot;, &amp;quot;WebSites&amp;quot;, 
  &amp;quot;PacletServer&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The decision to put it in ApplicationData/WebSites is pretty much arbitrary (and other locations may be used) but it’ll do for now.&lt;/p&gt;
&lt;p&gt;So with that in mind we now need to get our paclets onto our server. For that I wrote a function,  &lt;code&gt;PacletServerAdd&lt;/code&gt; , that is really just a wrapper to  &lt;code&gt;PacletUpload&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Options[PacletServerAdd] =
   Options@PacletUpload;
PacletServerAdd[
    pacletSpecs : $PacletUploadPatterns,
    ops : OptionsPattern[]
    ] :=
   PacletUpload[pacletSpecs,
     ops,
     Sequence @@
       FilterRules[
         Normal@$PacletServer,
         Options@PacletUpload
         ],
     &amp;quot;UseCachedPaclets&amp;quot; -&amp;gt; False,
     &amp;quot;UploadSiteFile&amp;quot; -&amp;gt; True
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;(note that  &lt;code&gt;PacletUpload&lt;/code&gt;  is a something of a behemoth of a function and so is unsuitable to put here)&lt;/p&gt;
&lt;p&gt;This just tosses the paclet onto our server:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletServerAdd[&amp;quot;SiteBuilder&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And the we’ll have a function  &lt;code&gt;PacletServerBuild&lt;/code&gt;  that will take those markdown files (from the markdown notebooks we built for each paclet), send them through a the  &lt;code&gt;WebSiteBuild&lt;/code&gt;  function that process pages in a static website, and return a site in an output directory almost ready to be deployed:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletServerBuild[]

(*Out:*)

&amp;quot;~/Library/Mathematica/ApplicationData/WebSites/PacletServer/output&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then our actual deployment will simply copy the Paclets directory and PacletSite.mz file into this directory and copy it all to the cloud with  &lt;code&gt;WebSiteDeploy&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Take[PacletServerDeploy[], 3]
(*Returns all of the cloud objects it makes, so we'll just take three \
of them*)

(*Out:*)

{CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/user-e4d1d43a-267f-4924-934a-\
2ba2321519a9/PacletServer/authors/b3m2a1.html&amp;quot;], CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/user-e4d1d43a-267f-4924-934a-\
2ba2321519a9/PacletServer/authors.html&amp;quot;], CloudObject[
 &amp;quot;https://www.wolframcloud.com/objects/user-e4d1d43a-267f-4924-934a-\
2ba2321519a9/PacletServer/btools.html&amp;quot;]}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And now our server is ready for other people to use&lt;/p&gt;
&lt;p&gt;&lt;a id="moving-forward" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Moving Forward&lt;/h2&gt;
&lt;p&gt;Now that we have a good distribution format and a good way to publicize these distributions, we can move to the issue of popularizing such a format. The core difficulty here is, of course, that aggregating all of this information is a step that many people may not feel worth their time.&lt;/p&gt;
&lt;p&gt;We can, however, make this more palatable to people by providing functionality that makes all of this easier, as decreasing barriers to development can only help get good packages and content out there in the long term. This will focus on simplifying the application building process in Mathematica. But unfortunately it will have to wait for another post.&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>A Fake Object Framework</title><link href="https://b3m2a1.github.io/a-fake-object-framework.html" rel="alternate"></link><published>2017-08-04T17:57:46-05:00</published><updated>2017-08-06T00:58:47-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-08-04:/a-fake-object-framework.html</id><summary type="html">&lt;p&gt;I promised in my post on  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/-pretend-chemistry-and-fake-objects.html"&gt;chemistry and objects&lt;/a&gt;  that I’d walk through the details of building an object framework in Mathematica so here we are. For those who would like to follow along,  &lt;a href="https://github.com/b3m2a1/mathematica-ObjectFramework/blob/master/Packages/ObjectFramework.m"&gt;here&lt;/a&gt;  is the package that implements this framework.&lt;/p&gt;
&lt;p&gt;Just as a quick refresher, there were …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I promised in my post on  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/-pretend-chemistry-and-fake-objects.html"&gt;chemistry and objects&lt;/a&gt;  that I’d walk through the details of building an object framework in Mathematica so here we are. For those who would like to follow along,  &lt;a href="https://github.com/b3m2a1/mathematica-ObjectFramework/blob/master/Packages/ObjectFramework.m"&gt;here&lt;/a&gt;  is the package that implements this framework.&lt;/p&gt;
&lt;p&gt;Just as a quick refresher, there were a few properties that we decided we’d use in our framework. These were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Objects are glorified hash-maps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objects have types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods get bound to objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are properties which are bound methods that evaluate when accessed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything important is vectorized (i.e. can be done over vectors)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll start with the first of those.&lt;/p&gt;
&lt;p&gt;&lt;a id="building-an-object" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Building an Object&lt;/h2&gt;
&lt;h3&gt;Objects as Hash Maps&lt;/h3&gt;
&lt;p&gt;A  &lt;a href="https://en.wikipedia.org/wiki/Hash_table"&gt;hash-map&lt;/a&gt;  is a data structure that provides very efficient look-up and insertion. Both of these will be crucial for us. Mathematica’s top-level version of as hash-map is called an  &lt;a href="https://reference.wolfram.com/language/ref/Association.html"&gt;&lt;code&gt;Association&lt;/code&gt;&lt;/a&gt; . So we’ll simply store all object data in one of these. With that in mind, we could then go one of three routes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Each object stores its data in a symbol it holds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All object data is stored in a single symbol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each object stores its data in a symbol and there’s a central store for all these symbols&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For reasons of convenience we will choose the second. If there will be massive amounts of object data store the last may be the best, performance wise, but provides somewhat more involved property setting. The first makes it hard to know what exactly is an object. Both the first and last similarly make restoring state somewhat more challenging.&lt;/p&gt;
&lt;p&gt;So we’ll initialize an  &lt;code&gt;Association&lt;/code&gt;  for storing all of our data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$OFObjectTable = &amp;lt;|

   &amp;quot;Types&amp;quot; -&amp;gt; &amp;lt;|
        &amp;quot;Object&amp;quot; -&amp;gt; &amp;lt;||&amp;gt;
        |&amp;gt;,
     &amp;quot;Objects&amp;quot; -&amp;gt; &amp;lt;||&amp;gt;
     |&amp;gt;;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Note that we have two sub-maps, one for basic type data, one for object data. This leads us to the second point on that list, “Objects have types”. But before we even get there, we’ll need to look at how we define our objects.&lt;/p&gt;
&lt;h3&gt;Object Creation&lt;/h3&gt;
&lt;p&gt;Now that we know how we’ll store our objects, the question is how should we build a new one. Since we’re working with an  &lt;code&gt;Association&lt;/code&gt;  we need some a way to define a unique key for each object. There are a few possible routes here, but the one I’ve found to be easiest works through  &lt;a href="https://reference.wolfram.com/language/ref/CreateUUID.html"&gt;&lt;code&gt;CreateUUID&lt;/code&gt;&lt;/a&gt;  for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It's essentially assured to be universally unique, which makes storage and recall easy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The keys are strings, so assured to be without side effects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can attach little meta-tags to the front of the key to give us a hint of what we’re working with&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For our object definitions we’ll take an  &lt;code&gt;Association&lt;/code&gt;  of properties as the core data, where we extract the type from the  &lt;code&gt;"ObjectType"&lt;/code&gt;  field passed. Since it’s vectorized we’ll write it with a  &lt;code&gt;List&lt;/code&gt;  of  &lt;code&gt;Association&lt;/code&gt;  objects in mind:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Options[OFNewObject] =
   {
     &amp;quot;Initialize&amp;quot; -&amp;gt; True,
     &amp;quot;UUIDMethod&amp;quot; -&amp;gt; (CreateUUID[# &amp;lt;&amp;gt; &amp;quot;-&amp;quot;] &amp;amp;)
     };
OFNewObject[objs : {__Association}, ops : OptionsPattern[]] :=

  Catch@
    Module[{
       types = Lookup[objs, &amp;quot;ObjectType&amp;quot;, &amp;quot;Object&amp;quot;],
       args = Lookup[objs, &amp;quot;ObjectInitializationArguments&amp;quot;, {}],
       uuids,
       objlist
       },
      If[! AllTrue[types, StringQ], 
     Message[OFNewObject::types, types]; Throw[$Failed]];
      uuids =
        MapIndexed[
          OptionValue[&amp;quot;UUIDMethod&amp;quot;],
          types
          ];
      If[! AllTrue[uuids, StringQ], 
     Message[OFNewObject::uuids, uuids]; Throw[$Failed]];
      objlist = OFObject /@ uuids;
      AssociateTo[$OFObjectTable[&amp;quot;Objects&amp;quot;],
        MapThread[
          #3 -&amp;gt;
             Join[
               #,
               &amp;lt;|
                 &amp;quot;ObjectType&amp;quot; -&amp;gt; #2,
                 &amp;quot;ObjectID&amp;quot; -&amp;gt; #3
                 |&amp;gt;
               ] &amp;amp;,
          {
            KeyDrop[objs, &amp;quot;ObjectInitializationArguments&amp;quot;],
            types,
            uuids
            }]
        ];
      If[OptionValue[&amp;quot;Initialize&amp;quot;],
        MapThread[
          Function[# @@ #2],
          {
            OFLookup[objlist, &amp;quot;ObjectInitialization&amp;quot;, Identity],
            args
            }]
        ];
      objlist
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;What this does is determines the type for each object, creates a new UUID for each, sticks  &lt;code&gt;UUID -&amp;gt; Association&lt;/code&gt;  pairs into the  &lt;code&gt;$OFObjectTable&lt;/code&gt;  and then calls an  &lt;code&gt;"ObjectInitialization"&lt;/code&gt;  function on each with some collection of passed arguments, assuming it’s been defined. Then it wraps all the new UUIDs in an  &lt;code&gt;OFObject&lt;/code&gt;  head and spits them back out.&lt;/p&gt;
&lt;p&gt;One thing to notice is that this is actually already boot-strapping. We call the standard object framework lookup function,  &lt;code&gt;OFLookup&lt;/code&gt; , in the definition process.&lt;/p&gt;
&lt;p&gt;Then, since making new objects like this is a little bit unwieldy to use, we’ll put some syntactic sugar on it:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFNewObject[a : {((_String -&amp;gt; _Association) | _String) ..}] :=

  OFNewObject@
     Map[
       If[Length[#] == 2,
          Append[#[[2]], &amp;quot;ObjectType&amp;quot; -&amp;gt; #[[1]]],
          &amp;lt;|&amp;quot;ObjectType&amp;quot; -&amp;gt; #|&amp;gt;
          ] &amp;amp;,
       a];
OFNewObject[
   a : _Association | _String | (_String -&amp;gt; _Association)] :=

  First@OFNewObject[{a}];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;These two make creating new objects just a little bit nicer. &lt;/p&gt;
&lt;p&gt;Even the vectorized form is a little bit slow:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;RepeatedTiming[
  objs = OFNewObject[ConstantArray[&amp;quot;Object&amp;quot;, 100000]];] // First

(*Out:*)

2.55&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;But that’s largely unavoidable. It can be sped up somewhat by providing precomputed UUIDs:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;With[{uuids = ToString /@ Range[100000]},
  RepeatedTiming[
     objs =
        OFNewObject[ConstantArray[&amp;quot;Object&amp;quot;, 100000],
          &amp;quot;UUIDMethod&amp;quot; -&amp;gt; (uuids[[First@#2]] &amp;amp;)
          ];] // First
  ]

(*Out:*)

1.82&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Or by specifying no initialization should happen:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;RepeatedTiming[
   objs =
      OFNewObject[ConstantArray[&amp;quot;Object&amp;quot;, 100000],
        &amp;quot;Initialize&amp;quot; -&amp;gt; False
        ];] // First

(*Out:*)

1.97&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;But beyond that there’s not much one can do.&lt;/p&gt;
&lt;h3&gt;Object Types, Part 1&lt;/h3&gt;
&lt;p&gt;In our setup, types serve as meta objects, from which instances inherit property and are spawned. We’ll implement a single-inheritance scheme, since I’m lazy. Our types will live in the  &lt;code&gt;"Types"&lt;/code&gt;  sub- &lt;code&gt;Association&lt;/code&gt;  of our  &lt;code&gt;$OFObjectTable&lt;/code&gt; . They will function almost exactly like objects, though.&lt;/p&gt;
&lt;p&gt;We’ll get into a larger discussion about them later&lt;/p&gt;
&lt;p&gt;&lt;a id="object-basics" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Object Basics&lt;/h2&gt;
&lt;h3&gt;Property Lookup&lt;/h3&gt;
&lt;p&gt;This is the heart of the project, from which everything else will derive. Our lookup will be implemented in a vectorized manner, layered on  &lt;a href="https://reference.wolfram.com/language/ref/Lookup.html"&gt;&lt;code&gt;Lookup&lt;/code&gt;&lt;/a&gt; . Our base case will just be looking up a raw object  &lt;code&gt;Association&lt;/code&gt; . But first, since we noted our types will work like objects, we need a nice way to do lookups on either. The way we’ll do that is through a variable  &lt;code&gt;$OFLookupGroup&lt;/code&gt;  which will be  &lt;code&gt;"Objects"&lt;/code&gt;  or  &lt;code&gt;"Types"&lt;/code&gt; . Now for the raw data lookup:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFLookup[k_String | OFObject[k_String]] :=

  Lookup[$OFObjectTable[$OFLookupGroup], k];
OFLookup[k : {__String}] :=

  Lookup[$OFObjectTable[$OFLookupGroup], k];
OFLookup[k : {__OFObject}] :=

  Lookup[$OFObjectTable[$OFLookupGroup], First /@ k];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;That’s trivial, of course, so we move on to a property lookup:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFLookup[
    keys : {__String}, p_,
    default_: Missing[&amp;quot;KeyAbsent&amp;quot;]] :=
   MapThread[
     OFPostLookup,
     {
       OFRecursiveLookup[
         Lookup[$OFObjectTable[$OFLookupGroup], keys],
         p,
         default
         ],
       keys
       }
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Note that the heart of this is really missing. We need the following two functions to truly know what’s up. One for vectorized recursive lookups:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFRecursiveLookup[
    objs : {__Association},
    keys_,
    default_: $OFMissingKeyAbsent
    ] :=
   Module[{
      missingKey = Unique[$OFMissingKeyAbsent],
      types =
        Lookup[objs, &amp;quot;ObjectType&amp;quot;, &amp;quot;Object&amp;quot;],
      typeroot = Lookup[$OFObjectTable[&amp;quot;Types&amp;quot;], &amp;quot;Object&amp;quot;, &amp;lt;||&amp;gt;]
      },
     types =
       Lookup[$OFObjectTable[&amp;quot;Types&amp;quot;], types, typeroot];
     If[default === $OFMissingKeyAbsent,
        Map[
          If[ListQ@keys,
             MapThread[
               If[# === missingKey,
                  Missing[&amp;quot;KeyAbsent&amp;quot;, #2],
                  #
                  ] &amp;amp;,
               {
                 #,
                 keys
                 }
               ],
             If[# === missingKey,
               Missing[&amp;quot;KeyAbsent&amp;quot;, keys],
               #
               ]
             ] &amp;amp;
          ],
        Identity
        ]@
       Replace[
         OFrecursiveLookupStep[objs, types, keys, default, missingKey,
       typeroot],
         missingKey -&amp;gt; default,
         {2}
         ]
     ];
(*Recursive lookup step*)
OFrecursiveLookupStep[
    objs_,
    types_,
    keys_,
    default_,
    missing_,
    typeroot_
    ] :=
   Module[{
      props = Lookup[objs, keys, missing],
      missingpos,
      objnew,
      typenew
      },
     missingpos = First /@ Position[props, missing, {1}];
     objnew = DeleteCases[types[[missingpos]], typeroot];
     If[Length@objnew == 0,
       props,
       typenew =
         Lookup[
           $OFObjectTable[&amp;quot;Types&amp;quot;],
           Lookup[objnew, &amp;quot;ObjectType&amp;quot;, &amp;quot;Object&amp;quot;],
           typeroot
           ];
       ReplacePart[props,
         Thread[

      missingpos -&amp;gt;

       OFrecursiveLookupStep[objnew, typenew, keys, default, missing, 
        typeroot]
           ]
         ]
       ]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And one for post-processing our lookups:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFPostLookup[e_OFMethod, id_] :=
   If[$OFPrepMethods // TrueQ,
     OFPrepMethod[e, id],
     e
     ];
OFPostLookup[l : _List, id_] :=
   OFPostLookup[#, id] &amp;amp; /@ l;
OFPostLookup[e : Except[_OFMethod | _List], id_] :=
   e;
(*Method binding*)

OFPrepMethod[OFMethod[f_, a_Association], id_String] :=
   With[{
      atts = Lookup[a, &amp;quot;Attributes&amp;quot;, {HoldAllComplete}],
      autoEval = Lookup[a, &amp;quot;Evaluate&amp;quot;, False],
      obj =
        Replace[
          Lookup[a, &amp;quot;PassFirst&amp;quot;, OFObject@id], {
            OFType | &amp;quot;ObjectType&amp;quot; :&amp;gt;
              OFType@Lookup[id, &amp;quot;ObjectType&amp;quot;, &amp;quot;Object&amp;quot;],
            None :&amp;gt;
              Sequence[]
           }]},
     If[autoEval,
       f[obj],
       Function[Null, f[obj, ##], atts]
       ]
     ];
OFPrepMethod[OFMethod[f_], id_String] :=
   With[{obj = OFObject@id},
     Function[Null, f[obj, ##], HoldAllComplete]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Where that  &lt;code&gt;OFPrepMethod&lt;/code&gt;  is a function that will bind an  &lt;code&gt;OFMethod&lt;/code&gt;  to an object instance via a pure  &lt;code&gt;Function&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we see where that  &lt;code&gt;"ObjectType"&lt;/code&gt;  comes in.  &lt;code&gt;OFRecursiveLookup&lt;/code&gt;  will recurse through an object’s ancestors until it hits no more ancestors or it hits the property.&lt;/p&gt;
&lt;h3&gt;Application&lt;/h3&gt;
&lt;p&gt;All of our setting / getting will be defined in terms of object mutations. The basic idea is that we’ll define a single function,  &lt;code&gt;OFApply&lt;/code&gt; , which will get parts of an object, and apply a function to them. And then do this in a vectorized way. We can then define a function  &lt;code&gt;OFMutate&lt;/code&gt;  on that that automatically calls  &lt;code&gt;Set&lt;/code&gt;  on the result.&lt;/p&gt;
&lt;p&gt;We’ll need, once again, a symbol to tell us whether we’re working with the  &lt;code&gt;"Objects"&lt;/code&gt;  or  &lt;code&gt;"Types"&lt;/code&gt;  which we’ll call  &lt;code&gt;$OFApplicationGroup&lt;/code&gt; . Then the heart of the function looks like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFApply[k : {__String}, f_] :=

  With[{$OFApplicationGroup = $OFApplicationGroup},
     If[KeyMemberQ[$OFObjectTable[$OFApplicationGroup], #],
         f[
           $OFObjectTable[$OFApplicationGroup, #],
           HoldPattern[$OFObjectTable[$OFApplicationGroup, #]]
           ],
         Missing[&amp;quot;KeyAbsent&amp;quot;, #]
         ] &amp;amp; /@ k
     ];
OFApply[k : {__String}, p_, f_] :=

  With[{$OFApplicationGroup = $OFApplicationGroup},
     If[KeyMemberQ[$OFObjectTable[$OFApplicationGroup], #],
         f[
           OFLookup[#, p],
           HoldPattern[$OFObjectTable[$OFApplicationGroup, #, p]]
           ],
         Missing[&amp;quot;KeyAbsent&amp;quot;, #]
         ] &amp;amp; /@ k
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Where we actually have two different cases. One where there’s no property to apply to, and one where there is. Branching it like this simplifies the definition process and lets us speed up each. Note that the actual group to be assigned to is passed in the second symbol, to make things easier in setting, etc.&lt;/p&gt;
&lt;h3&gt;Property Setting&lt;/h3&gt;
&lt;p&gt;We can then define a  &lt;code&gt;OFSet&lt;/code&gt;  function and friends off of an  &lt;code&gt;OFApply&lt;/code&gt;  call. In fact, the entire function is just this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFSet[k : objectPattern, p : Except[_List], v_] :=
   OFApply[k, p,
     Function[Null,
       Set[#2, v],
       HoldFirst
       ]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In fact, it’s just a  &lt;code&gt;Set&lt;/code&gt;  delegate.&lt;/p&gt;
&lt;p&gt;And then we can define a number of other such delegates, say for  &lt;code&gt;SetDelayed&lt;/code&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFSetDelayed[k : objectPattern, p_, v_] :=
   OFApply[k, p,
     Function[Null,
       SetDelayed[#2, v],
       HoldAllComplete
       ]
     ];
OFSetDelayed~SetAttributes~HoldAllComplete&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Or a threaded  &lt;code&gt;Set&lt;/code&gt;  (with a delayed companion):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFSetThread[k : objectPattern, p_, v_] :=

  With[{base = Thread[p -&amp;gt; v]},
     OFApply[k,
       Function[Null,
         AssociateTo[Evaluate@Extract[#2, 1, Unevaluated], base],
         HoldAllComplete
         ]
       ];
     v
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Or on a  &lt;code&gt;Part&lt;/code&gt;  (again, with a delayed companion)&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFSetPart[k : objectPattern, key_, parts__, value_] :=

 OFApply[k, key,
    Function[Null,
      Replace[Unevaluated[#],
        HoldPattern[$OFObjectTable[p__]] :&amp;gt;

     Set[$OFObjectTable[[p, parts]], value]
        ],
      HoldAllComplete
      ]
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And so forth.&lt;/p&gt;
&lt;h3&gt;Simplified Mutation Syntax&lt;/h3&gt;
&lt;p&gt;We can then take advantage of  &lt;code&gt;Language`SetMutationHandler&lt;/code&gt;  to mutate these objects from a  &lt;code&gt;Symbol&lt;/code&gt;  without going through an  &lt;a href="https://reference.wolfram.com/language/ref/Evaluate.html"&gt;&lt;code&gt;Evaluate&lt;/code&gt;&lt;/a&gt;  or  &lt;a href="https://reference.wolfram.com/language/ref/With.html"&gt;&lt;code&gt;With&lt;/code&gt;&lt;/a&gt;  call. First we define our handler (note that this is only a sample defintion):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFObjectMutationHandler~SetAttributes~HoldAllComplete;
OFObjectMutationHandler[
    Set[t : sym_Symbol?OFTestObjectQ[base___, prop : Except[_List]], 
    newvalue_]
    ] :=
   With[{obj = sym[base]},
     If[OFObjectQ[obj],
       OFSet[obj, prop, newvalue]
       ]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then we set it:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Language`SetMutationHandler[OFObject, OFObjectMutationHandler];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And with that we can easily mutate our object with calls of the form:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;obj[&amp;quot;prop&amp;quot;] = val&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Other Bits and Pieces&lt;/h3&gt;
&lt;p&gt;A number of other interface functions are implemented, including  &lt;code&gt;AddTo&lt;/code&gt; ,  &lt;code&gt;SubtractFrom&lt;/code&gt; ,  &lt;code&gt;Join&lt;/code&gt; ,  &lt;code&gt;Merge&lt;/code&gt; ,  &lt;code&gt;Map&lt;/code&gt;  etc.&lt;/p&gt;
&lt;p&gt;Similarly, as is visible in the  &lt;code&gt;OFPostLookup&lt;/code&gt;  function, there is a special head called  &lt;code&gt;OFMethod&lt;/code&gt;  which binds to an object instance as a function and which can take an  &lt;code&gt;Association&lt;/code&gt;  as its second argument, which allows it to be treated as a python property in terms of auto-calling.&lt;/p&gt;
&lt;p&gt;&lt;a id="types" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Types&lt;/h2&gt;
&lt;h3&gt;Creating Types&lt;/h3&gt;
&lt;p&gt;As noted previously, we’re treating types as objects, so we’ll need a way to construct new types as well. Note, though, that this will is much simpler than making objects, as they need not be initialized and don’t need unique keys.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFNewType[a : {__Association}] :=
   Catch@
    With[{
       names =
         Lookup[
           a,
           &amp;quot;ObjectTypeName&amp;quot;
           ]
       },
      If[! AllTrue[names, StringQ], Message[OFNewType::names, names]; 
     Throw@$Failed];
      AssociateTo[
        $OFObjectTable[&amp;quot;Types&amp;quot;],
        Thread[names -&amp;gt; a]
        ]
      ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And again we’ll provide some more convenient, non-vectorized syntax:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFNewType[a_Association] :=
   First@OFNewType[{a}];
OFNewType[name_String, a : _Association : &amp;lt;||&amp;gt;] :=
  OFNewType[
    Append[a, &amp;quot;ObjectTypeName&amp;quot; -&amp;gt; name];
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Type Instantiation&lt;/h3&gt;
&lt;p&gt;So we have an object creation syntax, but it’s worth having this be derivable from an  &lt;code&gt;OFType&lt;/code&gt;  as well. The simplest constructor would be simply to attach  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ref/SubValues.html"&gt;&lt;code&gt;SubValues&lt;/code&gt;&lt;/a&gt;  to the  &lt;code&gt;OFType&lt;/code&gt;  symbol:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFType[type_][args___] :=
  OFNewObject[&amp;lt;|
     &amp;quot;ObjectType&amp;quot; -&amp;gt; type,
     &amp;quot;ObjectInitializationArguments&amp;quot; -&amp;gt; HoldComplete[args]
     |&amp;gt;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The issue is that  &lt;code&gt;SubValues&lt;/code&gt;  of course cannot have  &lt;a href="https://reference.wolfram.com/language/ref/Attributes.html"&gt;&lt;code&gt;Attributes&lt;/code&gt;&lt;/a&gt;  so we can’t hold the arguments, and we can’t vectorize this. So we’ll also build a more robust version, deviating from python syntax, using an  &lt;code&gt;OFNewObject&lt;/code&gt;  call:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFNewObject[types : {(Rule | RuleDelayed)[_OFType, _] ..}] :=

  OFNewObject[
     &amp;lt;|
         &amp;quot;ObjectType&amp;quot; -&amp;gt;
           #[[1, 1]],
         &amp;quot;ObjectInitializationArguments&amp;quot; -&amp;gt;
           Extract[
             #,
             2,
             Function[Null,

         Replace[HoldComplete[#], 
          HoldComplete[_[a___]] :&amp;gt; HoldComplete[a]],
               HoldAllComplete
               ]
             ]
         |&amp;gt; &amp;amp; /@ types
     ];
OFNewObject[
   types : {(Rule | RuleDelayed)[_OFType, _] | _OFType ..}] :=

  OFNewObject[
     Replace[types, t_OFType :&amp;gt; (OFType -&amp;gt; {}), 1]
     ];
OFNewObject[type : (Rule | RuleDelayed)[_OFType, _] | _OFType] :=

 First@OFNewObject[{type}]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This way arguments can easily be specified using  &lt;a href="https://reference.wolfram.com/language/ref/RuleDelayed.html"&gt;&lt;code&gt;RuleDelayed&lt;/code&gt;&lt;/a&gt;  syntax to get holding, and it’s a clear, vectorizable syntax.&lt;/p&gt;
&lt;p&gt;&lt;a id="building-a-type-constructor" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Building a Type Constructor&lt;/h2&gt;
&lt;p&gt;Having to specify a type as an  &lt;code&gt;Association&lt;/code&gt;  can be unwieldy, so we’ll build a package-like syntax for type definitions. The basic plan is to build and add to a construction stack until some end function is called, at which point it will unravel back out to a type.&lt;/p&gt;
&lt;h3&gt;The Construction Stack&lt;/h3&gt;
&lt;p&gt;This is a simple list to which pieces can be appended. We’ll instantiate it like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$OFConstructorStack = {};&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Begin&lt;/h3&gt;
&lt;p&gt;We’ll then create a function like  &lt;a href="https://reference.wolfram.com/language/ref/BeginPackage.html"&gt;&lt;code&gt;BeginPackage&lt;/code&gt;&lt;/a&gt;  which will stick basic meta-information on the stack:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Options[OFBegin] = {
    &amp;quot;Type&amp;quot; -&amp;gt; &amp;quot;Object&amp;quot;,
    &amp;quot;Construct&amp;quot; -&amp;gt; &amp;quot;Type&amp;quot;,
    &amp;quot;Assign&amp;quot; -&amp;gt; None
    };
OFBegin[name : Except[_Rule | _RuleDelayed], 
   ops : OptionsPattern[]] :=
   AppendTo[$OFConstructorStack,
     &amp;lt;|
       &amp;quot;Name&amp;quot; -&amp;gt;
         Replace[name, None | Automatic :&amp;gt; CreateUUID[&amp;quot;Type-&amp;quot;]],
       &amp;quot;Construct&amp;quot; -&amp;gt;
         Replace[OptionValue[&amp;quot;Construct&amp;quot;], Except[&amp;quot;Object&amp;quot;] -&amp;gt; &amp;quot;Type&amp;quot;],
       &amp;quot;Assign&amp;quot; -&amp;gt;
         OptionValue[&amp;quot;Assign&amp;quot;],
       &amp;quot;Fields&amp;quot; -&amp;gt;
         &amp;lt;|
           &amp;quot;ObjectType&amp;quot; -&amp;gt;
             Replace[OptionValue[&amp;quot;Type&amp;quot;],
               _?(Not@KeyMemberQ[$OFObjectTable[&amp;quot;Types&amp;quot;], #] &amp;amp;) -&amp;gt; 
         &amp;quot;Object&amp;quot;
               ]
           |&amp;gt;,
       &amp;quot;Methods&amp;quot; -&amp;gt;
         &amp;lt;|
           |&amp;gt;
       |&amp;gt;
     ];
OFBegin~SetAttributes~HoldRest;&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Stack Additions&lt;/h3&gt;
&lt;p&gt;Then we have a function for sticking data on the stack. First one for fields:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFAddField[name_, value_] :=
   (
     AssociateTo[$OFConstructorStack[[-1, &amp;quot;Fields&amp;quot;]],
        name -&amp;gt; value
        ];
     );
OFAddFieldDelayed[name_, value_] :=
   (
     AssociateTo[$OFConstructorStack[[-1, &amp;quot;Fields&amp;quot;]],
        name :&amp;gt; value
        ];
     );&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And one for methods:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFAddMethod[nameProvided_, data : _Association : &amp;lt;||&amp;gt;] :=

  With[{name =
       Replace[nameProvided,
         s_String :&amp;gt;
           Replace[
             StringReplace[s, {
                &amp;quot;__&amp;quot; ~~ l : WordCharacter .. ~~ &amp;quot;__&amp;quot; :&amp;gt;

           &amp;quot;Object&amp;quot; &amp;lt;&amp;gt; ToUpperCase@StringTake[l, 1] &amp;lt;&amp;gt; 
            StringDrop[l, 1],
                &amp;quot;__&amp;quot; ~~ l : WordCharacter .. :&amp;gt; PrivateKey[l]
                }],
             StringExpression[__, p_PrivateKey] :&amp;gt; p
             ]
         ]},
     If[KeyMemberQ[$OFConstructorStack[[-1, &amp;quot;Methods&amp;quot;]], name],
       $OFConstructorStack[[-1, &amp;quot;Methods&amp;quot;, name, &amp;quot;Properties&amp;quot;]] =
         Join[
           $OFConstructorStack[[-1, &amp;quot;Methods&amp;quot;, name, &amp;quot;Properties&amp;quot;]],
           data
           ],
       AssociateTo[$OFConstructorStack[[-1, &amp;quot;Methods&amp;quot;]],
         name -&amp;gt;
           &amp;lt;|

       &amp;quot;Symbol&amp;quot; -&amp;gt; OFMethodSymbol[name],
             &amp;quot;Properties&amp;quot; -&amp;gt; data
             |&amp;gt;
         ]
       ]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Note that this uses something called  &lt;code&gt;OFMethodSymbol&lt;/code&gt;  which is defined like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFMethodSymbol[name_, add : True | False : False] :=

  If[KeyMemberQ[$OFConstructorStack[[-1, &amp;quot;Methods&amp;quot;]], name],
     $OFConstructorStack[[-1, &amp;quot;Methods&amp;quot;, name, &amp;quot;Symbol&amp;quot;]],
     If[add,
       OFAddMethod[name];
       OFMethodSymbol[name, False],
       Symbol[
         StringReplace[ToString[name], 
       Except[WordCharacter | &amp;quot;$&amp;quot;] -&amp;gt; &amp;quot;&amp;quot;] &amp;lt;&amp;gt;
           &amp;quot;$&amp;quot; &amp;lt;&amp;gt; 
      StringReplace[CreateUUID[], &amp;quot;-&amp;quot; -&amp;gt; &amp;quot;&amp;quot;]
         ]
       ]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Where it simply finds the symbol attached to a method on the stack. This will be more important later.&lt;/p&gt;
&lt;h3&gt;Method Construction&lt;/h3&gt;
&lt;p&gt;This constructor is more powerful if we provide a method construction aide or two, so we’ll do just that. First we’ll set up something to track what methods we build:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;If[! MatchQ[$OFBuiltMethods, _Association],
   $OFBuiltMethods = &amp;lt;||&amp;gt;
   ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then a function that actually builds a method:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFBuildMethod[f_, data_Association] :=
  With[{
     a = Lookup[data, &amp;quot;Attributes&amp;quot;, {}],
     o = Lookup[data, &amp;quot;Options&amp;quot;, {}]
     },
    If[MatchQ[f, _Symbol],
      Attributes[f] = a;
      Options[f] = o;
      ];
    OFMethod[f, KeyDrop[data, {&amp;quot;Attributes&amp;quot;, &amp;quot;Options&amp;quot;}]]
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;End&lt;/h3&gt;
&lt;p&gt;Finally we’ll have a function that takes all that stack data and converts it into a type. It simply finds all of the properties, puts them into the  &lt;code&gt;Association&lt;/code&gt;  that  &lt;code&gt;OFNewType&lt;/code&gt;  expects, and sends it through.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFEnd[] :=
   If[Length@$OFConstructorStack &amp;gt; 0,
     With[{a = Last@$OFConstructorStack},
       $OFConstructorStack = Delete[$OFConstructorStack, -1];
       With[{
          t = a[&amp;quot;Construct&amp;quot;],
          s = a[&amp;quot;Assign&amp;quot;],
          n = a[&amp;quot;Name&amp;quot;],
          f = a[&amp;quot;Fields&amp;quot;],
          m = OFBuildMethod[#Symbol, #Properties] &amp;amp; /@ a[&amp;quot;Methods&amp;quot;]
          },
         $OFBuiltMethods =
           Join[$OFBuiltMethods,
             AssociationMap[Null &amp;amp;,
               Values@a[[&amp;quot;Methods&amp;quot;, All, &amp;quot;Symbol&amp;quot;]]
               ]
             ];
         With[{obj =
             If[t == &amp;quot;Type&amp;quot;,
               OFNewType[n, Join[f, m, &amp;lt;|&amp;quot;ObjectTypeName&amp;quot; -&amp;gt; n|&amp;gt;]];
               OFType[n],
               OFNewObject[Join[f, m, &amp;lt;|&amp;quot;ObjectType&amp;quot; -&amp;gt; n|&amp;gt;]]
               ]
            },
           If[s =!= None, s = obj, s]
           ]
         ]
       ],
     None
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;h3&gt;Constructor UpValues&lt;/h3&gt;
&lt;p&gt;Generally we won’t want to use  &lt;code&gt;OFAddField&lt;/code&gt;  or anything like that when we’re defining types. It’s just a little bit clumsy. Better, generally, is to define types in a similar style to how packages are built. What I mean is we’ll want some syntax like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFBegin[&amp;quot;TypeName&amp;quot;];
OFField[&amp;quot;FieldName&amp;quot;] = val;
SetOptions[OFMethod[&amp;quot;MethodName&amp;quot;], { ...}];
OFMethod[&amp;quot;MethodName&amp;quot;][pats___] := code;
OFEnd[];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We can get set this up using  &lt;code&gt;UpValues&lt;/code&gt; . The actually  &lt;code&gt;UpValues&lt;/code&gt;  used aren’t terribly interesting so we’ll leave them out here. You can look at the implementation package if you’re interested.&lt;/p&gt;
&lt;h3&gt;Magic Methods&lt;/h3&gt;
&lt;p&gt;One last thing we’ll want are aliases for some so-called “magic methods”—things like  &lt;code&gt;"ObjectInitialization"&lt;/code&gt;  that the framework knows to look for and which define special hooks. At the moment there are three of these:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFInit /:

  HoldPattern[(s : Set | SetDelayed)[OFInit[p___], code_]] :=

  s[OFMethod[&amp;quot;ObjectInitialization&amp;quot;][p], code];
OFRepr /:

  HoldPattern[(s : Set | SetDelayed)[OFRepr[p___], code_]] :=

  s[OFMethod[&amp;quot;ObjectRepresentation&amp;quot;][p], code];
OFStr /:

  HoldPattern[(s : Set | SetDelayed)[OFStr[p___], code_]] :=

  s[OFMethod[&amp;quot;ObjectString&amp;quot;][p], code];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="an-object-framework-example" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;An Object Framework Example&lt;/h1&gt;
&lt;p&gt;&lt;a id="defining-a-ball-in-a-box" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Defining a Ball in a Box&lt;/h2&gt;
&lt;p&gt;We’ll do a quick, simple example, where we define a ball-in-a-box class and just watch a ball bounce around a box:&lt;/p&gt;
&lt;p&gt;First we begin the class:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ballInABox := OFBegin[&amp;quot;BallInABox&amp;quot;]

(*Out:*)

{&amp;lt;|&amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;BallInABox&amp;quot;, &amp;quot;Construct&amp;quot; -&amp;gt; &amp;quot;Type&amp;quot;, 
  &amp;quot;Assign&amp;quot; -&amp;gt; HoldPattern[ballInABox], 
  &amp;quot;Fields&amp;quot; -&amp;gt; &amp;lt;|&amp;quot;ObjectType&amp;quot; -&amp;gt; &amp;quot;Object&amp;quot;|&amp;gt;, &amp;quot;Methods&amp;quot; -&amp;gt; &amp;lt;||&amp;gt;|&amp;gt;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Add a default box and elasticity multiplier&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFField[&amp;quot;Box&amp;quot;] = {{-5, 5}, {-5, 5}};
OFField[&amp;quot;ElasticityMultiplier&amp;quot;] = 1;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Define a  &lt;code&gt;"Step"&lt;/code&gt;  function&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFMethod[&amp;quot;Step&amp;quot;][
   self_,
   time : _Quantity : Quantity[.1, &amp;quot;Seconds&amp;quot;],
   steps : _Integer?Positive : 1
   ] :=

 Module[{position, velocity, box, mulp, 
   timenum = QuantityMagnitude@UnitConvert[time, &amp;quot;Seconds&amp;quot;]}, 
    {position, velocity, box, mulp} =
      OFLookup[
    self, {&amp;quot;Position&amp;quot;, &amp;quot;Velocity&amp;quot;, &amp;quot;Box&amp;quot;, &amp;quot;ElasticityMultiplier&amp;quot;}];
    (self[{&amp;quot;Postion&amp;quot;, &amp;quot;Velocity&amp;quot;}] = {position, velocity}; #) &amp;amp;@
      Reap[
         Do[
           position += velocity*timenum;
           Which[
             position[[1]] &amp;lt; box[[1, 1]],
              position[[1]] = box[[1, 1]];
              velocity[[1]] = -mulp*velocity[[1]],
             position[[1]] &amp;gt; box[[1, 2]],
              position[[1]] = box[[1, 2]];
              velocity[[1]] = -mulp*velocity[[1]]
             ];
           Which[
             position[[2]] &amp;lt; box[[2, 1]],
              position[[2]] = box[[2, 1]];
              velocity[[2]] = -mulp*velocity[[2]],
             position[[2]] &amp;gt; box[[2, 2]],
              position[[2]] = box[[2, 2]];
              velocity[[2]] = -mulp*velocity[[2]]
             ];
           Sow@position,
           steps
           ]
         ][[2, 1]]
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we end define the constructor:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;OFInit[self_,
   position : {_?NumericQ, _?NumericQ} : {0, 0},
   velocity : {_?NumericQ, _?NumericQ} : {1, 1}
   ] :=

 OFSetThread[self, {&amp;quot;Position&amp;quot;, &amp;quot;Velocity&amp;quot;}, {position, velocity}]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And let’s just peek at the stack:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$OFConstructorStack

(*Out:*)

{&amp;lt;|&amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;BallInABox&amp;quot;, &amp;quot;Construct&amp;quot; -&amp;gt; &amp;quot;Type&amp;quot;, 
  &amp;quot;Assign&amp;quot; -&amp;gt; HoldPattern[ballInABox], 
  &amp;quot;Fields&amp;quot; -&amp;gt; &amp;lt;|&amp;quot;ObjectType&amp;quot; -&amp;gt; &amp;quot;Object&amp;quot;, &amp;quot;Box&amp;quot; -&amp;gt; {{-5, 5}, {-5, 5}},
     &amp;quot;ElasticityMultiplier&amp;quot; -&amp;gt; 1|&amp;gt;, 
  &amp;quot;Methods&amp;quot; -&amp;gt; &amp;lt;|&amp;quot;Step&amp;quot; -&amp;gt; &amp;lt;|&amp;quot;Symbol&amp;quot; -&amp;gt; 
       Step$22f15d87fd684683a13e88d69f21dad4, &amp;quot;Properties&amp;quot; -&amp;gt; &amp;lt;||&amp;gt;|&amp;gt;, 
    &amp;quot;ObjectInitialization&amp;quot; -&amp;gt; &amp;lt;|&amp;quot;Symbol&amp;quot; -&amp;gt; 
       ObjectInitialization$4a5647db29784ae69d9b1f0dcd88cddb, 
      &amp;quot;Properties&amp;quot; -&amp;gt; &amp;lt;||&amp;gt;|&amp;gt;|&amp;gt;|&amp;gt;}

OFEnd[]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-a-fake-object-framework-5533752296471534441" src="https://b3m2a1.github.io/img/posts-a-fake-object-framework-5533752296471534441.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="playing-with-a-ballinabox" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Playing with a ball-in-a-box&lt;/h2&gt;
&lt;p&gt;We’ll then just build one of these objects:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ball = ballInABox[RandomReal[{-5, 5}, 2], RandomReal[{-2.5, 2.5}, 2]]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-a-fake-object-framework-9116754826795747734" src="https://b3m2a1.github.io/img/posts-a-fake-object-framework-9116754826795747734.png" /&gt;&lt;/p&gt;
&lt;p&gt;And make it step like 10 times&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ball[&amp;quot;Step&amp;quot;][10]

(*Out:*)

{{3.08519, 
  0.0352382}, {3.21787, -0.0303612}, {3.35055, -0.0959607}, {3.48323, \
-0.16156}, {3.61591, -0.22716}, {3.74859, -0.292759}, {3.88127, \
-0.358359}, {4.01394, -0.423958}, {4.14662, -0.489558}, {4.2793, \
-0.555157}}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Check the ball’s position and velocity:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ball[{&amp;quot;Position&amp;quot;, &amp;quot;Velocity&amp;quot;}]

(*Out:*)

{{2.95251, 0.100838}, {1.32679, -0.655995}}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And view the ball bouncing:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;With[{box = ball[&amp;quot;Box&amp;quot;]},
  ListAnimate[
    Graphics[Point[#], PlotRange -&amp;gt; box] &amp;amp; /@ ball[&amp;quot;Step&amp;quot;][100]
    ]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-a-fake-object-framework-3943164318078536356" src="https://b3m2a1.github.io/img/posts-a-fake-object-framework-3943164318078536356.gif" /&gt;&lt;/p&gt;
&lt;p&gt;Randomize the position and velocity and do it again, but faster&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ball[{&amp;quot;Position&amp;quot;, &amp;quot;Velocity&amp;quot;}] = {RandomReal[{-5, 5}, 2], 
   RandomReal[{-2.5, 2.5}, 2]};
With[{box = ball[&amp;quot;Box&amp;quot;]},
  ListAnimate[
    Graphics[Point[#], PlotRange -&amp;gt; box] &amp;amp; /@ 
   ball[&amp;quot;Step&amp;quot;][Quantity[2, &amp;quot;Seconds&amp;quot;], 100]
    ]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-a-fake-object-framework-6727523626926870660" src="https://b3m2a1.github.io/img/posts-a-fake-object-framework-6727523626926870660.gif" /&gt;&lt;/p&gt;
&lt;p&gt;This is a basic example of the sort of thing OOP brings to the table and, with enough work, it’s pretty fast and nice enough to work with.&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>Questions on the Mathematica Stack Exchange, Part 2</title><link href="https://b3m2a1.github.io/questions-on-the-mathematica-stack-exchange-part-2.html" rel="alternate"></link><published>2017-07-31T22:48:28-05:00</published><updated>2017-07-31T22:48:28-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-07-31:/questions-on-the-mathematica-stack-exchange-part-2.html</id><summary type="html">&lt;p&gt;This is an extension on my  &lt;a href="/questions-on-the-mathematica-stack-exchange.html"&gt;previous post&lt;/a&gt;  about digging through the Stack Exchange. If you want some more background head there.&lt;/p&gt;
&lt;p&gt;Last time we briefly looked at how questions tracked with Mathematica release dates. Today we’ll look at how time of posting correlates with question score and with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is an extension on my  &lt;a href="/questions-on-the-mathematica-stack-exchange.html"&gt;previous post&lt;/a&gt;  about digging through the Stack Exchange. If you want some more background head there.&lt;/p&gt;
&lt;p&gt;Last time we briefly looked at how questions tracked with Mathematica release dates. Today we’ll look at how time of posting correlates with question score and with answer score.&lt;/p&gt;
&lt;p&gt;First off, let’s get all our answer data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so = ServiceConnect[&amp;quot;StackExchange&amp;quot;];
$answers =
   $so[&amp;quot;QueryIterate&amp;quot;,
     &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Answers&amp;quot;,
     &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;
     ];
$answers // Length

(*Out:*)

66546&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And export it like before:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;KeyChainConnect[]; 
CloudExport[$answers, &amp;quot;MX&amp;quot;, &amp;quot;user:b3m2a1/mse_answers_list.mx&amp;quot;, 
 Permissions -&amp;gt; &amp;quot;Public&amp;quot;]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/b3m2a1/mse_answers_\
list.mx&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we’ll import the old questions:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$questions = CloudImport[&amp;quot;user:b3m2a1/mse_question_list.mx&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now let’s build an  &lt;a href="https://reference.wolfram.com/language/ref/EventSeries.html"&gt;&lt;code&gt;EventSeries&lt;/code&gt;&lt;/a&gt;  over the questions and answer scores:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;questionScores =
  EventSeries@
    AssociationThread[
      FromUnixTime /@ Lookup[Normal[$questions], &amp;quot;creation_date&amp;quot;],
      Lookup[Normal[$questions], &amp;quot;score&amp;quot;]
      ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-6321857981943799509" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-6321857981943799509.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;answerScores =
  EventSeries@
    AssociationThread[
      FromUnixTime /@ Lookup[Normal[$answers], &amp;quot;creation_date&amp;quot;],
      Lookup[Normal[$answers], &amp;quot;score&amp;quot;]
      ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-3598993207004014920" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-3598993207004014920.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note that the answers extend a bit further, and we could import the new data. Or we could just chop both  &lt;code&gt;EventSeries&lt;/code&gt;  and, given my laziness (and that you, dear reader, don’t want to look at more boring code) we’ll do the latter.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;questionScores =
   TimeSeriesWindow[
   questionScores, {DateObject[{1970}], DateObject[{2017, 6, 30}]}];
answerScores =
   TimeSeriesWindow[
   answerScores, {DateObject[{1970}], DateObject[{2017, 6, 30}]}];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Cool. Now they treat the same time span, so we can begin. Before any real work, though, let’s just look at what we have here:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Map[
   {DateListPlot[#, PlotRange -&amp;gt; All], 
    Histogram[#[&amp;quot;Values&amp;quot;], PlotRange -&amp;gt; All]} &amp;amp;,
   {questionScores, answerScores}
   ] // Grid

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-8256581848520602254" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-8256581848520602254.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-8237165045256378033" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-8237165045256378033.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-2059780197066256639" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-2059780197066256639.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-1667271355729158206" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-1667271355729158206.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Scores peak very strongly for both in the 1-5 range&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Answer scores appear to be higher than question scores on average&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And these observations are borne out by testing:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;questionScores[&amp;quot;Values&amp;quot;] // Median
answerScores[&amp;quot;Values&amp;quot;] // Median

(*Out:*)

3

(*Out:*)

4

questionScores[&amp;quot;Values&amp;quot;] // Mean // N
answerScores[&amp;quot;Values&amp;quot;] // Mean // N

(*Out:*)

4.58619

(*Out:*)

5.32322&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="score-as-a-function-of-time-of-day" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Score as a Function of Time of Day&lt;/h2&gt;
&lt;p&gt;We’ll start by simply sampling every day down to its time component&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;dateHMReform[dates : {__DateObject}] :=

  TimeObject[#, TimeZone -&amp;gt; -4.] &amp;amp; /@
     Thread[
       {
         DateValue[dates, &amp;quot;Hour&amp;quot;],
         DateValue[dates, &amp;quot;Minute&amp;quot;],
         DateValue[dates, &amp;quot;Second&amp;quot;]
         }
       ];

questionHMScores =
   EventSeries[
   Thread@{dateHMReform[questionScores[&amp;quot;Dates&amp;quot;]], 
     questionScores[&amp;quot;Values&amp;quot;]}];
answerHMScores =
   EventSeries[
   Thread@{dateHMReform[answerScores[&amp;quot;Dates&amp;quot;]], 
     answerScores[&amp;quot;Values&amp;quot;]}];
DateListPlot[#, PlotRange -&amp;gt; All] &amp;amp; /@ {answerHMScores, 
   questionHMScores} // Column

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-4686921911734673632" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-4686921911734673632.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-31470148175507030" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-31470148175507030.png" /&gt;&lt;/p&gt;
&lt;p&gt;And... all we see is noise. So let’s restrict ourselves to the questions and do a simple smoothing:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;smoothQHMS = 
  MovingMap[Mean, questionHMScores, Quantity[1, &amp;quot;Hours&amp;quot;] ];
smoothQHMS // DateListPlot[#, PlotRange -&amp;gt; All] &amp;amp;

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-2775421680948229544" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-2775421680948229544.png" /&gt;&lt;/p&gt;
&lt;p&gt;And that does seem to be interpretable (although it’s super funky that the graph doesn’t cycle appropriately). But first let’s just look at how this compares to the questions posted at a given time:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;smoothQHMSLength = 
  MovingMap[Length, questionHMScores, Quantity[1, &amp;quot;Hours&amp;quot;] ];
Thread[{#[&amp;quot;Dates&amp;quot;], Rescale[#[&amp;quot;Values&amp;quot;]]}] &amp;amp; /@ {
    smoothQHMS,
    smoothQHMSLength
    } // DateListPlot[#, PlotRange -&amp;gt; All] &amp;amp;

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-7774584598556387992" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-7774584598556387992.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which is interesting. There are a few possible interpretations for this data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The proportion of users who simply want quick help and don’t care about question quality increases in that middle-of-the-day peak and a falling-tide lowers all ships&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Around 7:00PM, 9:00 PM and 2:00 AM EST people ask better questions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Around 7:00PM, 9:00 PM and 2:00 AM EST people are more prone to up-voting questions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There’re some outliers distorting those times&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll tackle the last and first of these propositions first, as they’re easiest to treat.&lt;/p&gt;
&lt;h3&gt;Proposal: Outliers skew the data&lt;/h3&gt;
&lt;p&gt;First, the outliers:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Select[
   Normal[smoothQHMS],
   Between[#[[2]], {0, 25}] &amp;amp;
   ] // DateListPlot[#, PlotRange -&amp;gt; All] &amp;amp;

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-2775421680948229544" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-2775421680948229544.png" /&gt;&lt;/p&gt;
&lt;p&gt;So that’s clearly not the issue here. Which is really unsurprising given that the highest and lowest question scores are &amp;lt;1000 and the minimum number of questions asked over one of these time periods is 1000.&lt;/p&gt;
&lt;h3&gt;Proposal: Low-scoring questions drown out the others&lt;/h3&gt;
&lt;p&gt;For the other, we’ll try removing users who have asked fewer than 5 questions, considering those questions a form of trial-period or whatnot, to learn how best to ask questions. &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$userQuestionCounts = $questions[All, &amp;quot;owner&amp;quot;, &amp;quot;user_id&amp;quot;] // Normal //
    Counts;
$experiencedUsers = Keys@Select[$userQuestionCounts, GreaterThan[5]];
$experiencedUserQuestions = $questions[
   Select[MemberQ[$experiencedUsers, #[&amp;quot;owner&amp;quot;, &amp;quot;user_id&amp;quot;]] &amp;amp;]];
experiencedUserQuestionScores =
   TimeSeriesWindow[
     EventSeries@
       AssociationThread[
         FromUnixTime /@ 
      Lookup[Normal[$experiencedUserQuestions], &amp;quot;creation_date&amp;quot;],
         Lookup[Normal[$experiencedUserQuestions], &amp;quot;score&amp;quot;]
         ],
     {DateObject[{1970}], DateObject[{2017, 6, 30}]}
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then do the same date renormalization:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;experiencedUserQuestionHMScores =
   EventSeries[
     Thread@{
        dateHMReform[experiencedUserQuestionScores[&amp;quot;Dates&amp;quot;]],
        experiencedUserQuestionScores[&amp;quot;Values&amp;quot;]
        }
     ];
smoothEUQS = 
  MovingMap[Mean, experiencedUserQuestionHMScores, 
   Quantity[1, &amp;quot;Hours&amp;quot;]];
{
   smoothQHMS,
   smoothEUQS
   } // DateListPlot[#, PlotRange -&amp;gt; All] &amp;amp;

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-7662088961323393167" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-7662088961323393167.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we see a scaling shift (i.e. each data point seems to be multiplied by some factor rather than having a constant added) but the exact same pattern.&lt;/p&gt;
&lt;p&gt;So that leaves us with two discussions left, and unfortunately we’re not yet equipped to look at either of them, so first we really need to identify where those peaks are coming from.&lt;/p&gt;
&lt;h3&gt;Identiify the Peaks&lt;/h3&gt;
&lt;p&gt;Let’s first note the three main peaks:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;peakDates =
   Pick[
       TimeObject /@ #[[All, 1]],
       GreaterThan[6] /@ #[[All, 2]]
       ] &amp;amp;@
     Pick[
       smoothedEUQS[&amp;quot;DatePath&amp;quot;],
       EqualTo[1] /@
         PeakDetect[
           smoothEUQS[&amp;quot;Values&amp;quot;],
           250 (*Picked to give 3 distinct points*)
           ]
       ];
peakDates

(*Out:*)

{TimeObject[{3, 18, 17.}, TimeZone -&amp;gt; -4.], 
 TimeObject[{18, 50, 6.}, TimeZone -&amp;gt; -4.], 
 TimeObject[{21, 59, 32.}, TimeZone -&amp;gt; -4.]}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now let’s find standard user timezones, where available. First we’re gonna have to pull in all the user data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$users =
   $so[&amp;quot;QueryIterate&amp;quot;,
     &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Users&amp;quot;,
     &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;
     ];
$users // Length

(*Out:*)

33541

CloudExport[$users, &amp;quot;MX&amp;quot;, &amp;quot;user:b3m2a1/mse_users_list.mx&amp;quot;, 
 Permissions -&amp;gt; &amp;quot;Public&amp;quot;]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/b3m2a1/mse_users_\
list.mx&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then we’ll extract time zones by determining location:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;userPlaceNames =
   StringSplit[
        If[StringContainsQ[#, &amp;quot;#&amp;quot;], ImportString[#, &amp;quot;HTML&amp;quot;], #],
        &amp;quot;/&amp;quot;] &amp;amp; /@ DeleteMissing@Normal@$users[All, &amp;quot;location&amp;quot;] // 
   Flatten;
userCountries =
   Interpreter[&amp;quot;Country&amp;quot;][userPlaceNames];
userCities =
   Interpreter[&amp;quot;AdministrativeDivision&amp;quot;][
   Pick[userPlaceNames, FailureQ /@ userCountries]];
userTimeZones =
   N@Mean@QuantityMagnitude@
         UnitConvert[EntityValue[#, &amp;quot;OffsetFromUTC&amp;quot;], 
        &amp;quot;Hours&amp;quot;] &amp;amp; /@
      EntityValue[
        Cases[_Entity]@
          Join[userCountries, userCities],
        &amp;quot;TimeZones&amp;quot;
        ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then build a histogram of these:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Histogram[
  userTimeZones,
  {Range[-8, 12, 2]},
  Ticks -&amp;gt; {Range[-8, 12, 2], Automatic}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-2727093342462400567" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-2727093342462400567.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let’s then remap the place names to their values, with the same binning:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;KeySelect[IntegerQ]@
      GroupBy[
        Thread[
          CommonName@
             Cases[_Entity]@
               Join[userCountries, userCities] -&amp;gt;

       Round[userTimeZones, 2]
          ],
        Last -&amp;gt; First
        ] // Map[StringRiffle[Keys@ReverseSort@Counts@#, &amp;quot; | &amp;quot;] &amp;amp;] // 
  KeySort;
userPlaceNameTZs // Dataset

(*Out:*)

Dataset[ &amp;lt;&amp;gt; ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So there’re clearly some oddities with my method for computing time zones, but overall we’re in a pretty good state to start looking at what those points could be. &lt;/p&gt;
&lt;p&gt;In particular, let's first assume they correspond to Europe in some way as, of the people who have tagged a location on their account, they're by far the dominant users of the site — although, just as a sanity check, in terms of a single country the maximum number of users do come from United States.&lt;/p&gt;
&lt;p&gt;Now moving on, let’s shift that plot above by 6 hours (UTC-4 + UTC+2) with the peaks highlighted:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;peakTimeEventSeries = EventSeries@Thread[{peakTimes, 10}];
europeSEUQs =
   {TimeObject@#[[1]], #[[2]]} &amp;amp; /@

    TimeSeriesShift[smoothEUQS, Quantity[6, &amp;quot;Hours&amp;quot;]][&amp;quot;DatePath&amp;quot;] // 
   EventSeries;
europePeakTimes =
   {TimeObject@#[[1]], #[[2]]} &amp;amp; /@

    TimeSeriesShift[peakTimeEventSeries, Quantity[6, &amp;quot;Hours&amp;quot;]][
     &amp;quot;DatePath&amp;quot;] // EventSeries;
europeSHMLs =
   {TimeObject@#[[1]], #[[2]]} &amp;amp; /@

    TimeSeriesShift[smoothQHMSLength, Quantity[6, &amp;quot;Hours&amp;quot;]][
     &amp;quot;DatePath&amp;quot;] // EventSeries;
europeScaledSHMLs =
   Thread[{
        #[&amp;quot;Dates&amp;quot;],
        Rescale[#[&amp;quot;Values&amp;quot;], MinMax@#[&amp;quot;Values&amp;quot;], 
       MinMax@europeSEUQs[&amp;quot;Values&amp;quot;]]
        }] &amp;amp;@europeSHMLs;

Show[
  DateListPlot[{europeSEUQs, europeScaledSHMLs}],
  DateListPlot[
    europePeakTimes,
    Joined -&amp;gt; False,
    Filling -&amp;gt; Axis
    ]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-4782766389047569966" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-4782766389047569966.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which is interesting and provides better framing for the question time curve, but also suggests those peaks probably aren’t a pure European effect. &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;europePeakTimes[&amp;quot;Dates&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-9167288617133417651" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-9167288617133417651.png" /&gt;&lt;/p&gt;
&lt;p&gt;1:00 AM is plausible, given how many programmers tend to be night-owls, 9:15 is plausible—start of the workday and all that—but 4:00 AM seems odd. &lt;/p&gt;
&lt;p&gt;So let’s just quickly look at the same graph for PST:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;pstSEUQs =
   {TimeObject@#[[1]], #[[2]]} &amp;amp; /@

    TimeSeriesShift[smoothEUQS, Quantity[-3, &amp;quot;Hours&amp;quot;]][&amp;quot;DatePath&amp;quot;] // 
   EventSeries;
pstPeakTimes =
   {TimeObject@#[[1]], #[[2]]} &amp;amp; /@

    TimeSeriesShift[peakTimeEventSeries, Quantity[-3, &amp;quot;Hours&amp;quot;]][
     &amp;quot;DatePath&amp;quot;] // EventSeries;
pstSHMLs =
   {TimeObject@#[[1]], #[[2]]} &amp;amp; /@

    TimeSeriesShift[smoothQHMSLength, Quantity[-3, &amp;quot;Hours&amp;quot;]][
     &amp;quot;DatePath&amp;quot;] // EventSeries;
pstScaledSHMLs =
   Thread[{
        #[&amp;quot;Dates&amp;quot;],
        Rescale[#[&amp;quot;Values&amp;quot;], MinMax@#[&amp;quot;Values&amp;quot;], 
       MinMax@pstSEUQs[&amp;quot;Values&amp;quot;]]
        }] &amp;amp;@pstSHMLs;

Show[
    DateListPlot[{pstSEUQs, pstScaledSHMLs}],
    DateListPlot[
            pstPeakTimes,
            Joined -&amp;gt; False,
            Filling -&amp;gt; Axis
            ]
    ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-5727946783754797486" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-5727946783754797486.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;pstPeakTimes[&amp;quot;Dates&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-2397163837034603994" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-2397163837034603994.png" /&gt;&lt;/p&gt;
&lt;p&gt;These times do seem pretty reasonable for bouts of activity. So let’s just try cutting out the PST users. Maybe they’re just particularly good. First we need to remap the actual user location strings to their timezones:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;userPlaceNameTimes =
   AssociationThread[
     DeleteMissing@Normal@$users[All, &amp;quot;location&amp;quot;],
     Replace[
       DeleteMissing@Normal@$users[All, &amp;quot;location&amp;quot;],
       Normal[
         KeyMap[_?(StringContainsQ[#]) &amp;amp;]@
           AssociationThread[
             userPlaceNames -&amp;gt;
               Lookup[
                 AssociationThread[
                   Cases[_Entity]@
                     Join[userCountries, userCities],
                   Round[userTimeZones, 2]
                   ],
                 ReplacePart[
                   userCountries,

          Thread[Position[userCountries, _Failure] -&amp;gt; userCities]
                   ],
                 \[Infinity]
                 ]
             ]
         ],
       1
       ]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then pick the users to drop:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;pstUserIDs =
   Pick[
     Normal@$users[All, &amp;quot;user_id&amp;quot;],
     MatchQ[-6 | -8] /@

    Lookup[userPlaceNameTimes, Normal@$users[[All, &amp;quot;location&amp;quot;]]]
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then for testing we’ll generalize that function for generating a comparative peak plot:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;compPeakData[userSel : Except[_List], 
   exclude : True | False : True] :=
   compPeakData[
     Pick[
       Normal@$users[All, &amp;quot;user_id&amp;quot;],
       userSel /@

     Lookup[userPlaceNameTimes, Normal@$users[[All, &amp;quot;location&amp;quot;]]]
       ],
     exclude
     ];
compPeakData[l_List, exclude : True | False : True] :=

  compPeakData[l, exclude] =
     Module[{a = &amp;lt;||&amp;gt;},
       a[&amp;quot;Users&amp;quot;] = l;
       a[&amp;quot;Questions&amp;quot;] =
         $questions[
      Select[If[exclude, Not, Identity]@
         MemberQ[a[&amp;quot;Users&amp;quot;], #[&amp;quot;owner&amp;quot;, &amp;quot;user_id&amp;quot;]] &amp;amp;]];
       a[&amp;quot;EventSeries&amp;quot;] =
         TimeSeriesWindow[
           EventSeries@
             AssociationThread[

        FromUnixTime /@ 
         Lookup[Normal[a[&amp;quot;Questions&amp;quot;]], &amp;quot;creation_date&amp;quot;],
               Lookup[Normal[a[&amp;quot;Questions&amp;quot;]], &amp;quot;score&amp;quot;]
               ],
           {DateObject[{1970}], DateObject[{2017, 6, 30}]}
           ];
       a[&amp;quot;HourMinuteSeries&amp;quot;] =
         EventSeries[
           Thread@{
              dateHMReform[a[&amp;quot;EventSeries&amp;quot;][&amp;quot;Dates&amp;quot;]],
              a[&amp;quot;EventSeries&amp;quot;][&amp;quot;Values&amp;quot;]
              }
           ];
       a[&amp;quot;SmoothData&amp;quot;] =
         MovingMap[Mean, a[&amp;quot;HourMinuteSeries&amp;quot;], 
      Quantity[1, &amp;quot;Hours&amp;quot;]];
       a
       ];
compPeakPlot[userSel_, exclude : True | False : True] :=
  {
     smoothQHMS,
     compPeakData[userSel, exclude][&amp;quot;SmoothData&amp;quot;]
     } // DateListPlot[#, PlotRange -&amp;gt; All] &amp;amp;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And for the PST people:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;compPeakPlot[MatchQ[-8 | -6]]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-3307809793437076049" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-3307809793437076049.png" /&gt;&lt;/p&gt;
&lt;p&gt;So that’s clearly not it, although dropping them clearly does lower the overall quality. But while we’re here let’s just try dropping all the users who’ve put in a location:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;compPeakPlot[IntegerQ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-562637859795717584" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-562637859795717584.png" /&gt;&lt;/p&gt;
&lt;p&gt;And that decreases some of those peak intensities, but only one peak is really washed out significantly. And we’ll just roll through the landscape, then, dropping in timezones, to see who affects what and how much.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;compPeakPlot[Between[{#, # + 1}]] &amp;amp; /@ Range[-12, 12, 2] // 
  ArrayReshape[#, {3, 4}] &amp;amp; // Grid

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-3243486666359046764" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-3243486666359046764.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-3243486666359046764" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-3243486666359046764.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-5279462376805845349" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-5279462376805845349.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-2031720187355632067" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-2031720187355632067.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-1363982948419069043" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-1363982948419069043.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-3243486666359046764" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-3243486666359046764.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-5016894738036978998" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-5016894738036978998.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-5773685333704469464" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-5773685333704469464.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-7549780497994244577" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-7549780497994244577.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-1093665490856256776" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-1093665490856256776.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-6768074355820357664" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-6768074355820357664.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-5996557942667300833" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-5996557942667300833.png" /&gt;&lt;/p&gt;
&lt;p&gt;All told, we can see we don’t have quite enough to determine who is causing what. But we can see that there are timezones with a big effect, chiefly -6, -4, 2 and 10 So let’s look at these on their own:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DateListPlot[
  compPeakData[Between[{#, # + 1}], False][&amp;quot;SmoothData&amp;quot;] &amp;amp; /@ {-6, -4,
    2, 10},
  PlotLegends -&amp;gt; {-6, -4, 2, 10},
  PlotRange -&amp;gt; All
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-5869307934614251792" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-5869307934614251792.png" /&gt;&lt;/p&gt;
&lt;p&gt;And just for ease of viewing let’s split that up:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;MapIndexed[
    DateListPlot[
       Thread[{TimeObject /@ #[[All, 1]], Rescale@#[[All, 2]]}] &amp;amp;@
          TimeSeriesShift[
             compPeakData[Between[{#, # + 1}], False][&amp;quot;SmoothData&amp;quot;],
             Quantity[4 + #, &amp;quot;Hours&amp;quot;]
             ][&amp;quot;DatePath&amp;quot;] // EventSeries,
       PlotLegends -&amp;gt; {#},
       PlotRange -&amp;gt; All,
       PlotStyle -&amp;gt; ColorData[97][First@#2]
       ] &amp;amp;,
    {-6, -4, 2, 10}
    ] // ArrayReshape[#, {2, 2}] &amp;amp; // Grid

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-169882562582482564" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-169882562582482564.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-3229591595150948762" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-3229591595150948762.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-7561309000619229626" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-7561309000619229626.png" /&gt;    &lt;img alt="posts-questions-on-the-mathematica-stack-exchange-part-2-7252690616485916719" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-part-2-7252690616485916719.png" /&gt;&lt;/p&gt;
&lt;p&gt;And finally we get some sense for what’s going on. It seems it’s that early morning period (2-6 AM). Questions posted then are disproportionately likely to be high scoring. So now we can return to our two ideas, but updated to take this into account:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the early morning people ask better questions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the early morning people are more prone to up-voting questions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Proposal: Up-Voting Rates&lt;/h3&gt;
&lt;p&gt;Initially, this would seem to be the more plausible of the two, simply by exclusion. How is it likely that people are asking their best questions early in the morning? Unfortunately we’d need to sample the API at many different time points to get a sense for how true this is (pulling the newest ~50 or so questions) and so that cannot be evaluated right now.&lt;/p&gt;
&lt;h3&gt;Proposal: Better Questions&lt;/h3&gt;
&lt;p&gt;On the other hand, the “better questions” hypothesis isn’t actually as dead as one might think. The reason being that if someone is on the Stack Exchange so late at night it likely means one of two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;they’re clearly committed to it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;they’ve got a problem they spent the evening trying to solve and couldn’t&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of those could plausibly lead to good questions. Even more, though, assuming being up late saps a person of their willingness to dig deep into problems that come up, they may in fact post  &lt;em&gt;&lt;em&gt;easier&lt;/em&gt;&lt;/em&gt;  questions than usual. And easier questions (or, even more generally, broader questions) may have wider appeal.&lt;/p&gt;
&lt;p&gt;Obviously this is an unprovable proposal, where as the up-voting rates is theoretically provable, but I personally think there is something to be said for the “better questions get asked late at night” idea. In any case, it’s been a fun dive into a seemingly simple question: “when do higher-scoring questions get asked” which took a few unanticipated turns.&lt;/p&gt;
&lt;p&gt;‘Til next time.&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>Psi4 4 Mathematica</title><link href="https://b3m2a1.github.io/psi4-4-mathematica.html" rel="alternate"></link><published>2017-07-29T02:57:18-05:00</published><updated>2017-07-30T00:49:22-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-07-29:/psi4-4-mathematica.html</id><summary type="html">&lt;p&gt;We’ll return to doing  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/-pretend-chemistry-and-fake-objects.html#main-content"&gt;fake chemistry&lt;/a&gt; , but this time we’ll work with something that very real chemists have built, namely the open-source quantum chemistry package  &lt;a href="http://www.psicode.org/"&gt;Psi4&lt;/a&gt;  the package itself is voluminous, doing many things I don’t understand and never really will, but it does do some things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We’ll return to doing  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/-pretend-chemistry-and-fake-objects.html#main-content"&gt;fake chemistry&lt;/a&gt; , but this time we’ll work with something that very real chemists have built, namely the open-source quantum chemistry package  &lt;a href="http://www.psicode.org/"&gt;Psi4&lt;/a&gt;  the package itself is voluminous, doing many things I don’t understand and never really will, but it does do some things that every chemist knows and many use or at the minimum enjoy looking at--molecular orbitals and electric potentials. &lt;/p&gt;
&lt;p&gt;Here's a taste of the sort of thing we're talking about:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetOrbitalsPlot[trifluoromethlyoxirane,
  &amp;quot;Orbitals&amp;quot; -&amp;gt; {5},
  &amp;quot;Mode&amp;quot; -&amp;gt; &amp;quot;Cached&amp;quot;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-2540855987582776301" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-2540855987582776301.png" /&gt;&lt;/p&gt;
&lt;p&gt;This is the 5th molecular orbital of  &lt;a href="http://www.chemspider.com/Chemical-Structure.454245.html"&gt;trifluoromethyl-oxirane&lt;/a&gt; , more or less, plotted as a  &lt;a href="https://reference.wolfram.com/language/ref/ContourPlot3D.html"&gt;&lt;code&gt;ContourPlot3D&lt;/code&gt;&lt;/a&gt;  (with stylistic choices taken from  &lt;a href="http://community.wolfram.com/groups/-/m/t/131302?sortMsg=Votes"&gt;Jason Biggs&lt;/a&gt; ) in Mathematica. Note that things are slightly askew -- the lobes and the reference molecule don’t perfectly align, but this is a pretty reasonable orbital, all told. So first let’s break down how this was made, starting with the easiest bits (if you just want the Psi4 integration bits go  &lt;a href="#psi4's-the-1-4-me"&gt;here&lt;/a&gt; ):&lt;/p&gt;
&lt;p&gt;&lt;a id="making-trifluoromethyl-oxirane" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Making Trifluoromethyl oxirane&lt;/h2&gt;
&lt;p&gt;Generally when I play around with this stuff I do it by using stuff I can directly import–-and I did test this code using importable cases—but, for interest sake, I thought I’d try working with a system I knew about but wasn’t importable.&lt;/p&gt;
&lt;p&gt;On the other hand it’s mostly importable:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemImport[methyloxirane] // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-1585593140277608260" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-1585593140277608260.png" /&gt;&lt;/p&gt;
&lt;p&gt;And so we only have to do, say, two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Replace the methyl hydrogens with fluorines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Renormalize those bonds&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And we could do this in a lazy sort of way, say:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Find the hydrogens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove the hydrogens&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create 3 fluorines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move the fluorines in, rebond, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculate fluorine bond vectors, move them along the vector back into place&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But this is a lot of work for just trifluoromethly-oxirane and this sort of operation is just generally pretty useful, so we’ll functionalize it in three chunks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Atom selection by type (e.g. methyl hydrogen)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atom substitution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atomset bond normalization&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Atom Selection&lt;/h3&gt;
&lt;p&gt;This is a more interesting problem in general, really, than just the case of methyl groups, as it can be generalized pretty easily to any group with a core atom. We can basically think of specifying such a group as the following:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;|
  &amp;quot;Core&amp;quot; -&amp;gt; type,
  &amp;quot;Bonds&amp;quot; -&amp;gt; {
     &amp;lt;|&amp;quot;Element&amp;quot; -&amp;gt; el1, &amp;quot;Type&amp;quot; -&amp;gt; type1|&amp;gt;,
     &amp;lt;|&amp;quot;Element&amp;quot; -&amp;gt; el2, &amp;quot;Type&amp;quot; -&amp;gt; type2|&amp;gt;,
     ...,
     &amp;lt;|&amp;quot;Element&amp;quot; -&amp;gt; eln, &amp;quot;Type&amp;quot; -&amp;gt; typen|&amp;gt;
     }
  |&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Or more compactly:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;type -&amp;gt;
  {
    el1 -&amp;gt; type1,
    el2 -&amp;gt; type2,
    ...,
    eln -&amp;gt; typen
    }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And then a methyl group is just:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;quot;C&amp;quot; -&amp;gt;
  {
    &amp;quot;H&amp;quot; -&amp;gt; 1,
    &amp;quot;H&amp;quot; -&amp;gt; 1,
    &amp;quot;H&amp;quot; -&amp;gt; 1,
    _
    }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Since we can (and in fact should) write this to leverage Mathematica’s pattern specifications / matching. And one last thing we’ll find very useful is the ability to add a selection specification to what we’ll take. We’ll let this be a general pattern that will match against the atom type. So for our methyl hydrogens:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;quot;C&amp;quot; -&amp;gt;
  {
     &amp;quot;H&amp;quot; -&amp;gt; 1,
     &amp;quot;H&amp;quot; -&amp;gt; 1,
     &amp;quot;H&amp;quot; -&amp;gt; 1,
     _
     } -&amp;gt; &amp;quot;H&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Simple enough to specify. Now the implementation isn’t too bad, the primary difficulty is to do it in a chunked fashion. Essentially pull in all the data at the beginning rather than at each loop step. The full implementation isn’t worth putting here, but you can find it under  &lt;code&gt;AtomsetAtomMemberQ&lt;/code&gt;  in  &lt;a href="https://github.com/b3m2a1/mathematica-ChemTools/blob/master/Packages/Objects.m"&gt;Objects.m&lt;/a&gt;  essentially after all that we can select atoms that are members of groups in atomsets and there are a few cooked in. What’s relevant right now is how this works for methyl hydrogens:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetGetAtoms[methyloxirane, &amp;quot;Methyl&amp;quot; -&amp;gt; &amp;quot;H&amp;quot;] // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-4100392340054740369" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-4100392340054740369.png" /&gt;&lt;/p&gt;
&lt;p&gt;Basically the  &lt;code&gt;"Methyl"&lt;/code&gt;  says, “find atoms in methly groups” and the  &lt;code&gt;"H"&lt;/code&gt;  says only take the hydrogens from that group. And lo and behold it works. On to part 2.&lt;/p&gt;
&lt;h3&gt;Atom Substitution&lt;/h3&gt;
&lt;p&gt;This is honestly the easiest part of the whole deal. It’s almost as straightforward as can be, easy to vectorize, etc. The basic part is to set the positions of the new atoms to those of the old atoms:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt; AtomsetRemoveAtom[obj, old];
 AtomsetAddAtom[obj, new];
 pos = ChemGet[old, &amp;quot;Position&amp;quot;];
 ChemThreadSet[new, &amp;quot;Position&amp;quot;, pos];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then do the bonds:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;BondBreak /@ DeleteDuplicates@Flatten@bonds;
types = ChemGet[bonds, &amp;quot;Type&amp;quot;];
atoms =
   Replace[
     ChemGet[bonds, &amp;quot;Atoms&amp;quot;],
     ({Alternatives @@ old, a_} | {a_, Alternatives @@ old}) :&amp;gt; a,
     {2}
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And just  &lt;a href="https://reference.wolfram.com/language/ref/MapThread.html"&gt;&lt;code&gt;MapThread&lt;/code&gt;&lt;/a&gt;  a mapped  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/ref/AtomCreateBond.html"&gt;&lt;code&gt;AtomCreateBond&lt;/code&gt;&lt;/a&gt;  over that.&lt;/p&gt;
&lt;h3&gt;Bond Normalization&lt;/h3&gt;
&lt;p&gt;This is the fun part. First of we need a concept of what the “standard” distance is for all these bond types. I’ve accumulated a number of those, by statistically going through PubChem and averaging over bond types. This is integrated into  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/ref/ChemDataLookup.html"&gt;&lt;code&gt;ChemDataLookup&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemDataLookup[ChemDataQuery[&amp;quot;C&amp;quot;, &amp;quot;F&amp;quot;], &amp;quot;BondDistances&amp;quot;]

(*Out:*)

1.34782&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Where these distances should be  &lt;a href="https://reference.wolfram.com/language/ref/Quantity.html"&gt;&lt;code&gt;Quantity&lt;/code&gt;&lt;/a&gt;  expressions with units  &lt;code&gt;"Angstroms"&lt;/code&gt; . But I’m lazy and that adds a mild inefficiency. So we’ll let that be our standard. Note that if there wasn’t a distance in the sample I used we’re screwed:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemDataLookup[ChemDataQuery[&amp;quot;Ne&amp;quot;, &amp;quot;F&amp;quot;], &amp;quot;BondDistances&amp;quot;]

(*Out:*)

-1.&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Also some of these are slightly odd:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemDataLookup[ChemDataQuery[&amp;quot;S&amp;quot;, &amp;quot;F&amp;quot;], &amp;quot;BondDistances&amp;quot;]

(*Out:*)

1.19224&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;But for common cases things are okay. And this data will be updated periodically when time permits.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemDataLookup[
  {
    ChemDataQuery[&amp;quot;C&amp;quot;, &amp;quot;H&amp;quot;],
    ChemDataQuery[&amp;quot;C&amp;quot;, &amp;quot;O&amp;quot;],
    ChemDataQuery[&amp;quot;C&amp;quot;, &amp;quot;N&amp;quot;],
    ChemDataQuery[&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;],
    ChemDataQuery[&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 2],
    ChemDataQuery[&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 3]
    },
  &amp;quot;BondDistances&amp;quot;
  ]

(*Out:*)

{1.02348, 1.29987, 1.42094, 1.42432, 1.35593, 1.2004}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So that’s our normalization. Now we have to figure out what needs to be normalized. We’ll do this by comparing against a tolerance set by the  &lt;a href="https://reference.wolfram.com/language/ref/AccuracyGoal.html"&gt;&lt;code&gt;AccuracyGoal&lt;/code&gt;&lt;/a&gt;  option, where anything whose bond length deviates from the standard by more than that gets normalized.&lt;/p&gt;
&lt;p&gt;And now here’s the interesting part. If we, say, normalize any of the C-C bonds in methyl-oxirane that will screw up all sorts of other bonds. In effect, we need to move one “side” of the bond by the amount of deviation. Where each “side” is really the collection of connected atoms that don’t use the bond. A good example of what I mean is in the documentation for  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/ref/AtomsetConnectedComponents.html"&gt;&lt;code&gt;AtomsetConnectedComponents&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;We’ll do this by building an  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/ref/AtomGraph.html"&gt;&lt;code&gt;AtomGraph&lt;/code&gt;&lt;/a&gt;  of all the atoms in the atomset, taking the edges, and then for each bond we normalize dropping the edge corresponding to it. Then use a simple  &lt;a href="https://reference.wolfram.com/language/ref/ConnectedComponents.html"&gt;&lt;code&gt;ConnectedComponents&lt;/code&gt;&lt;/a&gt;  on that to find our “sides”. Of course, one corner case arises here. Consider this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Graph[
  {
    1 &amp;lt;-&amp;gt; 2,
    2 &amp;lt;-&amp;gt; 3,
    3 &amp;lt;-&amp;gt; 4
    }
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-5611763199457359583" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-5611763199457359583.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now drop the  &lt;code&gt;1 &amp;lt;-&amp;gt; 2&lt;/code&gt;  bond:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Graph[
   {
     2 &amp;lt;-&amp;gt; 3,
     3 &amp;lt;-&amp;gt; 4
     }
   ] // ConnectedComponents

(*Out:*)

{{2, 3, 4}}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We’ve lost the knowledge about 1. So we need an explicit check for that at each loop-step. But otherwise we just need to determine which side is which by figuring out which chunk contains the first atom in the bond.&lt;/p&gt;
&lt;p&gt;Then just move each side equally and in opposite directions so that the tolerance is dealt with.&lt;/p&gt;
&lt;p&gt;Note, of course, that there are some structures, notably ringed structures, for which this method will not suffice. But for most small-molecules, like trifluoromethly-oxirane, this will. &lt;/p&gt;
&lt;p&gt;Now for a demonstration:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemImport[pentane];
AtomsetTransform[pentane, ScalingTransform[{1, 1, 3}]];
pentane // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-8444149889600703777" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-8444149889600703777.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetNormalizeBonds[pentane]
pentane // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-7791321167466445589" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-7791321167466445589.png" /&gt;&lt;/p&gt;
&lt;p&gt;And now checking the bond deviations:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;BondDeviation@Values@AtomsetBonds[pentane]

(*Out:*)

{0., 0., 2.22045*10^-16, 
 2.22045*10^-16, 0.0963753, -6.66134*10^-16, -4.44089*10^-16, \
0.096458, -6.66134*10^-16, 2.22045*10^-16, 
 1.77636*10^-15, -1.55431*10^-15, 0.0718594, 
 1.77636*10^-15, 0.0717659, 4.44089*10^-16}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;They’re mostly all 0, except for 4 of them, and we can see which those are:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Pick[
     #,
     # &amp;gt; .01 &amp;amp; /@ Abs[BondDeviation[#]]
     ] &amp;amp;@Values@AtomsetBonds[pentane] // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-1788405745229544950" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-1788405745229544950.png" /&gt;&lt;/p&gt;
&lt;p&gt;And those are bonds that are in the plane of the chain, and so were likely unscaled by the  &lt;code&gt;ScalingTransform&lt;/code&gt; . That the other two bonds were caught up could be an effect of the odd C-C bond distance I have in my core data, too.&lt;/p&gt;
&lt;h3&gt;Making a trifluoromethly-oxirane&lt;/h3&gt;
&lt;p&gt;And finally with that in place, build and substitute:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;trifluoromethlyoxirane = ChemImport[&amp;quot;methyloxirane&amp;quot;];
subs = Table[CreateAtom[&amp;quot;F&amp;quot;], 3];
AtomsetSubstituteAtom[
   trifluoromethlyoxirane,
   Thread[
     AtomsetGetAtoms[trifluoromethlyoxirane, &amp;quot;Methyl&amp;quot; -&amp;gt; &amp;quot;H&amp;quot;] -&amp;gt;
      subs
     ]
   ];
tfgraphic = trifluoromethlyoxirane // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-5463542750916706943" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-5463542750916706943.png" /&gt;&lt;/p&gt;
&lt;p&gt;And renormalize:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;subbonds =
   DeleteDuplicates@
     Flatten@
       ChemGet[
         AtomsetGetAtoms[trifluoromethlyoxirane,
           &amp;quot;C&amp;quot; -&amp;gt; { &amp;quot;F&amp;quot; -&amp;gt; _, &amp;quot;F&amp;quot; -&amp;gt; _, &amp;quot;F&amp;quot; -&amp;gt; _, _ } -&amp;gt; &amp;quot;F&amp;quot;
           ], 
         &amp;quot;Bonds&amp;quot;
         ];
AtomsetNormalizeBonds[
   trifluoromethlyoxirane,
   subbonds
   ];
Show[trifluoromethlyoxirane // ChemView, tfgraphic]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-2554271558397266408" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-2554271558397266408.png" /&gt;&lt;/p&gt;
&lt;p&gt;And of course we can easily do the same for, say, tribromomethyl-oxirane, which doesn’t seem to have a Chem Spider page:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;tbmo = ChemImport[&amp;quot;methyloxirane&amp;quot;];
subel = &amp;quot;Br&amp;quot;;
subs = Table[CreateAtom[subel], 3];
AtomsetSubstituteAtom[
   tbmo,
   Thread[
     AtomsetGetAtoms[tbmo, &amp;quot;Methyl&amp;quot; -&amp;gt; &amp;quot;H&amp;quot;] -&amp;gt;
      subs
     ]
   ];
subbonds =
   DeleteDuplicates@
     Flatten@
       ChemGet[
         AtomsetGetAtoms[subel,
           &amp;quot;C&amp;quot; -&amp;gt; { subel -&amp;gt; _, subel -&amp;gt; _, subel -&amp;gt; _, _ } -&amp;gt; subel
           ], 
         &amp;quot;Bonds&amp;quot;
         ];
AtomsetNormalizeBonds[
   tbmo,
   subbonds
   ];
tbmo // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-67328113050823263" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-67328113050823263.png" /&gt;&lt;/p&gt;
&lt;p&gt;Or on anything with a methyl group.&lt;/p&gt;
&lt;p&gt;&lt;a id="psi4's-the-1-4-me" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Psi4’s The 1 4 me&lt;/h2&gt;
&lt;p&gt;One of the many nice features of Psi4 is that it’s implemented in C++ rather than Fortran, so not only is the code easily readable to anyone with a decent grounding in modern programming languages ( Java, python, JavaScript, any other C-flavored language). Moreover, that makes it possible to use with  &lt;a href="http://reference.wolfram.com/language/guide/LibraryLink.html.en"&gt;Library Link&lt;/a&gt;  if one so desired. This I did not do. Instead I decided to build a symbolic python system to use with Psi4’s  &lt;a href="http://www.psicode.org/psi4manual/master/psithoninput.html"&gt;Psithon&lt;/a&gt;  interpreter. The vagaries of this system are convoluted and not worth going into here. Here’s just a quick example of what it provides:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Needs[&amp;quot;ChemTools`SymbolicPython`&amp;quot;];
sympy =
  ToSymbolicPython[
    Map[f, Range[100]]
    ]

(*Out:*)

PyList[PyMap[&amp;quot;f&amp;quot;, PyRange[100]]]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we can build this out like so:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;sympy // ToPython

(*Out:*)

&amp;quot;list(map(f, range(100)))&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The symbolic layer is useful as a transform and whatnot, and is also a cleaner syntax to write templates in than strings. And it can be used for OpenBabel too.&lt;/p&gt;
&lt;p&gt;So with that in hand we can actually get around to writing stuff to play with Psi4&lt;/p&gt;
&lt;h3&gt;CubeProp&lt;/h3&gt;
&lt;p&gt;Psi4 has a module that implements calculations that dump to a Gaussian cube file called  &lt;a href="http://www.psicode.org/psi4manual/master/cubeprop.html"&gt;cubeprop&lt;/a&gt;  it’s pretty straightforward and most cubeprop calls have a similar set-up. So we’ll mirror that in our template code and build out a general purpose function called  &lt;code&gt;Psi4CubeProperty&lt;/code&gt;  to implement this transformation.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;psi4In = Psi4CubeProperty[&amp;lt;|&amp;quot;Molecules&amp;quot; -&amp;gt; {{&amp;quot;O&amp;quot;}}|&amp;gt;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-2501598204267374743" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-2501598204267374743.png" /&gt;&lt;/p&gt;
&lt;p&gt;It generates an input file to push through psithon:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;psi4In[&amp;quot;input.dat&amp;quot;]

(*Out:*)

&amp;quot;#Sat 29 Jul 2017 02:13:19\n#Cube prop call\nmolecule monomer {\n\tO \
0. 0. 0.\n\tnoreorient\n\tnocom\n\t}\nset {\n\tbasis cc-pvdz\n\t\
scf_type df\n\tcubeprop_tasks orbitals\n\tcubeprop_orbitals [ 1 ]\n\t\
}\n[ E, wfn ] = energy('scf', return_wfn=True)\ncubeprop(wfn)&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So that’s cool. And then we implement layers on that function for specific useful tasks. For example here’s the code that builds out an orbitals call.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Options[Psi4CubeOrbitals] = Options@Psi4CubeProperty;
Psi4CubeOrbitals[a_Association] :=
   Psi4CubeProperty@
     Merge[{
        Append[a,

      &amp;quot;Configuration&amp;quot; -&amp;gt;

       Merge[{Lookup[a, &amp;quot;Configuration&amp;quot;, &amp;lt;||&amp;gt;],
               &amp;lt;|
                 &amp;quot;CubePropTasks&amp;quot; -&amp;gt; {&amp;quot;orbitals&amp;quot;},

          &amp;quot;CubePropOrbitals&amp;quot; -&amp;gt; {1, -1, 2, -2, 3, -3, 4, -4, 5, -5}
                 |&amp;gt;
               },
              First]
          ],
        &amp;quot;Output&amp;quot; -&amp;gt; &amp;quot;Psi_*.cube&amp;quot;
        },
       First];
Psi4CubeOrbitals[atomList_List, orbitals : {__Integer} : {1}, 
   p : (_Rule | _RuleDelayed) ...] :=
   Psi4CubeOrbitals@
     &amp;lt;|
       &amp;quot;Molecules&amp;quot; -&amp;gt; atomList,
       &amp;quot;CubePropOrbitals&amp;quot; -&amp;gt; orbitals,
       p
       |&amp;gt;;
Psi4CubeOrbitals[atomList_List, orbitals_Integer, 
  p : (_Rule | _RuleDelayed) ...] :=

 Psi4CubeOrbitals[atomList, Join[#, -#] &amp;amp;@Range[orbitals]]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The options handling gets a bit convoluted, but otherwise it’s really very standard. And then we build a layer on the atomset side to call Psi4 to get these orbitals:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetOrbitalsPlot[
  trifluoromethlyoxirane,
  &amp;quot;Orbitals&amp;quot; -&amp;gt; {1},
  &amp;quot;Mode&amp;quot; -&amp;gt; 
  &amp;quot;Cached&amp;quot; (* tells the system to save the computed orbital functions \
*)
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-8285460256702348359" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-8285460256702348359.png" /&gt;&lt;/p&gt;
&lt;p&gt;And this can, of course, be configured for arbitrary set ups.&lt;/p&gt;
&lt;h3&gt;Cube Files&lt;/h3&gt;
&lt;p&gt;One complication does arise, though, in that we need a way to handle Gaussian cube files. So I wrote a collection of  &lt;code&gt;CubeFile*&lt;/code&gt;  functions that handle most of this dirty work. For each cube file what actually gets pushed through to the end is an  &lt;a href="https://reference.wolfram.com/language/ref/InterpolatingFunction.html"&gt;&lt;code&gt;InterpolatingFunction&lt;/code&gt;&lt;/a&gt;  over the cube, so we could actually do funky things like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;oneminustwo =
   With[{orbs =
       Values@
         AtomsetOrbitals[
           trifluoromethlyoxirane,
           &amp;quot;Orbitals&amp;quot; -&amp;gt; 2,
           &amp;quot;Mode&amp;quot; -&amp;gt; &amp;quot;Cached&amp;quot;
           ]
      },
     Compile[{{p, _Real, 1}},
       orbs[[1]][p] -
         orbs[[2]][p]
       ]
     ];
AtomsetOrbitalsPlot[
  trifluoromethlyoxirane,
  {oneminustwo}
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-7843640030057352736" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-7843640030057352736.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which is the subtraction of two orbitals. This is obviously just a basic example, but there is power in being able to work with these orbitals as the functions that they are.&lt;/p&gt;
&lt;p&gt;Alternatively we can do this plot as a  &lt;code&gt;ListDensityPlot3D&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetOrbitalsPlot[
   trifluoromethlyoxirane,
   {oneminustwo},
   &amp;quot;PlotFunction&amp;quot; -&amp;gt; &amp;quot;Density&amp;quot;
   ] // Rasterize(*to speed up rendering since we don't need to \
manipulate it*)

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-6108137519702443272" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-6108137519702443272.png" /&gt;&lt;/p&gt;
&lt;p&gt;And it’s harder to see exactly what’s happening. But we can see the two super localized blobs near those two fluorines.&lt;/p&gt;
&lt;h3&gt;Electric Potentials&lt;/h3&gt;
&lt;p&gt;Psi4 exposes a lot more than just the cubeprop module, but most of that will have to wait for another post (and likely some more development on my side). One final fun thing to look at, though, is comparing electric potentials across similar.&lt;/p&gt;
&lt;p&gt;We can start with the first-approximation Gasteiger version:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetElectricPotentialMap[#, &amp;quot;Mode&amp;quot; -&amp;gt; &amp;quot;Gasteiger&amp;quot;] &amp;amp; /@ {
    methyloxirane,
    trifluoromethlyoxirane,
    tbmo
    } // GraphicsRow

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-3139807658775850902" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-3139807658775850902.png" /&gt;&lt;/p&gt;
&lt;p&gt;It’s a bit small, but we can see pretty clearly that it’s doing a decent job. All of that seems reasonable. But let’s just see what the real version looks like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetElectricPotentialMap[#, &amp;quot;Mode&amp;quot; -&amp;gt; &amp;quot;Psi4&amp;quot;] &amp;amp; /@ {
    methyloxirane,
    trifluoromethlyoxirane,
    tbmo
    } // GraphicsRow

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts-psi4-4-mathematica-7974393243239400710" src="https://b3m2a1.github.io/img/posts-psi4-4-mathematica-7974393243239400710.png" /&gt;&lt;/p&gt;
&lt;p&gt;It takes a lot longer, but the quality of the result is better. This is an electric potential we can actually start to work with. And, in fact, since we have it as an  &lt;code&gt;InterpolatingFunction&lt;/code&gt;  we easily could manipulate these potentials and compare them on a point-by-point basis.&lt;/p&gt;
&lt;p&gt;But for now we’ll leave things as they are and come back to Psi4 another day.&lt;/p&gt;</content><category term="mathematica"></category><category term="psi4"></category></entry><entry><title>Pretend Chemistry and Fake Objects</title><link href="https://b3m2a1.github.io/-pretend-chemistry-and-fake-objects.html" rel="alternate"></link><published>2017-07-27T00:47:55-05:00</published><updated>2017-07-30T00:48:07-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-07-27:/-pretend-chemistry-and-fake-objects.html</id><summary type="html">&lt;p&gt;I enjoy pretending to work with data whenever possible, be it a data scientist digging  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/questions-on-the-mathematica-stack-exchange.html"&gt;scraping and analyzing data from Stack Exchange &lt;/a&gt; or a looking at JPL spectra, but by far my favorite data to pretend to work with is wholly pretend chemical data. In fact, I like that so …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I enjoy pretending to work with data whenever possible, be it a data scientist digging  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1/home/questions-on-the-mathematica-stack-exchange.html"&gt;scraping and analyzing data from Stack Exchange &lt;/a&gt; or a looking at JPL spectra, but by far my favorite data to pretend to work with is wholly pretend chemical data. In fact, I like that so much I wrote a  &lt;a href="http://www.wolframcloud.com/objects/b3m2a1.paclets/paclets/PacletServer/Paclets/ChemTools-1.1.1.paclet"&gt;whole package&lt;/a&gt;  so I could pretend to work with it better.&lt;/p&gt;
&lt;p&gt;The core of my package is a system to do object-oriented chemical modeling, but of course, with anything object-oriented we need a system for managing these objects. And with Mathematica this is not a trivial problem for two few reasons:&lt;/p&gt;
&lt;h3&gt;Code as data plays poorly with mutability&lt;/h3&gt;
&lt;p&gt;This is a pretty straight-forward observation. Except for a few odd instances:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Keys@
  Select[
   AssociationThread[
    Names[&amp;quot;System`*&amp;quot;],
    Quiet[
     ToExpression[Names[&amp;quot;System`*&amp;quot;], StandardForm, FormatValues]]
    ],
   Not@*FreeQ[&amp;quot;Interpretable&amp;quot; -&amp;gt; False]
   ] // ToExpression

(*Out:*)

{ActiveClassificationObject, ActivePredictionObject, \
BayesianMaximizationObject, BayesianMinimizationObject, ByteArray, \
ClassifierFunction, ClassifierMeasurementsObject, \
ContinuousWaveletData, DimensionReducerFunction, DiscreteWaveletData, \
EntityStore, FeatureDistance, FeatureExtractorFunction, \
InterpolatingFunction, LiftingFilterData, LinearSolveFunction, \
NearestFunction, OptimumFlowData, ParametricFunction, \
PredictorFunction, PredictorMeasurementsObject, \
SequencePredictorFunction, SparseArray, StructuredArray}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Mathematica lives by the  &lt;a href="https://en.wikipedia.org/wiki/Homoiconicity"&gt;code-as-data&lt;/a&gt;  paradigm. Which I prefer to think of “if you can copy it, you can use it”, because I’m a trash programmer. What this means practically for us is that it’s impossible to mutate most of what we see or work with. In fact, the only truly mutable things in Mathematica are its  &lt;a href="https://reference.wolfram.com/language/tutorial/ValuesForSymbols.html"&gt;&lt;code&gt;Symbols&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;This leads us to the fact that whatever we do, it will have be be either symbol based or managed by some other subsystem, such as a file-backed system (see  &lt;a href="https://reference.wolfram.com/language/ref/LocalObject.html"&gt;&lt;code&gt;LocalObject&lt;/code&gt;&lt;/a&gt;  or, if my spelunking is correct,  &lt;a href="https://reference.wolfram.com/language/ref/ResourceObject.html"&gt;&lt;code&gt;ResourceObject&lt;/code&gt;&lt;/a&gt; ) or Java (see JLink).&lt;/p&gt;
&lt;p&gt;The  &lt;code&gt;Symbol&lt;/code&gt; -based system seems to me to be the nicest way to do this. The question though, is how to do this well. Because we have another problem.&lt;/p&gt;
&lt;h3&gt;Mathematica is slow&lt;/h3&gt;
&lt;p&gt;Obviously some (much?) of Mathematica is  &lt;a href="https://mathematica.stackexchange.com/q/148759/38205"&gt;blazing fast&lt;/a&gt; . The problem is that all of that some is implemented at a low-level. And generally the slowness isn’t an issue. You can do so much with the internal stuff and with good  &lt;a href="https://reference.wolfram.com/language/guide/FunctionalProgramming.html"&gt;&lt;code&gt;functional-programming&lt;/code&gt;&lt;/a&gt;  design. But if we’re using a  &lt;code&gt;Symbol&lt;/code&gt; -based system for managing objects and their properties this slowness quickly comes to get us. Consider the case of adding rules to a list:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$obj = {};
Do[AppendTo[$obj, RandomReal[] -&amp;gt; RandomReal[]], 
  10000] // AbsoluteTiming

(*Out:*)

{2.48031, Null}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This nixes a  &lt;code&gt;Rule&lt;/code&gt; -based system to my mind.&lt;/p&gt;
&lt;p&gt;On the other hand, we can use an  &lt;code&gt;Association&lt;/code&gt;  and get a lot better performance:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$obj = &amp;lt;||&amp;gt;;
Do[$obj[RandomReal[]] = RandomReal[], 10000] // RepeatedTiming

(*Out:*)

{0.056, Null}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;That’s really not terrible, but unfortunately with things like inheritance and lookups in the mix things get hairier. Consider an object with three ancestors:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$anc1 = AssociationThread[RandomReal[1, 10000], 
   RandomReal[1, 10000]];
$anc2 = AssociationThread[RandomReal[1, 10000], 
   RandomReal[1, 10000]];
$anc3 = AssociationThread[RandomReal[1, 10000], 
   RandomReal[1, 10000]];
obj = AssociationThread[RandomReal[1, 10000], RandomReal[1, 10000]];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Let’s try looking up properties in the object, falling back to the ancestors if it’s not found:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;lookup[prop_] :=
   Lookup[$obj, prop,
     Lookup[$anc1, prop,
       Lookup[$anc2, prop,
         Lookup[$anc3, prop]
         ]
       ]
     ];
Do[lookup[RandomReal[]];, 10000] // AbsoluteTiming

(*Out:*)

{6.02145, Null}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;That is very slow. Obviously this is a semi-pathological case as each call is expected to bottom out, thus requiring 4 calls per  &lt;code&gt;Lookup&lt;/code&gt; , but it’s still a good illustration of the performance we’re up against. And if we want to include any implicit method binding we’re gonna have some further issues.&lt;/p&gt;
&lt;p&gt;On the other hand as long as we’re careful with our object design / usage we should be able to get through this largely unscathed.&lt;/p&gt;
&lt;p&gt;&lt;a id="implementing-an-object-system" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Implementing an Object System&lt;/h2&gt;
&lt;p&gt;We’ll set this up to use a similar system to Python. That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Objects have types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods get bound to objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are properties which are bound methods that evaluate when accessed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Objects are glorified hash-maps&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But for the performance reasons stated above we’ll add one more thing that python doesn’t have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything important is vectorized (i.e. can be done over vectors)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That means setting properties is vectorized, getting properties is vectorized, core object methods are vectorized, etc. &lt;/p&gt;
&lt;p&gt;If we do this right we can go from this performance:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$obj1 = &amp;lt;||&amp;gt;;
MapIndexed[Function[$obj1[#] = #2], Alphabet[]] // 
  RepeatedTiming // First

(*Out:*)

0.00012&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;to this type of performance:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$obj2 = &amp;lt;||&amp;gt;;
$obj2 = $obj2~Join~AssociationThread[Alphabet[], List /@ Range[26]] //
    RepeatedTiming // First

(*Out:*)

0.000083&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which will pay dividends as things methods get more and more complex.&lt;/p&gt;
&lt;p&gt;I’ll detail how one makes such an object system in a future post.&lt;/p&gt;
&lt;p&gt;&lt;a id="pretend-chemistry" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Pretend Chemistry&lt;/h2&gt;
&lt;h3&gt;Molecule Basics&lt;/h3&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;lt;&amp;lt; ChemTools` (*Load the package*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;With our objects in place we can start by just making an  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/guide/ChemAtomObject.html"&gt;&lt;code&gt;Atom&lt;/code&gt;&lt;/a&gt;  to play with:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;H1 = CreateAtom[]
H1 // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-8043433411396612208" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-8043433411396612208.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-1133207688272545070" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-1133207688272545070.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then we can make another one and make a  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/guide/BondObject.html"&gt;&lt;code&gt;Bond&lt;/code&gt;&lt;/a&gt;  between the two:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;H2 = CreateAtom[
   &amp;quot;H&amp;quot;, {ChemDataLookup[ChemDataQuery[&amp;quot;H&amp;quot;, &amp;quot;H&amp;quot;], &amp;quot;BondDistances&amp;quot;], 0, 
    0}];
bond = AtomCreateBond[H1, H2];
ChemView[{H1, H2, bond}]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-4709321471548277879" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-4709321471548277879.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we can stick the atoms in an  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/guide/AtomsetObject.html"&gt;&lt;code&gt;Atomset&lt;/code&gt;&lt;/a&gt;  container:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;hydrogen = CreateAtomset[{H1, H2}];
hydrogen // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-3873111683418317041" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-3873111683418317041.png" /&gt;&lt;/p&gt;
&lt;p&gt;And the fun thing about the mutability here is we can mutate this molecule, but have it be the same thing:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;hydrogen // InputForm;
ChemAnimate[
  hydrogen (*object*),
  ChemRotate[2 \[Pi]/36] (*action*),
  36 (*steps*),
  &amp;quot;ChemViewOptions&amp;quot; -&amp;gt;
    {
      ViewPoint -&amp;gt; {0, 0, 5},
      SphericalRegion -&amp;gt; True,
      ImageSize -&amp;gt; 200
      }
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-6024403006935030645" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-6024403006935030645.gif" /&gt;&lt;/p&gt;
&lt;p&gt;The hydrogen is rotating, no doubt. But it’s always the exact same object, which lets us mutate it with  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/ref/ChemRotate.html"&gt;&lt;code&gt;ChemRotate&lt;/code&gt;&lt;/a&gt;  without losing the object. As a further illustration we’ll just move the thing and see that its core data changes, but the object remains the same:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;hydrogen0 = hydrogen;
ChemGet[ChemGet[hydrogen, &amp;quot;Atoms&amp;quot;], &amp;quot;Position&amp;quot;]
AtomsetMove[hydrogen, {0, 0, 1}]
ChemGet[ChemGet[hydrogen, &amp;quot;Atoms&amp;quot;], &amp;quot;Position&amp;quot;]
hydrogen0 === hydrogen

(*Out:*)

{{0, 0, 0}, {1, 0, 0}}

(*Out:*)

{{0, 0, 1}, {1, 0, 1}}

(*Out:*)

True&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So the positions change, but the object remains the same. And we can see why:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;hydrogen // InputForm

(*Out:*)

ChemObject[&amp;quot;System-default-dd404642-ef6b-4981-9313-a884bff5bce8&amp;quot;, 
 &amp;quot;Atomset-6-7fa0bcf3-ea91-46bd-a844-c8b65833daba&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;All it is is a pointer. And we can look at the core data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$ChemicalSystems[
  &amp;quot;System-default-dd404642-ef6b-4981-9313-a884bff5bce8&amp;quot;,
  &amp;quot;Atomset-6-7fa0bcf3-ea91-46bd-a844-c8b65833daba&amp;quot;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-6300440637767489451" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-6300440637767489451.png" /&gt;&lt;/p&gt;
&lt;p&gt;And as planned, the object is just a glorified  &lt;code&gt;Association&lt;/code&gt; . Except, again, as planned, everything is vectorized. Consider the way we got our atom positions. It was a vectorized call. And we can set in a threaded, vectorized manner, too:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemThreadSet[
   ChemGet[hydrogen, &amp;quot;Atoms&amp;quot;],
   &amp;quot;Position&amp;quot;,
   {{0, 0, 0}, {1, 0, 0}}
   ];
ChemGet[ChemGet[hydrogen, &amp;quot;Atoms&amp;quot;], &amp;quot;Position&amp;quot;]

(*Out:*)

{{0, 0, 0}, {1, 0, 0}}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And here’s the benefit of this. Let’s make 1000 fluorine atoms and permute their positions randomly:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AbsoluteTiming[
  fluorines = 
    CreateAtom[
     Thread[{&amp;quot;F&amp;quot;, RandomReal[{-10, 10}, {1000, 3}]}]];] // First

(*Out:*)

0.616614

timeVec =
  RepeatedTiming[
   ChemThreadSet[fluorines, &amp;quot;Position&amp;quot;, 
    RandomReal[{-10, 10}, {1000, 3}]]] // First

(*Out:*)

0.0096&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Doing that one-by-one:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;timeMap =
  RepeatedTiming[
     MapThread[
       ChemSet[#, &amp;quot;Position&amp;quot;, #2] &amp;amp;,
       {
         fluorines,
         RandomReal[{-10, 10}, {1000, 3}]
         }
       ]] // First

(*Out:*)

0.017

timeMap/timeVec

(*Out:*)

1.8&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;That’s a speed-up of almost 100%. Of course, it’s not always possible to permute positions all at once, but there are many problems whose implementations can be rewritten in such a way.&lt;/p&gt;
&lt;h3&gt;Pretend Chemistry with Pretend Potentials&lt;/h3&gt;
&lt;p&gt;One definite pleasure of working with Mathematica is the sheer volume of things it exposes natively. On that front we have not only a native link to  &lt;a href="http://reference.wolfram.com/language/ref/service/PubChem.html"&gt;PubChem&lt;/a&gt;  but also some nice  &lt;a href="http://reference.wolfram.com/language/ref/Compile.html"&gt;pseudo-compilation&lt;/a&gt;  and some attractive  &lt;a href="http://reference.wolfram.com/language/ref/ListSliceDensityPlot3D.html"&gt;plotting over surfaces&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Which means we can do cool stuff like easily import a molecule from PubChem:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ChemImport[methyloxirane];
ChemView[methyloxirane]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-6568244822652880682" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-6568244822652880682.png" /&gt;&lt;/p&gt;
&lt;p&gt;But we can then also compile a function that plots its potential according to its  &lt;a href="https://openbabel.org/wiki/Gasteiger-Marsili"&gt;Gasteiger charges&lt;/a&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetElectricPotential[methyloxirane]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-6022627865279295422" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-6022627865279295422.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then plot that over its van der Waals surface:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetElectricPotentialMap[methyloxirane]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-7586369624232882563" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-7586369624232882563.png" /&gt;&lt;/p&gt;
&lt;p&gt;And while there are obviously some sticky implementation details involved in, say, computing the Gasteiger charges, most everything involved in this can be done in fewer than 5 lines of code, which makes the life of the pretend chemist a lot easier.&lt;/p&gt;
&lt;h3&gt;Pretend Chemistry meets Pretend Data-science&lt;/h3&gt;
&lt;p&gt;But really that’s just a starting point for pretend science. We can do things one better by doing things like statistical surveys over whole classes of compounds. Maybe we’ll start with pulling in all our alkanes and their PubChem IDs (so we can sort out the ones without IDs):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;alkanes = EntityList@EntityClass[&amp;quot;Chemical&amp;quot;, &amp;quot;Alkanes&amp;quot;];
alkids = ChemDataLookup[alkanes, &amp;quot;PubChemIDs&amp;quot;];
idalks = Pick[alkanes, MatchQ[_Integer] /@ alkids];
idalks~Take~5 // Map[CommonName]

(*Out:*)

{&amp;quot;2,2,4,6,6-pentamethylheptane&amp;quot;, &amp;quot;dodecylcyclohexane&amp;quot;, \
&amp;quot;trans-p-menthane&amp;quot;, &amp;quot;spiropentane&amp;quot;, &amp;quot;1,1-dimethylcyclopentane&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So for most of these things we should be able to get a good 3D structure:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;alkobs = DeleteCases[ChemImport@idalks, $Failed];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we’ll upload these to the cloud for later access (the  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/ChemTools/ref/AtomsetWrapper.html"&gt;&lt;code&gt;AtomsetWrapper&lt;/code&gt;&lt;/a&gt;  is a code-as-data wrapper that copies in the atomset data):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;alkcache = alkobs // Map[AtomsetWrapper];
CloudExport[alkcache, &amp;quot;MX&amp;quot;, &amp;quot;alkane_object_uploads.mx&amp;quot;, 
 Permissions -&amp;gt; &amp;quot;Public&amp;quot;]

(*Out:*)

CloudObject[&amp;quot;https://www.wolframcloud.com/objects/user-affd7b1c-ecb6-\
4ccc-8cc4-4d107e2bf04a/alkane_object_uploads.mx&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you want to import these for your own use (beware -- this remains unvectorized and so is slow):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;alkobs =
   Map[
     CreateAtomset,
     CloudImport@
       &amp;quot;https://www.wolframcloud.com/objects/b3m2a1/alkane_object_\
uploads.mx&amp;quot;
     ];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now let’s just look at some simple statistics&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;alkobs // Length (* Number of molecules *)

alkatels = 
  ChemGet[ChemGet[alkobs, &amp;quot;Atoms&amp;quot;], 
   &amp;quot;Element&amp;quot;]; (* Atom types *)
alkatels // 
 Floor@*Mean@*Map[Length] (* Mean number of atoms *)
alkatels // 
 Floor@*Mean@*
  Map[Length@*Cases[&amp;quot;C&amp;quot;]] (* Mean number of carbons *)
alkatels // 
 Floor@*Mean@*Map[Length@*Cases[&amp;quot;H&amp;quot;]] (* Mean number of hydrogens *)

(*Out:*)

333

(*Out:*)

30

(*Out:*)

10

(*Out:*)

20&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which gives us a sense for what we’re working with. From this we know our mean  &lt;a href="https://chem.libretexts.org/Core/Organic_Chemistry/Alkenes/Properties_of_Alkenes/Degree_of_Unsaturation"&gt;degree of unsaturation&lt;/a&gt;  will be:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;degUnsat[c_Integer, h_Integer] :=
   (2 c + 2 - h)/2;
degUnsat[m_List] :=

  degUnsat[Length@Cases[m, &amp;quot;C&amp;quot;], Length@Cases[m, &amp;quot;H&amp;quot;]];
degUnsat[10, 20]

(*Out:*)

1&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Which is weird, because we explicitly asked for alkanes, but ah well. I guess we’re just workign with hydrocarbons now. In any case, that means most of these things have either a double bond or a ring. Let’s just look at the spread of that:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;degsUn = degUnsat /@ alkatels;
Histogram[degsUn]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-2764214646475934148" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-2764214646475934148.png" /&gt;&lt;/p&gt;
&lt;p&gt;So really most of our sample is saturated alkanes and the small number of highly unsaturated hydrocarbons brings it down to the a DoU of 1.&lt;/p&gt;
&lt;p&gt;And just for interest sake we’ll look at those 2 cases where the DoU is 5:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-5689059598210857360" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-5689059598210857360.png" /&gt;&lt;/p&gt;
&lt;p&gt;And they’re both rather exotic species. The former being an interesting compound called  &lt;a href="https://pubchem.ncbi.nlm.nih.gov/compound/Cubane"&gt;cubane&lt;/a&gt;  and the latter being  &lt;a href="https://pubchem.ncbi.nlm.nih.gov/compound/Cyclooctatetraene#section=Top"&gt;cyclooctatetranene&lt;/a&gt;  a classic example of  &lt;em&gt;&lt;em&gt;anti&lt;/em&gt;&lt;/em&gt; -aromaticity. Both of which have the chemical formula C8H8.&lt;/p&gt;
&lt;p&gt;Now as a final example of basic statistics we’ll look at mean bond lengths:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;alkbls = AtomsetMeanBondLengths[#, &amp;quot;Type&amp;quot;] &amp;amp; /@ alkobs;

Merge[alkbls, Mean]
Merge[Pick[alkbls, 
  degUnsat[#] == 0 &amp;amp; /@ alkatels], Mean] (* DoU = 0 *)
Merge[
 Pick[alkbls, 
  degUnsat[#] == 1 &amp;amp; /@ alkatels], Mean] (* DoU = 1 *)
Merge[
 Pick[alkbls, 
  degUnsat[#] == 2 &amp;amp; /@ alkatels], Mean] (* DoU = 2 *)
Merge[
 Pick[alkbls, 
  degUnsat[#] &amp;gt;= 3 &amp;amp; /@ alkatels], Mean] (* DoU \[GreaterEqual] 3 *)

(*Out:*)

&amp;lt;|{&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.53156, {&amp;quot;H&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.09534, {&amp;quot;C&amp;quot;, &amp;quot;S&amp;quot;, 1} -&amp;gt;
   1.82033, {&amp;quot;H&amp;quot;, &amp;quot;S&amp;quot;, 1} -&amp;gt; 1.34111, {&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 2} -&amp;gt; 
  1.33938, {&amp;quot;C&amp;quot;, &amp;quot;Br&amp;quot;, 1} -&amp;gt; 1.87237, {&amp;quot;C&amp;quot;, &amp;quot;O&amp;quot;, 1} -&amp;gt; 
  1.4219, {&amp;quot;H&amp;quot;, &amp;quot;O&amp;quot;, 1} -&amp;gt; 0.972688|&amp;gt;

(*Out:*)

&amp;lt;|{&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.53617, {&amp;quot;H&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.09552, {&amp;quot;C&amp;quot;, &amp;quot;S&amp;quot;, 1} -&amp;gt;
   1.82033, {&amp;quot;H&amp;quot;, &amp;quot;S&amp;quot;, 1} -&amp;gt; 1.34111|&amp;gt;

(*Out:*)

&amp;lt;|{&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.52729, {&amp;quot;H&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.09552|&amp;gt;

(*Out:*)

&amp;lt;|{&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.52987, {&amp;quot;H&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.09534|&amp;gt;

(*Out:*)

&amp;lt;|{&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.52671, {&amp;quot;H&amp;quot;, &amp;quot;C&amp;quot;, 1} -&amp;gt; 1.09336, {&amp;quot;C&amp;quot;, &amp;quot;C&amp;quot;, 2} -&amp;gt;
   1.33931|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So somehow our data is doubly weird. Not only is it not all alkanes, it’s not even all hydrocarbons:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Pick[alkobs, MemberQ[Except[&amp;quot;H&amp;quot; | &amp;quot;C&amp;quot;]] /@ alkatels] // Length
Pick[alkobs, MemberQ[Except[&amp;quot;H&amp;quot; | &amp;quot;C&amp;quot;]] /@ alkatels]~Take~5 // 
 Map[ChemView]

(*Out:*)

13

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-4412591671633706930" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-4412591671633706930.png" /&gt;&lt;/p&gt;
&lt;p&gt;and we would look at that more if we weren't doing pretend chemistry. But there are some other interesting things here to look at. For instance, our sample contains nothing with a triple bond, which is interesting, but a good thing in what was supposed to be alkanes.&lt;/p&gt;
&lt;p&gt;On the other hand, it’s cool to see that the single and double bond lengths gleaned from this match with the expected values quite well, so that is some confirmation for what we did.&lt;/p&gt;
&lt;h3&gt;Pretend Potentials and Pretend Data-science&lt;/h3&gt;
&lt;p&gt;With that nice and played with, let’s move on to an even bigger joke. We’ll look at the Gasteiger electric potentials for straight alkane chains.&lt;/p&gt;
&lt;p&gt;So first off, we need to find the 320 of our  &lt;code&gt;alkobs&lt;/code&gt;  that are actually hydrocarbons. Then we’ll get the graphs of their carbon atoms so we can look at the branching:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;hydobs = Pick[alkobs, FreeQ[&amp;quot;S&amp;quot; | &amp;quot;Br&amp;quot; | &amp;quot;O&amp;quot;] /@ alkatels];
hydatels = Select[alkatels, FreeQ[&amp;quot;S&amp;quot; | &amp;quot;Br&amp;quot; | &amp;quot;O&amp;quot;]];
hydgraphs = 
  AtomGraph@
     ChemSelect[ChemGet[#, &amp;quot;Atoms&amp;quot;], &amp;quot;Element&amp;quot;, MatchQ[&amp;quot;C&amp;quot;]] &amp;amp; /@ 
   hydobs;
hydgraphs~Take~3

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-158966636736987118" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-158966636736987118.png" /&gt;&lt;/p&gt;
&lt;p&gt;And all three of these clearly need to be dropped, because they branch. We can compute that by figuring out the max chain length and comparing it to the number of nodes:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;straighthydobs =
   Pick[hydobs,
     Max[Flatten@#] === Length[#] - 1 &amp;amp;@*GraphDistanceMatrix /@ 
    hydgraphs
     ];
straighthydobs~Take~5 // Map[ChemView]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-243256916633388502" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-243256916633388502.png" /&gt;&lt;/p&gt;
&lt;p&gt;And unfortunately we do only have like 17 of these, but that’s okay. Having so few may even be helpful. We’ll now reorient all of them so they align with one another:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;AtomsetAxisAlign[#, &amp;quot;A&amp;quot; -&amp;gt; &amp;quot;X&amp;quot;] &amp;amp; /@ straighthydobs;
straighthydobs // ChemView

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-9108904329973232438" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-9108904329973232438.png" /&gt;&lt;/p&gt;
&lt;p&gt;And now just for fun we’ll calculate their sum electric potential:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;pots = AtomsetElectricPotential /@ straighthydobs;
pot =
  With[{pots = pots},
    Compile[{{p, _Real, 1}},
      Total[Through[pots[p]]]
      ]
    ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-6593573407858417441" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-6593573407858417441.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we can plot it, just a standard  &lt;code&gt;DensityPlot3D&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;straightbounds = {-2, 2} + MinMax@Flatten@# &amp;amp; /@ 
   Transpose[AtomsetBounds /@ straighthydobs];
DensityPlot3D[pot[{x, y, z}],
  Evaluate@Prepend[straightbounds[[1]], x],
  Evaluate@Prepend[straightbounds[[2]], y],
  Evaluate@Prepend[straightbounds[[3]], z]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="posts--pretend-chemistry-and-fake-objects-9004423531869264030" src="https://b3m2a1.github.io/img/posts--pretend-chemistry-and-fake-objects-9004423531869264030.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which gives pretty much what we’d expect, a blobby caterpillar, growing towards the middle.&lt;/p&gt;
&lt;p&gt;We can obviously do lots more pretend chemistry, but that suffices, I think, for now, as a good sample of what a nice mixture of OOP and Mathematica can do.&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>Questions on The Mathematica Stack Exchange</title><link href="https://b3m2a1.github.io/questions-on-the-mathematica-stack-exchange.html" rel="alternate"></link><published>2017-07-25T22:41:45-05:00</published><updated>2017-07-26T00:18:07-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-07-25:/questions-on-the-mathematica-stack-exchange.html</id><summary type="html">&lt;p&gt;Having built out a framework for developing custom hook-ins to  &lt;a href="https://reference.wolfram.com/language/ref/ServiceConnect.html"&gt;&lt;code&gt;ServiceConnect&lt;/code&gt;&lt;/a&gt;  it’s worth now seeing what we can do with that. There are lots of interesting APIs to connect to, of course, but we’ll start with a relatively simple one, the  &lt;a href="https://api.stackexchange.com/"&gt;Stack Exchange API&lt;/a&gt; . The API is simple …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having built out a framework for developing custom hook-ins to  &lt;a href="https://reference.wolfram.com/language/ref/ServiceConnect.html"&gt;&lt;code&gt;ServiceConnect&lt;/code&gt;&lt;/a&gt;  it’s worth now seeing what we can do with that. There are lots of interesting APIs to connect to, of course, but we’ll start with a relatively simple one, the  &lt;a href="https://api.stackexchange.com/"&gt;Stack Exchange API&lt;/a&gt; . The API is simple, as is the authentication procedure, and it’s easy to understand the data we pull out, making it a good test case. We’ll start by connecting via my service connection. If you don’t have the connection you can install it like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletInstall@
   URLBuild@{
      &amp;quot;http://www.wolframcloud.com/objects/b3m2a1.paclets/paclets/\
PacletServer/Paclets&amp;quot;,
      &amp;quot;ServiceConnection_StackExchange-1.0.0.paclet&amp;quot;
      };&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;With that installed you can proceed to connect:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so = ServiceConnect[&amp;quot;StackExchange&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This will pop open an authentication dialog, where you click on the Go to StackExchange button, authorize the connection, and it redirects you to a URL where it displays the code to copy in:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-3093928153281616400" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-3093928153281616400.png" /&gt;&lt;/p&gt;
&lt;p&gt;Copying that in and clicking Done&lt;/p&gt;
&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-3799677074761150792" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-3799677074761150792.png" /&gt;&lt;/p&gt;
&lt;p&gt;And we're rewarded with our connection&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-5256820125531561304" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-5256820125531561304.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now we can start to do stuff of real interest.&lt;/p&gt;
&lt;p&gt;&lt;a id="importing-the-stack-exchange" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Importing the Stack Exchange&lt;/h2&gt;
&lt;p&gt;Eventually we’ll get to some proper analysis of Stack Exchange data with this connection, but first we’ll look at the connection itself.&lt;/p&gt;
&lt;p&gt;As with all the connections it supports the  &lt;code&gt;"Requests"&lt;/code&gt;  meta request:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;Requests&amp;quot;]

(*Out:*)

{&amp;quot;AnswerQuestion&amp;quot;,&amp;quot;Answers&amp;quot;,&amp;quot;Authentication&amp;quot;,&amp;quot;Comment&amp;quot;,&amp;quot;ID&amp;quot;,&amp;quot;Information&amp;quot;,&amp;quot;Logout&amp;quot;,&amp;quot;Me&amp;quot;,&amp;quot;Messages&amp;quot;,&amp;quot;Name&amp;quot;,&amp;quot;Notifications&amp;quot;,&amp;quot;QueryContinue&amp;quot;,&amp;quot;QueryIterate&amp;quot;,&amp;quot;QuestionAnswers&amp;quot;,&amp;quot;QuestionComments&amp;quot;,&amp;quot;Questions&amp;quot;,&amp;quot;QuotaMax&amp;quot;,&amp;quot;QuotaRemaining&amp;quot;,&amp;quot;RawRequests&amp;quot;,&amp;quot;RequestData&amp;quot;,&amp;quot;RequestParameters&amp;quot;,&amp;quot;Search&amp;quot;,&amp;quot;SiteEvents&amp;quot;,&amp;quot;SiteInfo&amp;quot;,&amp;quot;Sites&amp;quot;,&amp;quot;UnreadMessages&amp;quot;,&amp;quot;UnreadNotifications&amp;quot;,&amp;quot;UserID&amp;quot;,&amp;quot;Users&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we can see that, as with all my connections, it supports the  &lt;code&gt;"RequestsParameters"&lt;/code&gt;  request. We’ll give that a look on the  &lt;code&gt;"Questions"&lt;/code&gt;  request:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;RequestParameters&amp;quot;, &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Questions&amp;quot;]

(*Out:*)

&amp;lt;|&amp;quot;Parameters&amp;quot;-&amp;gt;{&amp;quot;id&amp;quot;,&amp;quot;site&amp;quot;,&amp;quot;page&amp;quot;,&amp;quot;pagesize&amp;quot;,&amp;quot;fromdate&amp;quot;,&amp;quot;todate&amp;quot;,&amp;quot;order&amp;quot;,&amp;quot;min&amp;quot;,&amp;quot;max&amp;quot;,&amp;quot;sort&amp;quot;,&amp;quot;tagged&amp;quot;},&amp;quot;Required&amp;quot;-&amp;gt;{&amp;quot;site&amp;quot;}|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we’ll give this a quick test, we’ll use the Mathematica Stack Exchange as our  &lt;code&gt;"site"&lt;/code&gt; , and we’ll restrict the  &lt;code&gt;"pagesize"&lt;/code&gt;  to 10 (for readability I dropped most of the data):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;Questions&amp;quot;, &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;, &amp;quot;pagesize&amp;quot; -&amp;gt; &amp;quot;10&amp;quot;][All,
  &amp;lt;|
    &amp;quot;title&amp;quot; -&amp;gt; &amp;quot;title&amp;quot;,
    &amp;quot;user&amp;quot; -&amp;gt; Function[Key[&amp;quot;display_name&amp;quot;]@#owner],
    &amp;quot;creation_date&amp;quot; -&amp;gt; Function[FromUnixTime@#[&amp;quot;creation_date&amp;quot;]],
    &amp;quot;score&amp;quot; -&amp;gt; &amp;quot;score&amp;quot;
    |&amp;gt;
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-1994354746241883665" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-1994354746241883665.png" /&gt;&lt;/p&gt;
&lt;p&gt;We can see there’s info on users, creation / modification dates, titles, scores, etc. So this alone is a pretty rich dataset to work with.&lt;/p&gt;
&lt;p&gt;So on the topic of actually importing it, we see in the request listing there’re these requests  &lt;code&gt;"QueryContinue"&lt;/code&gt;  and  &lt;code&gt;"QueryIterate"&lt;/code&gt;  and if we look at what we get for  &lt;code&gt;"QueryContinue"&lt;/code&gt; :&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;QueryContinue&amp;quot;]

(*Out:*)

True&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It tells us there’s more to import (obviously -- the Stack Exchange itself tells us it has about 45k questions on it).&lt;/p&gt;
&lt;p&gt;So then looking at the parameters of  &lt;code&gt;"QueryIterate"&lt;/code&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$so[&amp;quot;RequestParameters&amp;quot;, &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;QueryIterate&amp;quot;]

(*Out:*)

&amp;lt;|&amp;quot;Parameters&amp;quot;-&amp;gt;{__},&amp;quot;Required&amp;quot;-&amp;gt;{&amp;quot;Request&amp;quot;}|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It informs us it can take any parameters and the only required parameter is a  &lt;code&gt;"Request"&lt;/code&gt; . So we can set up an importer for  &lt;em&gt;&lt;em&gt;all&lt;/em&gt;&lt;/em&gt;  the data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$data =
   $so[&amp;quot;QueryIterate&amp;quot;,
     &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Questions&amp;quot;,
     &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;mathematica&amp;quot;
     ];
$data // Length

(*Out:*)

44812&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Seems about right. Now for future use let’s export this up to the cloud.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;CloudExport[$data, &amp;quot;MX&amp;quot;, &amp;quot;mse_question_list.mx&amp;quot;, 
 Permissions -&amp;gt; &amp;quot;Public&amp;quot;]

(*Out:*)

CloudObject[https://www.wolframcloud.com/objects/user-affd7b1c-ecb6-4ccc-8cc4-4d107e2bf04a/mse_question_list.mx]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And with the question data downloaded we can proceed to analyzing it.&lt;/p&gt;
&lt;p&gt;&lt;a id="dates-of-the-stack-exchange" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Dates of the Stack Exchange&lt;/h2&gt;
&lt;p&gt;If you want to just start in on working with the data, start with this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$data =
   CloudImport@
      &amp;quot;https://www.wolframcloud.com/objects/b3m2a1/mse_question_list.\
mx&amp;quot;;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;First let’s just see what we have:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;First@$data // Keys // Normal

(*Out:*)

{&amp;quot;tags&amp;quot;,&amp;quot;owner&amp;quot;,&amp;quot;is_answered&amp;quot;,&amp;quot;view_count&amp;quot;,&amp;quot;answer_count&amp;quot;,&amp;quot;score&amp;quot;,&amp;quot;last_activity_date&amp;quot;,&amp;quot;creation_date&amp;quot;,&amp;quot;question_id&amp;quot;,&amp;quot;link&amp;quot;,&amp;quot;title&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;So maybe we’ll start with looking at posting dates. These things are in  &lt;a href="https://en.wikipedia.org/wiki/Unix_time"&gt;Unix time&lt;/a&gt;  so we’ll need to use the  &lt;a href="https://reference.wolfram.com/language/ref/FromUnixTime.html"&gt;&lt;code&gt;FromUnixTime&lt;/code&gt;&lt;/a&gt;  function to convert them to  &lt;a href="https://reference.wolfram.com/language/ref/DateObject.html"&gt;&lt;code&gt;DateObject&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$dates =
   FromUnixTime /@ $data[All, &amp;quot;creation_date&amp;quot;];&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we’ll just start with a  &lt;a href="https://reference.wolfram.com/language/ref/DateHistogram.html"&gt;&lt;code&gt;DateHistogram&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;DateHistogram[$dates]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-9146256119295269744" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-9146256119295269744.png" /&gt;&lt;/p&gt;
&lt;p&gt;Pretty plain. Shows a consistent increase over time with an interesting plateau through 2013. If we find the release date for Version 10, by finding the introduction date of  &lt;a href="https://reference.wolfram.com/language/ref/Entity.html"&gt;&lt;code&gt;Entity&lt;/code&gt;&lt;/a&gt; , which was new as of 10.0:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;WolframLanguageData[&amp;quot;Entity&amp;quot;, &amp;quot;DateIntroduced&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-7485597023808812247" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-7485597023808812247.png" /&gt;&lt;/p&gt;
&lt;p&gt;And then show it on our plot:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Show[
 DateHistogram[$dates],
 TimelinePlot[{DateObject[{2014, 7, 9}, &amp;quot;Day&amp;quot;, &amp;quot;Gregorian&amp;quot;, -4.]}]
 ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-4738311787476834651" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-4738311787476834651.png" /&gt;&lt;/p&gt;
&lt;p&gt;We see it lines up pretty much exactly with the spike in questions asked, interestingly if we do the same with Version 11:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;WolframLanguageData[&amp;quot;NetTrain&amp;quot;, &amp;quot;DateIntroduced&amp;quot;]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-3436858114160092188" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-3436858114160092188.png" /&gt;&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Show[
 DateHistogram[$dates],
  TimelinePlot[{
     DateObject[{2014, 7, 9}, &amp;quot;Day&amp;quot;, &amp;quot;Gregorian&amp;quot;, -4.],
     DateObject[{2016, 8, 8}, &amp;quot;Day&amp;quot;, &amp;quot;Gregorian&amp;quot;, -4.]
     }]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-3945214832595082092" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-3945214832595082092.png" /&gt;&lt;/p&gt;
&lt;p&gt;We don’t see quite the same spike. This might simply reflect the lack of time since the release, however. It took about a year for 10 to hit peak question, it seems.&lt;/p&gt;
&lt;p&gt;In any case let’s just look at all of the introduction dates since 2011:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Show[
 DateHistogram[$dates],
  TimelinePlot[{
     EntityValue[
         &amp;quot;WolframLanguageSymbol&amp;quot;,
         &amp;quot;DateIntroduced&amp;quot;
         ] // DeleteDuplicates //

    Select[GreaterThan[
      DateObject[{2011, 1, 1}, &amp;quot;Day&amp;quot;, &amp;quot;Gregorian&amp;quot;, -4.]]]
     }]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-3688012773878789350" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-3688012773878789350.png" /&gt;&lt;/p&gt;
&lt;p&gt;The first thing to note is that WRI must have changed their versioning system starting with 10.0 (lots of point releases compared to 9.0). The second is that there’s a clear spike whenever a new major version is released, which I think shows that WRI is in fact putting in a lot of new functionality each release. And also that lots of it is glitchy...&lt;/p&gt;
&lt;p&gt;Unfortunately here we’re missing lots of the data from before Mathematica StackExchange was a thing, so let’s quickly import those questions we’re missing:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$soaddition =
   Join[
     $so[&amp;quot;QueryIterate&amp;quot;,
       &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Questions&amp;quot;,
       &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;stackoverflow&amp;quot;,
       &amp;quot;tagged&amp;quot; -&amp;gt; &amp;quot;wolfram-language&amp;quot;
       ],
     $so[&amp;quot;QueryIterate&amp;quot;,
       &amp;quot;Request&amp;quot; -&amp;gt; &amp;quot;Questions&amp;quot;,
       &amp;quot;site&amp;quot; -&amp;gt; &amp;quot;stackoverflow&amp;quot;,
       &amp;quot;tagged&amp;quot; -&amp;gt; &amp;quot;wolfram-mathematica&amp;quot;
       ]
     ];
$soaddition // Length

(*Out:*)

3697&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And we see were were only missing a paltry ~3.5k questions on our stack of ~45k. But we’ll add them in and see how things change:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Show[
  DateHistogram[
    Join[$dates, FromUnixTime /@ $soaddition[All, &amp;quot;creation_date&amp;quot;]]
    ],
  TimelinePlot[{
     EntityValue[
         &amp;quot;WolframLanguageSymbol&amp;quot;,
         &amp;quot;DateIntroduced&amp;quot;
         ] // DeleteDuplicates //

    Select[GreaterThan[
      DateObject[{2009, 1, 1}, &amp;quot;Day&amp;quot;, &amp;quot;Gregorian&amp;quot;, -4.]]]
     }]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-4234924400970162935" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-4234924400970162935.png" /&gt;&lt;/p&gt;
&lt;p&gt;And so maybe there was a spike for version 8.0, but if there was it is nearly indiscernible in the context of our entire dataset so lets look at in its own context:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Show[
  DateHistogram[FromUnixTime /@ $soaddition[All, &amp;quot;creation_date&amp;quot;]],
  TimelinePlot[{
     EntityValue[
         &amp;quot;WolframLanguageSymbol&amp;quot;,
         &amp;quot;DateIntroduced&amp;quot;
         ] // DeleteDuplicates //

    Select[GreaterThan[
      DateObject[{2009, 1, 1}, &amp;quot;Day&amp;quot;, &amp;quot;Gregorian&amp;quot;, -4.]]]
     }]
  ]

(*Out:*)&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-questions-on-the-mathematica-stack-exchange-7112474962939824089" src="https://b3m2a1.github.io/img/posts-questions-on-the-mathematica-stack-exchange-7112474962939824089.png" /&gt;&lt;/p&gt;
&lt;p&gt;And there we can see the spike, before the Mathematica Stack Exchange develops and crushes it.&lt;/p&gt;
&lt;p&gt;That is, I think, enough for now, but at some future date we’ll come back to this and look at how / if posting time of day / year correlates to question score.&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>ServiceConnections - Mathematica on the Web</title><link href="https://b3m2a1.github.io/serviceconnections---mathematica-on-the-web.html" rel="alternate"></link><published>2017-07-24T22:09:34-05:00</published><updated>2017-07-26T00:36:30-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-07-24:/serviceconnections---mathematica-on-the-web.html</id><summary type="html">&lt;h3&gt;This is a an amalgamation of  &lt;a href="https://mathematica.stackexchange.com/a/147196/38205"&gt;three&lt;/a&gt;   &lt;a href="https://mathematica.stackexchange.com/a/147452/38205"&gt;Stack Exchange&lt;/a&gt;   &lt;a href="https://mathematica.stackexchange.com/a/147547/38205"&gt;answers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Mathematica has a nice system for building API connections. It’s clean, object oriented, and built off of the function  &lt;a href="https://reference.wolfram.com/language/ref/ServiceConnect.html"&gt;&lt;code&gt;ServiceConnect&lt;/code&gt;&lt;/a&gt; . The basic idea is that one connects to a service, creates an object representing that connection and caching its …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;This is a an amalgamation of  &lt;a href="https://mathematica.stackexchange.com/a/147196/38205"&gt;three&lt;/a&gt;   &lt;a href="https://mathematica.stackexchange.com/a/147452/38205"&gt;Stack Exchange&lt;/a&gt;   &lt;a href="https://mathematica.stackexchange.com/a/147547/38205"&gt;answers&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Mathematica has a nice system for building API connections. It’s clean, object oriented, and built off of the function  &lt;a href="https://reference.wolfram.com/language/ref/ServiceConnect.html"&gt;&lt;code&gt;ServiceConnect&lt;/code&gt;&lt;/a&gt; . The basic idea is that one connects to a service, creates an object representing that connection and caching its state, and then uses that object to send and parse calls.&lt;/p&gt;
&lt;p&gt;Then digging in the  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/PacletManager/ref/%24UserBasePacletsDirectory.html"&gt;&lt;code&gt;$UserBasePacletsDirectory&lt;/code&gt;&lt;/a&gt;  one day I stumbled upon a bunch of paclets whose names were things like ServiceConnection_ServiceName. And that made me think that I could build my own (moreover I’d had success doing the same with the curated data framework already).&lt;/p&gt;
&lt;p&gt;If you just want to start building your own I only ever build them using the  &lt;code&gt;CustomServiceConnection&lt;/code&gt;  I stuck into my  &lt;a href="http://www.wolframcloud.com/objects/b3m2a1.paclets/paclets/PacletServer/main.html#BTools"&gt;primary package.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="service-connection-paclets" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Service Connection Paclets&lt;/h1&gt;
&lt;p&gt;These paclets are pretty bare bones, to take a look at one of them:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletOpen[&amp;quot;ServiceConnection_ChemSpider&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="image-posts-serviceconnections--mathematica-on-the-web-2309314407486505745" src="https://b3m2a1.github.io/img/posts-serviceconnections--mathematica-on-the-web-2309314407486505745.png" /&gt;&lt;/p&gt;
&lt;p&gt;Some of these things have an extra file, $ServiceName.m, but in general this appears to be pretty standard. We’ll dig through this an see how it works.&lt;/p&gt;
&lt;p&gt;&lt;a id="load.m" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;load.m&lt;/h2&gt;
&lt;p&gt;This file is trivial. For ChemSpider I have:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletManager`Package`getPacletWithProgress[&amp;quot;ServiceConnection_\
ChemSpider&amp;quot;]

Get[&amp;quot;ChemSpiderLoad`&amp;quot;]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Basically it just configures the loader. Easy. Let’s move on.&lt;/p&gt;
&lt;p&gt;&lt;a id="chemspiderload.m" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ChemSpiderLoad.m&lt;/h2&gt;
&lt;p&gt;This is also super simple. I have:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(* Mathematica Package *)

BeginPackage[&amp;quot;ChemSpiderLoad`&amp;quot;]
(* Exported symbols added here with SymbolName::usage *)

Begin[&amp;quot;`Private`&amp;quot;] (* Begin Private Context *)

If[! ListQ[System`$Services], Get[&amp;quot;OAuth`&amp;quot;]]

Block[{dir = DirectoryName[System`Private`$InputFileName]},
  KeyClient`addKeyservice[&amp;quot;ChemSpider&amp;quot;, dir]
 ]


End[] (* End Private Context *)
EndPackage[]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;The main thing to note here is that  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/KeyClient/ref/addKeyservice.html"&gt;&lt;code&gt;KeyClient`addKeyservice&lt;/code&gt;&lt;/a&gt;  chilling there. It’s one of three different clients whoever wrote the framework has provided, the big one being the  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/OAuthClient/guide/OAuthClient.html"&gt;&lt;code&gt;OAuthClient`&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a id="chemspider.m" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;ChemSpider.m&lt;/h2&gt;
&lt;p&gt;This is the meat of the paclet. Basically you provide the system with all the needed to format an object via  &lt;code&gt;ServiceConnect&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Let’s forget our  &lt;a href="https://www.youtube.com/watch?v=k33ZQ4I4p24"&gt;do-re-mis&lt;/a&gt;  (sorry Julie) and not start at the very beginning. Instead we’ll start at the very end where we see this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;(* Return three functions to define oauthservicedata, \
oauthcookeddata, oauthsendmessage  *)
\
{ChemSpiderAPI`Private`chemspiderdata, \
ChemSpiderAPI`Private`chemspidercookeddata, \
ChemSpiderAPI`Private`chemspidersendmessage}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This is what’s returned (and all of what’s returned) by the package. So these three functions define the entire service. Actually, it’s really the first two that define the service, that last one generally only ever appears in a line like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;chemspidersendmessage[___] := $Failed&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Except in the Twilio connection where it does something. But it’s never been worth it for me to figure it out. So moving on!&lt;/p&gt;
&lt;p&gt;&lt;a id="chemspiderdata" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;chemspiderdata&lt;/h2&gt;
&lt;p&gt;This is the core service data function. It defines the all of the service parameters and how the connection should be formatted. Here’s the primary data definition from the file:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;chemspiderdata[] = {
    &amp;quot;ServiceName&amp;quot;       -&amp;gt; &amp;quot;ChemSpider&amp;quot;,


  &amp;quot;URLFetchFun&amp;quot;  :&amp;gt; (With[{params = Lookup[{##2}, &amp;quot;Parameters&amp;quot;, {}]},
                URLFetch[#1, &amp;quot;ContentData&amp;quot;,

       Sequence @@ 
        FilterRules[{##2}, Except[&amp;quot;Parameters&amp;quot; | &amp;quot;Headers&amp;quot;]], 
                    &amp;quot;Parameters&amp;quot; -&amp;gt; params /. &amp;quot;apikey&amp;quot; -&amp;gt; &amp;quot;token&amp;quot;,
                    &amp;quot;Headers&amp;quot; -&amp;gt; {}]] &amp;amp;),


  &amp;quot;ClientInfo&amp;quot;  :&amp;gt; 
   OAuthDialogDump`Private`MultipleKeyDialog[
    &amp;quot;ChemSpider&amp;quot;, {&amp;quot;Security Token&amp;quot; -&amp;gt; &amp;quot;token&amp;quot;},

    &amp;quot;https://www.chemspider.com/UserProfile.aspx&amp;quot;, 
    &amp;quot;http://www.rsc.org/help-legal/legal/terms-conditions/&amp;quot;],
        &amp;quot;Gets&amp;quot;    -&amp;gt; {&amp;quot;Search&amp;quot;, &amp;quot;CompoundInformation&amp;quot;, 
    &amp;quot;CompoundThumbnail&amp;quot;, &amp;quot;Databases&amp;quot;, &amp;quot;ExtendedCompoundInformation&amp;quot;, 
    &amp;quot;AllSpectraInformation&amp;quot;, &amp;quot;CompoundSpectraInformation&amp;quot;, 
    &amp;quot;SpectrumInformation&amp;quot;, &amp;quot;InChIKeyQ&amp;quot;, &amp;quot;GetIdentifier&amp;quot;(*,
    &amp;quot;MOLToInChI&amp;quot;,&amp;quot;MOLToInChIKey&amp;quot;,&amp;quot;IDToMOL&amp;quot;,&amp;quot;RecordToMOL&amp;quot;,
    &amp;quot;MOLToID&amp;quot;*)},
        &amp;quot;RawGets&amp;quot;   -&amp;gt; {&amp;quot;RawGetDatabases&amp;quot;, &amp;quot;RawGetExtendedCompoundInfo&amp;quot;, 
    &amp;quot;RawGetRecordMOL&amp;quot;, &amp;quot;RawSearchByFormula2&amp;quot;, &amp;quot;RawSearchByMass2&amp;quot;,
                &amp;quot;RawAsyncSimpleSearch&amp;quot;, &amp;quot;RawAsyncSimpleSearchOrdered&amp;quot;, 
    &amp;quot;RawGetAsyncSearchResults&amp;quot;, &amp;quot;RawGetCompoundInfo&amp;quot;, 
    &amp;quot;RawGetCompoundThumbnail&amp;quot;, &amp;quot;RawMol2CSID&amp;quot;, &amp;quot;RawSimpleSearch&amp;quot;, 
    &amp;quot;RawGetAllSpectraInfo&amp;quot;,
                &amp;quot;RawGetCompoundSpectraInfo&amp;quot;, &amp;quot;RawGetSpectrumInfo&amp;quot;, 
    &amp;quot;RawCSIDToMol&amp;quot;, &amp;quot;RawIsValidInChIKey&amp;quot;, &amp;quot;RawMolToInChI&amp;quot;, 
    &amp;quot;RawMolToInChIKey&amp;quot;, &amp;quot;RawInChIToMol&amp;quot;, &amp;quot;RawInChIToInChIKey&amp;quot;, 
    &amp;quot;RawInChIToCSID&amp;quot;, &amp;quot;RawInChIKeyToMol&amp;quot;, &amp;quot;RawInChIKeyToInChI&amp;quot;, 
    &amp;quot;RawInChIKeyToCSID&amp;quot;},
        &amp;quot;Posts&amp;quot;    -&amp;gt; {},
        &amp;quot;RawPosts&amp;quot;   -&amp;gt; {},
        &amp;quot;Information&amp;quot;  -&amp;gt; 
   &amp;quot;Import ChemSpider API data to the Wolfram Language&amp;quot;
        }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;There are a few groupings here that should stand out.&lt;/p&gt;
&lt;h3&gt;ServiceName / Information&lt;/h3&gt;
&lt;p&gt;These two are basic AF. They’re plain strings that just give the service a name and a one-line description.&lt;/p&gt;
&lt;h3&gt;Gets / RawGets &amp;amp; Posts / RawPosts&lt;/h3&gt;
&lt;p&gt;These give the names of the requests that will eventually be passable into  &lt;a href="https://reference.wolfram.com/language/ref/ServiceExecute.html"&gt;&lt;code&gt;ServiceExecute&lt;/code&gt;&lt;/a&gt;  as well as the names of the core requests that will be called to provide data to those.&lt;/p&gt;
&lt;p&gt;I’ll detail how these work  &lt;a href="#request-formatting"&gt;later&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;ClientInfo&lt;/h3&gt;
&lt;p&gt;This is the data that defines how authentication should be done. Looking at the one we have here: &lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;quot;ClientInfo&amp;quot; :&amp;gt;
  OAuthDialogDump`Private`MultipleKeyDialog[&amp;quot;ChemSpider&amp;quot;,
    {&amp;quot;Security Token&amp;quot; -&amp;gt; &amp;quot;token&amp;quot;},
    &amp;quot;https://www.chemspider.com/UserProfile.aspx&amp;quot;,
    &amp;quot;http://www.rsc.org/help-legal/legal/terms-conditions/&amp;quot;
    ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It’s calling a function that pops open a dialog with a button that sends you to the URL in the third argument, asks for the field(s) given in the second argument, and is named according to the first.&lt;/p&gt;
&lt;p&gt;As I mentioned before there are two main clients for these connections and, as best I can tell, this is the core authorization function of the  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/KeyClient/guide/KeyClient.html"&gt;&lt;code&gt;KeyClient`&lt;/code&gt;&lt;/a&gt; . I think it is so called because it uses an API key, rather than the  &lt;a href="https://stormpath.com/blog/what-the-heck-is-oauth"&gt;OAuth flow&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;For a standard OAuth implementation we’ll pull from the Facebook connection (note that I chopped a lot of unrelated stuff out):&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;{
  &amp;quot;AuthorizeEndpoint&amp;quot; -&amp;gt; &amp;quot;https://graph.facebook.com/oauth/authorize&amp;quot;, 
  &amp;quot;AccessEndpoint&amp;quot; -&amp;gt; 
  &amp;quot;https://graph.facebook.com/oauth/access_token&amp;quot;,
  &amp;quot;RedirectURI&amp;quot;       -&amp;gt; 
  &amp;quot;https://www.wolfram.com/oauthlanding?service=Facebook&amp;quot;,
  &amp;quot;VerifierLabel&amp;quot;     -&amp;gt; &amp;quot;code&amp;quot;,
  &amp;quot;AuthenticationDialog&amp;quot; -&amp;gt; (OAuthClient`tokenOAuthDialog[#, 
     &amp;quot;Facebook&amp;quot;, fbicon] &amp;amp;),
  &amp;quot;ClientInfo&amp;quot;        -&amp;gt; {&amp;quot;Wolfram&amp;quot;, &amp;quot;Token&amp;quot;},
  &amp;quot;AccessTokenExtractor&amp;quot;  -&amp;gt; &amp;quot;JSON/2.0&amp;quot;
  }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If it’s not clear this is an OAuth 2.0 flow, but most services these days use OAuth 2.0 so I have yet to dig and figure out how an OAuth 1.0 service would be set up.&lt;/p&gt;
&lt;p&gt;Note that we provide an  &lt;code&gt;"AuthorizeEndpoint"&lt;/code&gt; ,  &lt;code&gt;"AccessEndpoint"&lt;/code&gt; ,  &lt;code&gt;"RedirectURI"&lt;/code&gt;  and  &lt;code&gt;"VerifierLabel"&lt;/code&gt; . For some, like the Google Drive API, there are yet a few parameters to add, but they should be straight-forward and guessable.&lt;/p&gt;
&lt;p&gt;The function  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/OAuthClient/ref/tokenOAuthDialog.html"&gt;&lt;code&gt;OAuthClient`tokenOAuthDialog&lt;/code&gt;&lt;/a&gt;  calls the code that actually implements the flow, sending you to authorize the site and then passing you off to a redirect URL to copy the token.&lt;/p&gt;
&lt;p&gt;Modern paclets use the  &lt;a href="http://reference.wolfram.com/language/guide/Channel-BasedCommunication.html.en"&gt;Channel Framework&lt;/a&gt;  to provide a seamless way to get a token, presumably by listening into a channel to which is provided as the redirect URI. This is someone one could implement oneself easily enough.&lt;/p&gt;
&lt;h3&gt;URLFetchFunc&lt;/h3&gt;
&lt;p&gt;This is simply the function that’s used to process calls. It defaults to  &lt;a href="https://reference.wolfram.com/language/ref/URLFetch.html"&gt;&lt;code&gt;URLFetch&lt;/code&gt;&lt;/a&gt;  but can be an arbitrary function, as is done here, replacing the  &lt;code&gt;"Parameters"&lt;/code&gt;  and  &lt;code&gt;"Headers"&lt;/code&gt;  options.&lt;/p&gt;
&lt;p&gt;&lt;a id="request-formatting" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="request-formatting" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Request Formatting&lt;/h2&gt;
&lt;p&gt;Continuing on, we move to the requests themselves. There are two types of requests. The first are the “raw” requests which are the raw importers from the APIs. These provide info to the  &lt;code&gt;"URLFetchFunc"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Raw Requests&lt;/h3&gt;
&lt;p&gt;We’ll look at a sample raw request spec:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;chemspiderdata[&amp;quot;RawGetRecordMol&amp;quot;] := {
    &amp;quot;URL&amp;quot;    -&amp;gt; 
   &amp;quot;http://www.chemspider.com/MassSpecAPI.asmx/GetRecordMol&amp;quot;,
          &amp;quot;HTTPSMethod&amp;quot;  -&amp;gt; &amp;quot;GET&amp;quot;,
          &amp;quot;Parameters&amp;quot;  -&amp;gt; {&amp;quot;csid&amp;quot;, &amp;quot;calc3d&amp;quot;},
          &amp;quot;RequiredParameters&amp;quot; -&amp;gt; {&amp;quot;csid&amp;quot;, &amp;quot;calc3d&amp;quot;},
          &amp;quot;ResultsFunction&amp;quot; -&amp;gt; chemspiderimport
          }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We can see we’re give a URL, HTTP verb, query parameters, required parameters, and an import function (defaults to  &lt;code&gt;"URLFetchFunc"&lt;/code&gt; ).&lt;/p&gt;
&lt;p&gt;These are all pretty straightforward, but it’s worth noting that these can look rather different. Here’s another example, this time from Facebook:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$facebookphotopermissions = {};
facebookdata[&amp;quot;RawUserPhotos&amp;quot;] = {

  &amp;quot;URL&amp;quot;    -&amp;gt;  (ToString@
      StringForm[&amp;quot;https://graph.facebook.com/v2.3/`1`/photos&amp;quot;, 
       formatuser[##]] &amp;amp;),
          &amp;quot;PathParameters&amp;quot; -&amp;gt; {&amp;quot;UserID&amp;quot;},
          &amp;quot;Parameters&amp;quot;  -&amp;gt; {&amp;quot;limit&amp;quot;},
          &amp;quot;HTTPSMethod&amp;quot;  -&amp;gt; &amp;quot;GET&amp;quot;,
          &amp;quot;ResultsFunction&amp;quot; -&amp;gt; facebookimport,
          &amp;quot;RequiredPermissions&amp;quot; :&amp;gt; $facebookphotopermissions
      }&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Note that the  &lt;code&gt;"URL"&lt;/code&gt;  is now a function. I tend to use  &lt;a href="https://reference.wolfram.com/language/ref/URLBuild.html"&gt;&lt;code&gt;URLBuild&lt;/code&gt;&lt;/a&gt;  over the  &lt;a href="https://reference.wolfram.com/language/ref/StringForm.html"&gt;&lt;code&gt;StringForm&lt;/code&gt;&lt;/a&gt;  calls one tends to see in the paclets. &lt;/p&gt;
&lt;p&gt;Also we now have  &lt;code&gt;"PathParameters"&lt;/code&gt;  which get passed to  &lt;code&gt;"URL"&lt;/code&gt;  (note that  &lt;code&gt;"PathParameters"&lt;/code&gt;  can be added to the  &lt;code&gt;"RequiredParameters"&lt;/code&gt;  list).&lt;/p&gt;
&lt;p&gt;And we have  &lt;code&gt;"RequiredPermissions"&lt;/code&gt;  which is there for requesting permissions incrementally. I’ve never used. Not sure how it works.&lt;/p&gt;
&lt;p&gt;Note that the raw request needs to be a) defined in the basic  &lt;code&gt;$servicenamedata&lt;/code&gt;  function and b) needs to be added to the  &lt;code&gt;"RawGets"&lt;/code&gt; / &lt;code&gt;"RawPosts"&lt;/code&gt;  section of the  &lt;code&gt;"ClientInfo"&lt;/code&gt; .&lt;/p&gt;
&lt;h3&gt;Exposed Requests&lt;/h3&gt;
&lt;p&gt;These raw requests aren’t accessible to the user via  &lt;code&gt;ServiceExecute&lt;/code&gt; , though. Those exposed requests come via the  &lt;code&gt;$servicenamecookeddata&lt;/code&gt;  function that’s returned as the second argument of the service data list.&lt;/p&gt;
&lt;p&gt;Here’s a sample from the Facebook connection:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;facebookcookeddata[&amp;quot;PageData&amp;quot;, id_, args_] := Block[
   {rawdata, params, data},
   params = filterparameters[args, getallparameters[&amp;quot;RawPageData&amp;quot;]];
    params = 
   params /. 
    HoldPattern[Rule[a_, b_Integer]] :&amp;gt; Rule[a, ToString[b]];
   If[FreeQ[params, &amp;quot;PageID&amp;quot;], 
   Message[ServiceExecute::nparam, &amp;quot;PageID&amp;quot;]; Throw[$Failed]];
   rawdata = 
   OAuthClient`rawoauthdata[id, &amp;quot;RawPageData&amp;quot;, 
    Join[params, {&amp;quot;fields&amp;quot; -&amp;gt; 
       StringJoin[Riffle[facebookpagefields, &amp;quot;,&amp;quot;]]}]];      
   data = facebookimport[rawdata];
   Association[
   Replace[Normal[data], 
     HoldPattern[Rule[a_String, b_]] :&amp;gt; Rule[a, pagedataparse[b, a]], 
     Infinity] /. Thread[facebookpagefields -&amp;gt; facebookpageNames]]   
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Note that this is a real function, not just a list of parameters. And in fact these requests can be arbitrary functions that never go to the web. In all of my connections I add extra meta requests that tell me about the object itself, such as what parameters its requests can take.&lt;/p&gt;
&lt;p&gt;But the basic format looks like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$servicenamecookeddata[&amp;quot;Request&amp;quot;, id_, args_] :=
  Block[
    {rawdata, params},
    params = preProcessArguments[args];
    rawdata = OAuthClient`rawoauthdata[id, &amp;quot;RawRequest&amp;quot;, params];    
    postProcessData[rawdata]
   ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Where that  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/OAuthClient/ref/rawoauthdata.html"&gt;&lt;code&gt;OAuthClient`rawoauthdata&lt;/code&gt;&lt;/a&gt;  will be  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/KeyClient/ref/rawkeydata.html"&gt;&lt;code&gt;KeyClient`rawkeydata&lt;/code&gt;&lt;/a&gt;  for services that use API keys.&lt;/p&gt;
&lt;p&gt;And analogously to the raw request, this request a) needs to defined in  &lt;code&gt;$servicenamecookeddata&lt;/code&gt;  and b) needs to be added to the  &lt;code&gt;"Gets"&lt;/code&gt; / &lt;code&gt;"Posts"&lt;/code&gt;  section of the  &lt;code&gt;"ClientInfo"&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a id="custom-service-connection" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Custom Service Connection&lt;/h1&gt;
&lt;p&gt;All of this is nice to know for making them by hand, but generally it’s not worth it to fill all that out just to get an API connection. That’s why I built a function that can fill all of that out from a template. The basic idea is that there are template files that will programmatically configure a service connection if given the appropriate parameters and so the function simply needs to format the parameters appropriately.&lt;/p&gt;
&lt;p&gt;&lt;a id="template-files" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Template Files&lt;/h2&gt;
&lt;p&gt;We’ll ignore load.m because it’s so basic.&lt;/p&gt;
&lt;h3&gt;$ServiceConnectionLoad.m&lt;/h3&gt;
&lt;p&gt;The main thing we change here is to add the block:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Block[{dir = DirectoryName[System`Private`$InputFileName]},
  Switch[$ServiceConnectionClientName,
     &amp;quot;OAuthClient&amp;quot; | &amp;quot;oauthclient&amp;quot; | &amp;quot;OauthClient&amp;quot;,
      OAuthClient`addOAuthservice,
     &amp;quot;KeyClient&amp;quot; | &amp;quot;keyclient&amp;quot;,
      KeyClient`addKeyservice,
     &amp;quot;OtherClient&amp;quot; | &amp;quot;otherclient&amp;quot;,
      OtherClient`addOtherservice
     ][&amp;quot;$ServiceConnection&amp;quot;, dir]
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Where the client name will be provided by the user and formatted by the function.&lt;/p&gt;
&lt;h3&gt;$ServiceConnectionFunctions.m&lt;/h3&gt;
&lt;p&gt;This is a standard file that is in many service connections (although not either of the two we looked at). Looking at some of what we have in the template:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$ServiceConnectionHelperNames
(* OAuth loopback *)
$serviceconnectionprivateoauthpagelink::usage =
   &amp;quot;A local redirect URI that tells the user what the access code to \
copy is&amp;quot;;
$serviceconnectionprivateoauthcloudlink::usage =
   &amp;quot;A cloud exported redirect URI that tells the user what the access \
code to copy is&amp;quot;;
$serviceconnectionprivateoauthtokenfile::usage =
   &amp;quot;A fake OAuth token for when a real OAuth token isn't needed by \
the OAuth client is desired&amp;quot;;
$$serviceconnectionaccesscodecloudlink::usage =
  &amp;quot;A static cloud object URL for getting code copied&amp;quot;
$$serviceconnectionaccesstokencloudlink::usage =
  &amp;quot;A static cloud object URL for getting an access_token copied&amp;quot;
(* Request Formatting *)
$serviceconnectionreformatbodydata::usage =
   &amp;quot;Reformats the BodyData parameter of a request. Used by default \
for KeyClient&amp;quot;;
$serviceconnectionreformatmultipartbodydata::usage =
   &amp;quot;Reformats BodyData into a MultipartData made of metadata and \
content fragment&amp;quot;;
$serviceconnectionpatchedurlfetchblock::usage =
   &amp;quot;A block that patches $$serviceconnectionurlfetchpatch into \
URLFetch&amp;quot;;
$serviceconnectionpatchmultipartparams::usage =
   &amp;quot;A block that sets the patching for multipart data&amp;quot;;
$$serviceconnectionlastrequest::usage =
   &amp;quot;A symbol that temporariliy gets the request association when \
using URLFetch override&amp;quot;;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We see there’s a block for custom functions:  &lt;code&gt;$ServiceConnectionHelperNames&lt;/code&gt;  but also a bunch of stuff that will be common to all these connections (although renamed to avoid shadowing).&lt;/p&gt;
&lt;p&gt;There’s stuff for forcing parameters into a  &lt;code&gt;URLFetch&lt;/code&gt;  which can be important for things like multi-part requests, and some functions for configuring call-back URLs plus two such URLs for code and access_token copying. In the future stuff could be added for using the channel framework to automatically pull in auth tokens, etc.&lt;/p&gt;
&lt;p&gt;This file is where most of the customization happens.&lt;/p&gt;
&lt;h3&gt;$ServiceConnection.m&lt;/h3&gt;
&lt;p&gt;This file provides a programmatic template for formatting these connections. The basic premise is that requests will be formatted as lists of rules, and the package will loop over these lists, filling out and customizing the  &lt;code&gt;$servicenamedata&lt;/code&gt;  and  &lt;code&gt;$servicenamecookeddata&lt;/code&gt;  functions.&lt;/p&gt;
&lt;p&gt;In the cooked data functions it determines whether a request has a raw request underpinning it and, if so, uses a version of:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$servicenamecookeddata[&amp;quot;Request&amp;quot;, id_, args_] :=
  Block[
    {rawdata, params},
    params = preProcessArguments[args];
    rawdata = OAuthClient`rawoauthdata[id, &amp;quot;RawRequest&amp;quot;, params];    
    postProcessData[rawdata]
   ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;with pre and post provided&lt;/p&gt;
&lt;p&gt;If there’s no raw request, it provides some basic  &lt;code&gt;"RequiredParameters"&lt;/code&gt;  checking and some other useful stuff, but basically just calls the function on the object and request parameters.&lt;/p&gt;
&lt;h3&gt;Paclet Creation&lt;/h3&gt;
&lt;p&gt;Then the function just packs up the paclet with the appropriate PacletInfo.m so it can be installed.&lt;/p&gt;
&lt;p&gt;&lt;a id="template-notebook" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Template Notebook&lt;/h2&gt;
&lt;p&gt;Given that there’re lots of parameters to track and fill out it makes sense to run this as a  &lt;a href="https://raw.githubusercontent.com/b3m2a1/mathematica-BTools/master/Templates/ServiceConnectionTemplate.nb" download&gt;template notebook&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The template is divided into sections roughly corresponding to the sections of the $ServiceConnection.m file, they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basics - the name of the service, the prefix to stick onto function names, and the basic description&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Connection Info - the  &lt;code&gt;"ClientInfo"&lt;/code&gt;  setup, 4 different templates are provided for this&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Helper Functions - functions to be inserted into the $ServiceConnectionFunctions.m file for access throughout the connection. A few common functions are provided.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Raw Import Functions - the setup for the RawRequests each is formatted like:&lt;/p&gt;
&lt;p&gt;$importFuncs["Raw" &amp;lt;&amp;gt; &amp;lt; name &amp;gt;] =
  With[{
    base = $serviceBase,
    stdParams = $serviceBaseParameters
    },
   {
    "URL" -&amp;gt;(&lt;em&gt;&lt;URL&gt; or (URLBuild[{&amp;lt; Params &amp;gt;,&lt;Slots&gt;, &amp;lt;
    Params&amp;gt; ...}]&amp;amp;) for processes one can use &lt;code&gt;key&lt;/code&gt; to insert a \
keyword parameter&lt;/em&gt;),
    "Method" -&amp;gt;(&lt;em&gt; "Get", "Post", "Delete", etc. Defaults to "Get"&lt;/em&gt;),
    "Path" -&amp;gt;(&lt;em&gt; 
    Parameters that will be inserted in the URL (in sequential order) \
&lt;/em&gt;),
    "Parameters" -&amp;gt;(&lt;em&gt; 
    Parameters that will be passed as Parameters to the URLFetch \
function &lt;/em&gt;),
    "Required" -&amp;gt; (&lt;em&gt; the arguments that will be required &lt;/em&gt;),
    "Headers" -&amp;gt; (&lt;em&gt; Headers that will be passed by default &lt;/em&gt;),
    "Function" -&amp;gt;(&lt;em&gt; The function used to import the results &lt;/em&gt;)
    }
   ];&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cooked Functions - the functions that implement the actual requests. These look like:&lt;/p&gt;
&lt;p&gt;$cookedFuncs[&amp;lt; Name &amp;gt;] = {
   "Call" -&amp;gt; Raw &amp;lt; Name &amp;gt;,
   "Pre" -&amp;gt; &amp;lt; Preprocess Parameters Function &amp;gt;,
   "Import" -&amp;gt; &amp;lt; Import Function &amp;gt;,
   "Post" -&amp;gt; &amp;lt; Post Process Dataset &amp;gt;
   };&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paclet Creation - the setup for the paclet (with a section for adding a service connection icon). This section finally calls  &lt;code&gt;CustomServiceConnection&lt;/code&gt;  to build the paclet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a id="testing" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;The template notebook also provides a testing section so you can check that your connection is working as it should. The core of this is a function that will reload your paclet data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;ServiceConnections`Private`findandloadServicePaclet[$serviceName]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;But if you need to change your client info (say you added a request) this actually won’t suffice as the system calls  &lt;a href="https://reference.wolfram.com/language/ref/Once.html"&gt;&lt;code&gt;Once&lt;/code&gt;&lt;/a&gt; . For that, instead, you’ll need to actually clear the stored data:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;With[{func = $client &amp;lt;&amp;gt; &amp;quot;Client`Private`&amp;quot; &amp;lt;&amp;gt; ToLowerCase[$client] &amp;lt;&amp;gt; 
    &amp;quot;$servicedata&amp;quot;},
 Quiet[
  Once[func[$serviceName]] =.;
  $so // ServiceDisconnect
  ]
 ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="paclet-distribution" &gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Paclet Distribution&lt;/h2&gt;
&lt;p&gt;Once you’ve stress tested your connection, you can move on to distributing it to others. This uses  &lt;code&gt;PacletUpload&lt;/code&gt;  to place the paclet in the cloud where others can access it:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PacletUpload[&amp;quot;ServiceConnection_&amp;quot; &amp;lt;&amp;gt; $serviceName] // 
   Key[&amp;quot;PacletFiles&amp;quot;] // First // First&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Then all others need to do is call  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.paclets/reference/PacletManager/ref/PacletInstall.html"&gt;&lt;code&gt;PacletInstall&lt;/code&gt;&lt;/a&gt;  on that link and they’ll be able to use your connection with  &lt;code&gt;ServiceConnect&lt;/code&gt; .&lt;/p&gt;</content><category term="mathematica"></category></entry><entry><title>Building Websites with Mathematica</title><link href="https://b3m2a1.github.io/building-websites-with-mathematica.html" rel="alternate"></link><published>2017-07-23T03:27:43-05:00</published><updated>2018-05-01T22:35:15-05:00</updated><author><name>b3m2a1</name></author><id>tag:b3m2a1.github.io,2017-07-23:/building-websites-with-mathematica.html</id><summary type="html">&lt;p&gt;For this website's inaugural post I thought I'd detail how it was built.&lt;/p&gt;
&lt;p&gt;It starts, I suppose, with an HTML templating package I wrote. For various things I'd needed to host static HTML pages in the Wolfram Cloud. My basic process there was to write some block like:&lt;/p&gt;
&lt;pre &gt;
&lt;code&gt;
$htmlTemplate=
"&lt;html&gt;
 &lt;a href=\"my-link\"&gt;``&lt;/a&gt;
&lt;html&gt;"
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For this website's inaugural post I thought I'd detail how it was built.&lt;/p&gt;
&lt;p&gt;It starts, I suppose, with an HTML templating package I wrote. For various things I'd needed to host static HTML pages in the Wolfram Cloud. My basic process there was to write some block like:&lt;/p&gt;
&lt;pre &gt;
&lt;code&gt;
$htmlTemplate=
"&lt;html&gt;
 &lt;a href=\"my-link\"&gt;``&lt;/a&gt;
&lt;html&gt;"
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;And I'd fill it in with various parameters using  &lt;a href="https://reference.wolfram.com/language/ref/TemplateApply.html"&gt;&lt;code&gt;TemplateApply&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Over time this just got too clunky, though, and I wanted a better system, so I sunk a day's work into building a system to display that HTML right in the notebook as a listing of cells and export it to a .html file, exporting all the CSS and image necessary to get things working.&lt;/p&gt;
&lt;p&gt;And, you know, it worked pretty well. But on the other hand it meant I was writing the raw HTML. Even speeding things up using templates and nicer stylesheets could only got me so far. That prompted me to think "hmm... do I know do this for markdown and write a converter?" which I really didn't like the thought of. So instead I decided to look at  &lt;a href="http://szhorvat.net/pelican"&gt;a website&lt;/a&gt;  I had a guess was built programmatically. Which eventually got me to  &lt;a href="https://blog.getpelican.com/"&gt;pelican&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Looking through the docs got me convinced that this was, in fact, the way I wanted to render a site. It was simple, supported Markdown syntax, was extensible. And even better it was written in python so if I had to extend things or figure out what was going on I'd be able to do it in a langue I was fluent in.&lt;/p&gt;
&lt;p&gt;&lt;a id="installing-pelican" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installing Pelican&lt;/h2&gt;
&lt;p&gt;So as with most python projects, the step-1 is to build a virtual environment and install via pip. The whole flow looks like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code class="language-sh linenums"&gt;#!/bin/sh
venv ~/virtualenvs/pelican
cd ~/virtualenvs/pelican
source bin/activate
pip install pelican&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;I thought, though, that it might make sense to build this into Mathematica. After all there're a lot of quality python packages out there and the easier it is to use them in my primary development environment the better. &lt;/p&gt;
&lt;p&gt;So I built a quick  &lt;a href="https://reference.wolfram.com/language/ref/ProcessObject.html"&gt;&lt;code&gt;ProcessObject&lt;/code&gt;&lt;/a&gt;  wrapper for a virtual environment, which I use via the  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/reference/BTools/ref/PyVenvRun.html"&gt;&lt;code&gt;PyVenvRun&lt;/code&gt;&lt;/a&gt;  function&lt;/p&gt;
&lt;p&gt;The core of the function is that there is a  &lt;code&gt;ProcessObject&lt;/code&gt;  which has been initialized with the appropriate virtual environment. If one hasn't been started,  &lt;code&gt;PyVenvRun&lt;/code&gt;  starts it and kills after the run is over. In the run itself it generates start/end-of-process flags via  &lt;a href="https://reference.wolfram.com/language/ref/CreateUUID.html"&gt;&lt;code&gt;CreateUUID&lt;/code&gt;&lt;/a&gt; , passes the start flag to be echoed, passes the appropriately escaped command, then the end flag to be echoed command and reads until it times out or finds the end of process flag.&lt;/p&gt;
&lt;p&gt;Here's a sample using my python3.4 environment&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PyVenvRun[&amp;quot;python3.4&amp;quot;,
  &amp;quot;python -V&amp;quot;
  ]

(*Out:*)

&amp;lt;|&amp;quot;StandardOutput&amp;quot;-&amp;gt;&amp;quot;Python 3.4.4&amp;quot;,&amp;quot;StandardError&amp;quot;-&amp;gt;&amp;quot;&amp;quot;|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;It has a timeout, of course, for when things go wrong, which defaults to one second:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PyVenvRun[&amp;quot;python3.4&amp;quot;,
  &amp;quot;sleep 2; echo cat&amp;quot;
  ]

(*Out:*)

&amp;lt;|&amp;quot;StandardOutput&amp;quot;-&amp;gt;&amp;quot;&amp;quot;,&amp;quot;StandardError&amp;quot;-&amp;gt;&amp;quot;&amp;quot;|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;You can see that it just timed out there, generating no output. But we can get the output back by increasing the timeout:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PyVenvRun[&amp;quot;python3.4&amp;quot;,
  &amp;quot;sleep 2; echo cat&amp;quot;,
  TimeConstraint-&amp;gt;5
  ]

(*Out:*)

&amp;lt;|&amp;quot;StandardOutput&amp;quot;-&amp;gt;&amp;quot;cat&amp;quot;,&amp;quot;StandardError&amp;quot;-&amp;gt;&amp;quot;&amp;quot;|&amp;gt;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In any case that's not terribly exciting. We'll use it, though, with a virtualenv set up with pelican and Markdown, to build our site.&lt;/p&gt;
&lt;p&gt;&lt;a id="creating-the-site" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Creating the Site&lt;/h2&gt;
&lt;p&gt;To actually build the site we need to set up the core content and setting files and provide a theme, the latter of which being of course the bigger time-sink. With that we can test locally using another python command-line tool.&lt;/p&gt;
&lt;h3&gt;Directory Structure &amp;amp; Basic Configuration&lt;/h3&gt;
&lt;p&gt;The actual function for building the site is just going to be a very simple wrapper to  &lt;code&gt;PyVenvRun&lt;/code&gt; , but before that the site needs actual content.&lt;/p&gt;
&lt;p&gt;For that we'll take a look at the standard pelicanconf.py file that the &lt;code&gt;pelican-quickstart&lt;/code&gt; command in the CLI will produce, then replace the fields with templates:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;&amp;quot;#!/usr/bin/env python
# -*- coding: utf-8 -*- #
from __future__ import unicode_literals

AUTHOR = u'`Author`'
SITENAME = u'`Title`'
SITEURL = '`URL`'

PATH = 'content'
STATIC_PATHS = ['posts','img']

TIMEZONE = '`Timezone`'

DEFAULT_LANG = u'`Language`'

# Feed generation is usually not desired when developing
FEED_ALL_ATOM = None
CATEGORY_FEED_ATOM = None
TRANSLATION_FEED_ATOM = None
AUTHOR_FEED_ATOM = None
AUTHOR_FEED_RSS = None

# Enable Markdown
MARKDOWN = {
 `MarkdownExtensions`
 }

# Theme

THEME = '`Theme`'

# Blogroll
LINKS = `Links`

# Social widget
SOCIAL = `Social`

DEFAULT_PAGINATION = `PaginationNumber`

# Uncomment following line if you want document-relative URLs when developing
#RELATIVE_URLS = `UseRelativeURLs`&amp;quot;&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;We'll set that up with a function that will also build out the editing layout.&lt;/p&gt;
&lt;h3&gt;Themes&lt;/h3&gt;
&lt;p&gt;Generally, one is expected to provide a custom theme for one's pelican website. There are lots of different pelican themes out there, many are quite attractive. I chose a very simple (but nice) one to build off of called  &lt;a href="https://github.com/nairobilug/pelican-alchemy"&gt;alchemy&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;For convenience when testing out themes, though, I wrote a quick little theme lister / installer function  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/reference/BTools/ref/PelicanThemes.html"&gt;&lt;code&gt;PelicanThemes&lt;/code&gt;&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;There's a lot of info out there on editing pelican themes, but basically it's just setting up some HTML templates and CSS to make the site look how you want it. Easy enough, very convenient, etc.&lt;/p&gt;
&lt;p&gt;I made my own site theme, building off of elements I saw in a number of the themes available.&lt;/p&gt;
&lt;p&gt;One of the core utilities for someone writing Mathematica code, though, is the ability to plug into the prettify.js Mathematica code formatter. We'll build off of the best  &lt;a href="https://github.com/halirutan/Mathematica-Source-Highlighting"&gt;Mathematica prettify.js plugin&lt;/a&gt; . Just include that in the theme and the base.html template and we're good to go.&lt;/p&gt;
&lt;h3&gt;Testing the Site&lt;/h3&gt;
&lt;p&gt;Obviously one needs content before the site can be built-out, but that's rather more complex than a simple test is, so I'll start with the latter.&lt;/p&gt;
&lt;p&gt;The build process is really just all pelican doing it's thing. The build function itself is just a basic  &lt;code&gt;PyVenvRun&lt;/code&gt;  call, with the site directory passed (defaulting to the current notebook directory). We need to set the timeout rather higher, but not much as pelican is quite fast (on small sites).&lt;/p&gt;
&lt;p&gt;Then we'll want a way to test the site. For that we'll use python's SimpleHTTPServer, but, again with a Mathematica layer. The simple server setup is almost exactly the same as the  &lt;code&gt;PyVenv&lt;/code&gt;  setup, with a  &lt;code&gt;ProcessObject&lt;/code&gt;  and a root directory, etc. But here we need to choose a port and stuff. I chose 7001 because  &lt;code&gt;HTTPHandling`StartWebServer&lt;/code&gt;  uses 7000 by default.&lt;/p&gt;
&lt;p&gt;So once we've built out the site, we just start the  &lt;code&gt;PySimpleServer&lt;/code&gt;  on the output directory of the build and we're good to go. So the process looks like&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$site=&amp;quot;path/to/site&amp;quot;;
PelicanBuild[$site];
PySimpleServerOpen@FileNameJoin@{$site,&amp;quot;output&amp;quot;}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;img alt="1buildingwebsiteswithmathematica-3684620436964631583" src="https://b3m2a1.github.io/img/1buildingwebsiteswithmathematica-3684620436964631583.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="creating-content" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Creating Content&lt;/h2&gt;
&lt;p&gt;Obviously the most important part of a website is its content and the way pelican sets that up is to have you write in either markdown or reStructuredText. In both cases you provide the text and the metadata and this gets processed and fed into the system where it can be consumed by the templates.&lt;/p&gt;
&lt;p&gt;Since I use Mathematica for so much already, it was worth it (to me) to make a system to create my content in notebooks.&lt;/p&gt;
&lt;h3&gt;Metadata&lt;/h3&gt;
&lt;p&gt;Metadata for pelican can be pretty much whatever, but there's a standard subset of fields&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Title&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Date&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modified&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tags&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slug&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authors&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since I was using Mathematica to write my content, I realized there was no reason I couldn't simplify these fields.&lt;/p&gt;
&lt;p&gt;First off, for the Title I could obviously just take the notebook title. Easy. We'll let  &lt;code&gt;Automatic&lt;/code&gt;  as a title value map to that. The Slug could then just be the notebook title, lower-cased, with spaces replaced by dashes. We'll let that be what's signified by  &lt;code&gt;Automatic&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For the Date and Modified fields it made sense to just use  &lt;code&gt;DateString&lt;/code&gt;  and  &lt;code&gt;DateObject&lt;/code&gt;  to format everything correctly. And this way the Modified could always be  &lt;code&gt;Now&lt;/code&gt;  while the Date would be the original creation date.&lt;/p&gt;
&lt;p&gt;Finally the Tags and Authors just needed to be a list of strings&lt;/p&gt;
&lt;p&gt;And then I can just put these in a special Metadata cell in  &lt;code&gt;InputForm&lt;/code&gt;  as an  &lt;code&gt;Association&lt;/code&gt; . And of course any other fields can be added to that association (the Category field can be important, too).&lt;/p&gt;
&lt;h3&gt;Notebook to Markdown&lt;/h3&gt;
&lt;p&gt;I'm used to markdown from working with Stack Exchange, so I opted to use markdown as my blog posting format. So, since I also wanted to be able to write my blog pages in notebooks, I needed a notebook-to-markdown converter. I decided to just knock one up rather than try to adapt  &lt;a href="https://mathematica.stackexchange.com/questions/84556/how-to-export-a-mathematica-notebook-into-markdown"&gt;the best existing one&lt;/a&gt;  to my purposes, because I really didn't need to do much fancy stuff.&lt;/p&gt;
&lt;p&gt;The basic idea is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strings export to strings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input/Code cells export in  &lt;code&gt;InputForm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Output cells export as plain-text&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Graphics boxes get exported to image files by expression hash (to avoid exporting unnecessarily)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Section/Subsection/Subsubsection cells get exported as h1 / h2 / h3 respectively&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Items get exported as items&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new Quote cell will be introduced for block quotes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's simple to state and really pretty simple to do (there're like 2 complications with getting images to render in code-based output)&lt;/p&gt;
&lt;p&gt;Then just set it up so that when the notebook is saved, it also exports to markdown, using this mechanism. I stuck that all into a function called  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/reference/BTools/ref/PelicanNotebookSave.html"&gt;&lt;code&gt;PelicanNotebookSave&lt;/code&gt;&lt;/a&gt;  and added the following to my stylesheet:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;Cell[StyleData[&amp;quot;Notebook&amp;quot;],
  {
    CellEventActions-&amp;gt;
      {
        {&amp;quot;MenuCommand&amp;quot;,&amp;quot;Save&amp;quot;}:&amp;gt;BTools`PelicanNotebookSave[]
        }
      }
  ]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a id="publishing-the-site" style="width:0;height:0;margin:0;padding:0;"&gt;&amp;zwnj;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Publishing the Site&lt;/h2&gt;
&lt;p&gt;With the content built we now have to publish our site. For that we'll go to a quick export function for a directory to the cloud, which I called  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/reference/BTools/ref/PelicanDeploy.html"&gt;&lt;code&gt;PelicanDeploy&lt;/code&gt;&lt;/a&gt;  which is built on top of a function  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/reference/BTools/ref/WebSiteDeploy.html"&gt;&lt;code&gt;WebSiteDeploy&lt;/code&gt;&lt;/a&gt;  that takes files from a directory and exports them to the cloud, with some selectivity for file names and modification dates.&lt;/p&gt;
&lt;p&gt;The core of the function is using  &lt;a href="https://reference.wolfram.com/language/ref/CopyFile.html"&gt;&lt;code&gt;CopyFile&lt;/code&gt;&lt;/a&gt;  on a  &lt;a href="https://reference.wolfram.com/language/ref/CloudObject.html"&gt;&lt;code&gt;CloudObject&lt;/code&gt;&lt;/a&gt;  to move the files up to the cloud, making sure to set the  &lt;code&gt;CloudObject&lt;/code&gt;  permissions to public. Essentially it looks like:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$site=&amp;quot;path/to/site&amp;quot;;
CopyFile[
  #,
  CloudObject[
    URLBuild@
      Flatten@{
        FileBaseName@$site,
        FileNameSplit@FileNameDrop[#,1+FileNameDepth[$site]] (*1 extra for the &amp;quot;output&amp;quot;*)
        },
    Permissions-&amp;gt;&amp;quot;Public&amp;quot;
    ]
  ]&amp;amp;/@FileNames[&amp;quot;*.*&amp;quot;,$site,∞]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Note that one needs to actually be connected to the cloud, which I tend to do via  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/reference/BTools/ref/KeyChainConnect.html"&gt;&lt;code&gt;KeyChainConnect&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's one last complication though: the cloud doesn't seem to display index.html files. A work around is to pass it to some URL like path/to/home/main.html. It make sense, however, to deploy both (just for security). So our deployment ends up looking like this:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;$site=&amp;quot;path/to/site&amp;quot;;
Function[
  If[FileNameTake[#]===&amp;quot;index.html&amp;quot;,
    CopyFile[
      #,
      CloudObject[
        StringTrim[
          URLBuild@
            Flatten@{
              FileBaseName@$site,
              FileNameSplit@FileNameDrop[#,1+FileNameDepth[$site]] (*1 extra for the &amp;quot;output&amp;quot;*)
              },
          &amp;quot;/index.html&amp;quot;
          ]&amp;lt;&amp;gt;&amp;quot;/main.html&amp;quot;,
        Permissions-&amp;gt;&amp;quot;Public&amp;quot;
        ]
      ]
  ];
  CopyFile[
    #,
    CloudObject[
      URLBuild@
        Flatten@{
          FileBaseName@$site,
          FileNameSplit@FileNameDrop[#,1+FileNameDepth[$site]] (*1 extra for the &amp;quot;output&amp;quot;*)
          },
      Permissions-&amp;gt;&amp;quot;Public&amp;quot;
      ]
    ]
  ]/@FileNames[&amp;quot;*.*&amp;quot;,$site,∞]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;With that in place we're good to go. I wrote that into the function  &lt;a href="https://www.wolframcloud.com/objects/b3m2a1.docs/reference/BTools/ref/PelicanDeploy.html"&gt;&lt;code&gt;PelicanDeploy&lt;/code&gt;&lt;/a&gt;  so just run:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;&lt;code&gt;PelicanDeploy[&amp;quot;home&amp;quot; (*replace with your site base*)]&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And your site is built ( Note: when exporting lots of files I've sometimes hit a timeout.  Take a break and come back and it should work. )&lt;/p&gt;</content><category term="mathematica"></category><category term="python"></category><category term="meta"></category></entry></feed>